{
	"info": {
		"_postman_id": "001ea4bd-24aa-4217-b8d3-ba789201cc71",
		"name": "Akif_Team05",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32860153",
		"_collection_link": "https://restless-spaceship-430927.postman.co/workspace/TechPro~cc1caa12-ae12-4998-8f2a-412ed535d5b4/collection/32789767-001ea4bd-24aa-4217-b8d3-ba789201cc71?action=share&source=collection_link&creator=32860153"
	},
	"item": [
		{
			"name": "Team_05",
			"item": [
				{
					"name": "Auser-jwt-controller Copy",
					"item": [
						{
							"name": "User-jwt-Negative Test",
							"item": [
								{
									"name": "jwtToken-InvalidUserName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"invalidRandom_UserName_alp\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401 Unauthorized\",  () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"    const response = pm.response.json();\r",
													"pm.test(\"Is message as expected\", () => {\r",
													"       pm.expect(response.message).to.eql(\"error.http.401\");\r",
													"  });\r",
													"\r",
													"  // Expected title validation\r",
													"pm.test(\"Is title value as expected\", () => {\r",
													"       pm.expect(response.title).to.eql(\"Unauthorized\");\r",
													"  });\r",
													"\r",
													"  // verifies request doesn't return id_token property\r",
													"pm.test(\"Response body does not contain id_token property\", ()=> {\r",
													"    pm.expect(response).to.not.have.property(\"id_token\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"password\": \"{{password_alp}}\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"{{invalidRandom_UserName_alp}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}api/authenticate",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"authenticate"
											]
										}
									},
									"response": []
								},
								{
									"name": "jwtToken-Invalid_Pass",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"  //status code validation\r",
													"pm.test(\"Status code is 401 Unauthorized\",  () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													" const response = pm.response.json();\r",
													"//Error message validation\r",
													"pm.test(\"Is message as expected\", () => {\r",
													"          pm.expect(response.message).to.eql(\"error.http.401\");\r",
													"  });\r",
													"\r",
													"// Expected title validation\r",
													"pm.test(\"Is title value as expected\", () => {\r",
													"       pm.expect(response.title).to.eql(\"Unauthorized\");\r",
													"  });\r",
													"\r",
													"  // verifies request doesn't return id_token property\r",
													"pm.test(\"Response body does not contain id_token property\", ()=> {\r",
													"    pm.expect(response).to.not.have.property(\"id_token\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"invalidRandom_Password_alp\", pm.variables.replaceIn(\"{{$randomPassword}}\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"password\": \"{{invalidRandom_Password_alp}}\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"{{username_alp}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}api/authenticate",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"authenticate"
											]
										}
									},
									"response": []
								},
								{
									"name": "jwtToken-NoPass",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//status code validation\r",
													"pm.test(\"Status code is 400 Bad Request\",  () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"    const response = pm.response.json();\r",
													"//Error message validation\r",
													"pm.test(\"Is message as expected\", () => {\r",
													"       pm.expect(response.message).to.eql(\"error.validation\");\r",
													"  });\r",
													"\r",
													"//Response Body Error Field check test\r",
													"pm.test(\"Response Body has password in fieldErrors\", ()=> {\r",
													"    pm.expect(pm.response.text()).to.include(\"password\");\r",
													"});\r",
													"\r",
													"// verifies request doesn't return id_token property\r",
													"pm.test(\"Response body does not contain id_token property\", ()=> {\r",
													"    pm.expect(response).to.not.have.property(\"id_token\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"password\": \"\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"{{username_alp}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}api/authenticate",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"authenticate"
											]
										}
									},
									"response": []
								},
								{
									"name": "jwtToken-NoUsername",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//status code test\r",
													"pm.test(\"Status code is 400 Bad Request\",  () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"//Error message validation\r",
													"pm.test(\"Is message as expected\", () => {\r",
													"       pm.expect(response.message).to.eql(\"error.validation\");\r",
													"  });\r",
													"\r",
													"//Response Body Error Field check test\r",
													"pm.test(\"Response Body has username in fieldErrors\", ()=> {\r",
													"    pm.expect(pm.response.text()).to.include(\"username\");\r",
													"});\r",
													"\r",
													"// verifies request doesn't return id_token property\r",
													"pm.test(\"Response body does not contain id_token property\", ()=> {\r",
													"    pm.expect(response).to.not.have.property(\"id_token\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"password\": \"123456789\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}api/authenticate",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"authenticate"
											]
										}
									},
									"response": []
								},
								{
									"name": "jwtToken-NoBody",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400 Bad Request\",  () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"// verifies request doesn't return id_token property\r",
													"    const response = pm.response.json();\r",
													"pm.test(\"Response body does not contain id_token property\", ()=> {\r",
													"    pm.expect(response).to.not.have.property(\"id_token\");\r",
													"});\r",
													"\r",
													"//\r",
													"pm.test(\"Is message as expected\", () => {\r",
													"       pm.expect(response.message).to.eql(\"error.http.400\");\r",
													"  });\r",
													"\r",
													"pm.test(\"Is detail as expected\", () => {\r",
													"       pm.expect(response.detail).to.eql(\"Required request body is missing: public org.springframework.http.ResponseEntity<com.hospitalms.app.web.rest.UserJWTController$JWTToken> com.hospitalms.app.web.rest.UserJWTController.authorize(com.hospitalms.app.web.rest.vm.LoginVM)\");\r",
													"  });\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}api/authenticate",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"authenticate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "jwtToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"console.log(response.id_token);\r",
											"\r",
											"pm.environment.set(\"token_alp\", response.id_token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// verifies response body returns id_token property\r",
											"pm.test(\"Response body has id_token property\", () => {\r",
											"    pm.expect(response).to.have.property(\"id_token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"username_alp\",\"adminAsd\")\r",
											"pm.collectionVariables.set(\"password_alp\",\"123456789\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{password_alp}}\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"{{username_alp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/authenticate",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Physcian Copy",
					"item": [
						{
							"name": "Physcian - Negative Tests",
							"item": [
								{
									"name": "2a6_Physicians_NoAuth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    const response = pm.response.json();\r",
													"\r",
													"\r",
													"//status code validation\r",
													"pm.test(\"Status code is 401 Unauthorized\",  () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/problem+json'\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"// response body status test\r",
													"pm.test(\"Status should be 401\",() => {\r",
													"    pm.expect(response.status).to.eql(401)\r",
													"} );\r",
													"\r",
													"//message validation test\r",
													"pm.test(\"Is message as expected\", () => {\r",
													"       pm.expect(response.message).to.eql(\"error.http.401\");\r",
													"  });\r",
													"\r",
													"//Detail property test\r",
													"pm.test(\"Is detail property as expected\", () => {\r",
													"       pm.expect(response.detail).to.eql(\"Full authentication is required to access this resource\");\r",
													"  });\r",
													"\r",
													"\r",
													"\r",
													"// verifies request doesn't return id_token property\r",
													"pm.test(\"Response body does not contain phsician properties\", ()=> {\r",
													"    pm.expect(response).to.not.have.property(\"id\");\r",
													"    pm.expect(response).to.not.have.property(\"firstName\");\r",
													"    pm.expect(response).to.not.have.property(\"user\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}api/physicians",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"physicians"
											]
										}
									},
									"response": []
								},
								{
									"name": "2a7_SET_InvPAGE_queryParams_for_Physician",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
													"\r",
													"const invalid_Page_Params = \"-1,73,90,x,abc,*,1234567890123456\"; //WRITE YOUR INVALID PAGE PARAMS HERE\r",
													"\r",
													"const inv_pageParams_arr = invalid_Page_Params.split (\",\"); // virgülü ayırıcı olarak kullan\r",
													"\r",
													"pm.variables.set(\"inv_pageParams1\",inv_pageParams_arr) // to call and use params from next request, created a variable\r",
													"\r",
													"console.log(\"Invalid page params ready to use : \" ,pm.variables.get(\"inv_pageParams\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"!!!! - INVALID PAGE PARAMS ARE READY TO USE - !!!!\", ()=> {\r",
													"    pm.expect(pm.variables.get(\"inv_pageParams1\").length).to.be.above(0);\r",
													"}); //COLLECTION RUN VEYA MONITOR YAPILDIGINDA BILDIRIM DUSMESI ICIN\r",
													"\r",
													"pm.test(\"invalid page params \",()=>{\r",
													"    console.log(\"Invalid page params set as \", pm.variables.get(\"inv_pageParams1\"))\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r\n// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}api/physicians?page=1",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"physicians"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "1",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "2a7(M)_InvPAGE_queryParams_for_Physician",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"//!! THIS REQUEST GETS THE DATA FROM \"2a7_SET_INVALID_PAGE_PARAMS_TO_USE\" REQUEST\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req IN THE \"\"2a7_SET_INVALID_PAGE_PARAMS_TO_USE\"\"\r",
													"\r",
													"const inv_pageParams = pm.variables.get(\"inv_pageParams1\")\r",
													"\r",
													"console.log(\"Multi Run Tests starts...Preparing invalid page params to verify...\")\r",
													"console.log(\"invalid page params are : \" , inv_pageParams)\r",
													"\r",
													"pm.variables.set('current_param',inv_pageParams.shift()) // take the first element in array and return it. - arraydeki ilk elementi alır ve bir arraye atar.  'current_param' arrayini sonra cagirarak kullanıyoruz.\r",
													"console.log(\"current_param : \"+ pm.variables.get(\"current_param\"));\r",
													"\r",
													"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
													"if(Array.isArray(inv_pageParams) && inv_pageParams.length > 0){\r",
													"postman.setNextRequest(\"2a7(M)_InvPAGE_queryParams_for_Physician\") // defining next request to run again with different physician IDs - farklı physician IDsi ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
													"} else{\r",
													"postman.setNextRequest(null);   // stop after executing current request -\r",
													"postman.setNextRequest(\"2a8_SET_invSIZE_queryParams_for_Physician\") \r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*\r",
													"// verifies request doesn't return id_token property\r",
													"    const response = pm.response.json();\r",
													"pm.test(\"Response body does not contain id_token property\", ()=> {\r",
													"    pm.expect(response).to.not.have.property(\"id\");\r",
													"    pm.expect(response).to.not.have.property(\"user\");\r",
													"    pm.expect(response).to.not.have.property(\"firstName\");\r",
													"});\r",
													"*/\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code should not be 200\", function () {\r",
													"  pm.response.not.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/problem+json'\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"//property -id- validation test / id field'inin olmadığını test eder.\r",
													"pm.test('Response body should not have -user- property. There should be no response body', () => {\r",
													"    pm.expect(pm.response[0]).to.have.property('user');\r",
													"})\r",
													"\r",
													"// Request URL contains \"page\" query Test - Request URL page query'si içeriyor mu\r",
													"pm.test(\"Page parameter is correctly set in the request URL\", () => {\r",
													"    pm.expect(pm.request.url.query.get(\"page\")).to.exist;\r",
													"});\r",
													"\r",
													"// Page Query parameter sadece sayılardan oluşmalı\r",
													"pm.test (\"Page Query parameter should be digit/number\", ()=>  {\r",
													"  // Page Query parameter'ın sayı olup olmadığını kontrol edelim\r",
													"  pm.expect (isNaN (pm.request.url.query.get(\"page\"))).to.be.false;\r",
													"  //isNaN-> değerin NOT A NUUMBER yani \"sayı Değil\" olup olmadığını kontrol eder. \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}api/physicians?page={{current_param}}",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"physicians"
											],
											"query": [
												{
													"key": "page",
													"value": "{{current_param}}"
												},
												{
													"key": "size",
													"value": "1",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "2a8_SET_invSIZE_queryParams_for_Physician",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
													"\r",
													"let invalid_Size_Params = \"-1,0,21,xbc,(,101,454546564\"; //WRITE YOUR INVALID PAGE PARAMS HERE\r",
													"\r",
													"const inv_sizeParams_arr = invalid_Size_Params.split (\",\"); // virgülü ayırıcı olarak kullan\r",
													"\r",
													"pm.variables.set(\"inv_sizeParams\",inv_sizeParams_arr) // to call and use params from next request, created a variable\r",
													"\r",
													"console.log(\"Invalid size params ready to use : \" , pm.variables.get(\"inv_sizeParams\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
													"\r",
													"pm.test(\"!!!! - INVALID SIZE PARAMS ARE READY TO USE - !!!!\", ()=> {\r",
													"    pm.expect(pm.variables.get(\"inv_sizeParams\").length).to.be.above(0);\r",
													"}); //COLLECTION RUN VEYA MONITOR YAPILDIGINDA BILDIRIM DUSMESI ICIN\r",
													"\r",
													"pm.test(\"Invalid size params \",()=>{\r",
													"    console.log(\"Invalid size params set as \", pm.variables.get(\"inv_sizeParams\"))\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r\n// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}api/physicians?size=-1",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"physicians"
											],
											"query": [
												{
													"key": "size",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "2a8(M)_InvSIZE_queryParams_for_Physician",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"//!! THIS REQUEST GETS THE DATA FROM \"2a7_SET_INVALID_PAGE_PARAMS_TO_USE\" REQUEST\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req IN THE \"\"2a7_SET_INVALID_PAGE_PARAMS_TO_USE\"\"\r",
													"\r",
													"const inv_sizeParams = pm.variables.get(\"inv_sizeParams\")\r",
													"\r",
													"console.log(\"Multi Run Tests starts...Preparing invalid size params to verify...\")\r",
													"console.log(\"invalid size params are : \" , inv_sizeParams)\r",
													"\r",
													"pm.variables.set('current_size',inv_sizeParams.shift()) // take the first element in array and return it. - arraydeki ilk elementi alır ve bir arraye atar.  'current_param' arrayini sonra cagirarak kullanıyoruz.\r",
													"console.log(\"current_size : \"+ pm.variables.get(\"current_size\"));\r",
													"\r",
													"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
													"if(Array.isArray(inv_sizeParams) && inv_sizeParams.length > 0){\r",
													"postman.setNextRequest(\"2a8(M)_InvSIZE_queryParams_for_Physician\") // defining next request to run again with different physician IDs - farklı physician IDsi ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
													"} else{\r",
													"postman.setNextRequest(null);   // stop after executing current request -\r",
													"postman.setNextRequest(\"2c1_SET_InvSPECIALITY_data_for_physician\") \r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"const response = pm.response.json();\r",
													"const physicianIDarr = response.map(physician => physician.id) //create a container/variable for physicians ids\r",
													"\r",
													"// physicianID_length tum id sayısı\r",
													"console.log(\"Number of physician in response body  : \" , physicianIDarr.length)\r",
													"\r",
													"\r",
													"//status code test\r",
													"pm.test('Status code should not be 200 OK', () => {\r",
													"    pm.response.to.not.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response should be empty\", () => {\r",
													"  pm.expect(pm.response.text()).to.be.empty;\r",
													"});\r",
													"\r",
													" // Query parametresinin harf içerip içermediğinine bakalim\r",
													"var isNotNumber = isNaN(pm.request.url.query.get(\"size\"));\r",
													"    // Query parametresinin 0'dan küçük veya eşit olup olmadığını kontrol edelim\r",
													"var isNegative = pm.request.url.query.get(\"size\") <= 0;\r",
													"    // Eğer query parametresi 0'dan küçük veya harf içeriyorsa, status code 400 olmali\r",
													"if (isNotNumber || isNegative) {\r",
													"// Eğer size param 0 dan küçükse ve harf içeriyorsa\r",
													"    pm.test(\"Status code should not be 200 if size query param < 0 or it contain letters.\", () => {\r",
													"        pm.expect(response.to.not.have.status(200));\r",
													"        })\r",
													"    };\r",
													"\r",
													"if (pm.request.url.query.get(\"size\") > 89) {\r",
													"  pm.test(\"If size param is greater than 89, number of physician in response should be 89\", () => {\r",
													"    pm.expect(physicianIDarr.length).to.equal(89);\r",
													"  });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}api/physicians?size={{current_size}}",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"physicians"
											],
											"query": [
												{
													"key": "size",
													"value": "{{current_size}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "2c1_SET_InvSPECIALITY_data_for_physician",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
													"\r",
													"pm.test(\"!!!! - INVALID SPECIALTY DATA ARE READY TO USE - !!!!\", ()=> {\r",
													"    pm.expect(pm.variables.get(\"inv_Speciality\").length).to.be.above(0);\r",
													"}); //COLLECTION RUN VEYA MONITOR YAPILDIGINDA BILDIRIM DUSMESI ICIN\r",
													"\r",
													"pm.test(\"Invalid Speciality Data \",()=>{\r",
													"    console.log(\"Invalid Speciality Data set as \", pm.variables.get(\"inv_Speciality\"))\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
													"\r",
													"const invalid_Speciality = \"OBSTETRIC,, ,surgery,abc,*,123456\"; //WRITE YOUR INVALID PAGE PARAMS HERE\r",
													"\r",
													"const invalid_SpecialityArr = invalid_Speciality.split (\",\"); // virgülü ayırıcı olarak kullan\r",
													"\r",
													"pm.variables.set(\"inv_Speciality\",invalid_SpecialityArr) // to call and use params from next request, created a variable\r",
													"\r",
													"console.log(\"Invalid Speciality Data ready to use : \" ,pm.variables.get(\"inv_Speciality\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"petros.preston@farmoaks.com\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"OPHTHALMOLOGY\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}/api/physicians",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"physicians"
											]
										}
									},
									"response": []
								},
								{
									"name": "2c1(M)_InvSPECIALITY_data_for_physician",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"\r",
													"// status code test\r",
													"pm.test(\"Status code is 400 Bad Request\",  ()=> {\r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has the required fields\", ()=> {\r",
													"    pm.expect(response).to.have.property('type');\r",
													"    pm.expect(response).to.have.property('title');\r",
													"    pm.expect(response).to.have.property('status');\r",
													"    pm.expect(response).to.have.property('detail');\r",
													"    pm.expect(response).to.have.property('path');\r",
													"    pm.expect(response).to.have.property('message');\r",
													"});\r",
													"\r",
													"pm.test('Is the detail in error response body as expected', () => {\r",
													"    pm.expect(response.detail).to.include('Cannot deserialize value of type');\r",
													"})\r",
													"\r",
													"pm.test('Is message as expected', () => {\r",
													"    pm.expect(response.message).to.eql('error.http.400');\r",
													"})\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"//!! THIS REQUEST GETS THE DATA FROM \"2a7_SET_INVALID_PAGE_PARAMS_TO_USE\" REQUEST\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req IN THE \"\"2a7_SET_INVALID_PAGE_PARAMS_TO_USE\"\"\r",
													"\r",
													"const inv_Specialities = pm.variables.get(\"inv_Speciality\")\r",
													"\r",
													"console.log(\"Multi Run Tests starts...Preparing invalid Speciality data to verify...\")\r",
													"console.log(\"invalid Speciality data are : \" , inv_Specialities)\r",
													"\r",
													"pm.variables.set('current_Speciality',inv_Specialities.shift()) // take the first element in array and return it. - arraydeki ilk elementi alır ve bir arraye atar.  'current_param' arrayini sonra cagirarak kullanıyoruz.\r",
													"console.log(\"current_Speciality : \"+ pm.variables.get(\"current_Speciality\"));\r",
													"\r",
													"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
													"if(Array.isArray(inv_Specialities) && inv_Specialities.length > 0){\r",
													"postman.setNextRequest(\"2c1(M)_InvSPECIALITY_data_for_physician\") // defining next request to run again with different speciality - farklı speciality ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
													"} else{\r",
													"postman.setNextRequest(null);   // stop after executing current request -\r",
													"postman.setNextRequest(\"2c2_SET_InvADRESS_data_for_Physician\") \r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"petros.preston@farmoaks.com\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"{{current_Speciality}}\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}/api/physicians",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"physicians"
											]
										}
									},
									"response": []
								},
								{
									"name": "2c2_SET_InvADRESS_data_for_Physician",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID ADRESS DATA\r",
													"// !!!!!!!! YOU CAN SET INVALID ADRESS DATA FROM Pre-Req\r",
													"\r",
													"pm.test(\"!!!! - INVALID ADRESS DATA ARE READY TO USE - !!!!\", ()=> {\r",
													"    pm.expect(pm.variables.get(\"inv_Adress\").length).to.be.above(0);\r",
													"}); //COLLECTION RUN VEYA MONITOR YAPILDIGINDA BILDIRIM DUSMESI ICIN\r",
													"\r",
													"pm.test(\"Invalid Adress Data \",()=>{\r",
													"    console.log(\"Invalid Adress Data set as \", pm.variables.get(\"inv_Adress\"))\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
													"\r",
													"const invalid_Adress = \"123,%%%%++++$$$$$,, \"; //WRITE YOUR INVALID ADRESS PARAMS HERE\r",
													"\r",
													"const invalid_AdressArr = invalid_Adress.split (\",\"); // virgülü ayırıcı olarak kullan\r",
													"\r",
													"pm.variables.set(\"inv_Adress\",invalid_AdressArr) // to call and use params from next request, created a variable\r",
													"\r",
													"console.log(\"Invalid Adress Data ready to use : \" ,pm.variables.get(\"inv_Adress\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"{{inv_Adress}}\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"petros.preston@farmoaks.com\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"SURGERY\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}/api/physicians",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"physicians"
											]
										}
									},
									"response": []
								},
								{
									"name": "2c2(M)_InvADRESS_data_for_Physician",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"// status code test\r",
													"pm.test(\"Status code is 400 Bad Request\",  ()=> {\r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has the required fields\", ()=> {\r",
													"    pm.expect(response).to.have.property('type');\r",
													"    pm.expect(response).to.have.property('title');\r",
													"    pm.expect(response).to.have.property('status');\r",
													"    pm.expect(response).to.have.property('detail');\r",
													"    pm.expect(response).to.have.property('path');\r",
													"    pm.expect(response).to.have.property('message');\r",
													"});\r",
													"\r",
													"/*\r",
													"pm.test('Is the detail in error response body as expected', () => {\r",
													"    pm.expect(response.detail).to.include('Cannot deserialize value of type');\r",
													"})\r",
													"*/\r",
													"\r",
													"pm.test('Is message as expected', () => {\r",
													"    pm.expect(response.message).to.eql('error.http.400');\r",
													"})\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"//!! THIS REQUEST GETS THE DATA FROM PREVIOUS REQUEST\r",
													"// !!!!!!!! YOU CAN SET INVALID ADRESS DATA FROM Pre-Req IN THE PREVIOUS REQ.\r",
													"\r",
													"const inv_AdressArr = pm.variables.get(\"inv_Adress\")\r",
													"\r",
													"console.log(\"Multi Run Tests starts...Preparing invalid Adress data to verify...\")\r",
													"console.log(\"invalid Adress data are : \" , inv_AdressArr)\r",
													"\r",
													"pm.variables.set('current_Adress',inv_AdressArr.shift()) // take the first element in array and return it. - arraydeki ilk elementi alır ve bir arraye atar.  'current_param' arrayini sonra cagirarak kullanıyoruz.\r",
													"console.log(\"current_Adress is : \"+ pm.variables.get(\"current_Adress\"));\r",
													"\r",
													"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
													"if(Array.isArray(inv_AdressArr) && inv_AdressArr.length > 0){\r",
													"postman.setNextRequest(\"2c2(M)_InvADRESS_data_for_Physician\") // defining next request to run again with different adress - farklı adress ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
													"} else{\r",
													"postman.setNextRequest(null);   // stop after executing current request -\r",
													"postman.setNextRequest(\"2c3_SET_invEMAIL_data_for_Physician\") \r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"{{current_Adress}}\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"petros.preston@farmoaks.com\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"SURGERY\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}/api/physicians",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"physicians"
											]
										}
									},
									"response": []
								},
								{
									"name": "2c3_SET_invEMAIL_data_for_Physician",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID EMAIL ADRESS DATA\r",
													"// !!!!!!!! YOU CAN SET INVALID EMAIL ADRESS DATA FROM Pre-Req\r",
													"\r",
													"pm.test(\"!!!! - INVALID EMAIL DATA ARE READY TO USE - !!!!\", ()=> {\r",
													"    pm.expect(pm.variables.get(\"invalid_Emails\").length).to.be.above(0);\r",
													"}); //COLLECTION RUN VEYA MONITOR YAPILDIGINDA BILDIRIM DUSMESI ICIN\r",
													"\r",
													"pm.test(\"Invalid Email Data \",()=>{\r",
													"    console.log(\"Invalid Email Data set as \", pm.variables.get(\"invalid_Emails\"))\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID EMAIL ADRESS DATA\r",
													"// !!!!!!!! YOU CAN SET INVALID EMAIL ADRESS DATA FROM Pre-Req\r",
													"\r",
													"\r",
													"const invalid_Emails = \" ,,asd123@abccom,asd123@,.@abc.c,asd123abc\"; //WRITE YOUR INVALID ADRESS PARAMS HERE\r",
													"\r",
													"const invalid_EmailsArr = invalid_Emails.split (\",\"); // virgülü ayırıcı olarak kullan\r",
													"\r",
													"pm.variables.set(\"invalid_Emails\",invalid_EmailsArr) // to call and use params from next request, created a variable\r",
													"\r",
													"console.log(\"Invalid Email Adress Data ready to use : \" ,pm.variables.get(\"invalid_Emails\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"' '\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"petros.preston@farmoaks.com\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"SURGERY\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}/api/physicians",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"physicians"
											]
										}
									},
									"response": []
								},
								{
									"name": "2c3(M)_InvEMAIL_data_for_Physician",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"console.log(\"kullanılan email datası  \", pm.variables.get(\"current_Email\"))\r",
													"// status code test\r",
													"pm.test(\"Status code is 400 Bad Request --> STATUS CODE TEKLI CALİSTIRIRKEN 200 DONUYOR TOPLU CALISMADA 400 DONUYOR GORUNUYOR!!!!!!!!!!!\",  ()=> {\r",
													"    pm.response.to.have.status(400); \r",
													"    console.log(pm.variables.get(\"current_Email\"))\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has the required fields\", ()=> {\r",
													"    pm.expect(response).to.have.property('type');\r",
													"    pm.expect(response).to.have.property('title');\r",
													"    pm.expect(response).to.have.property('status');\r",
													"    pm.expect(response).to.have.property('detail');\r",
													"    pm.expect(response).to.have.property('path');\r",
													"    pm.expect(response).to.have.property('message');\r",
													"});\r",
													"\r",
													"/*\r",
													"pm.test('Is the detail in error response body as expected', () => {\r",
													"    pm.expect(response.detail).to.include('Cannot deserialize value of type');\r",
													"})\r",
													"*/\r",
													"\r",
													"pm.test('Is message as expected', () => {\r",
													"    pm.expect(response.message).to.eql('error.http.400');\r",
													"})\r",
													"\r",
													"//Response payload email field updated verification test\r",
													"pm.test(\"Response Payload E-Mail field should be same with updated email adress \",()=> {\r",
													"    pm.expect(response.email.toString()).to.equal(pm.variables.get(\"current_Email\"));\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"//!! THIS REQUEST GETS THE DATA FROM PREVIOUS REQUEST\r",
													"// !!!!!!!! YOU CAN SET INVALID ADRESS DATA FROM Pre-Req IN THE PREVIOUS REQ.\r",
													"\r",
													"const invalid_Emails = pm.variables.get(\"invalid_Emails\")\r",
													"\r",
													"console.log(\"Multi Run Tests starts...Preparing invalid Email data to verify...\")\r",
													"console.log(\"invalid Email data are : \" , invalid_Emails)\r",
													"\r",
													"pm.variables.set('current_Email',invalid_Emails.shift()) // take the first element in array and return it. - arraydeki ilk elementi alır ve bir arraye atar.  'current_param' arrayini sonra cagirarak kullanıyoruz.\r",
													"console.log(\"current_Email is : \"+ pm.variables.get(\"current_Email\"));\r",
													"\r",
													"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
													"if(Array.isArray(invalid_Emails) && invalid_Emails.length > 0){\r",
													"postman.setNextRequest(\"2c3(M)_InvEMAIL_data_for_Physician\") // defining next request to run again with different adress - farklı adress ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
													"} else{\r",
													"postman.setNextRequest(null);   // stop after executing current request -\r",
													"postman.setNextRequest(\"2a1_AllPhysicians_NoParams_filteringRandomID\") \r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"' '\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": {{current_Email}},\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"SURGERY\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}/api/physicians",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"physicians"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "2a1_AllPhysicians_NoParams_filteringRandomID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"\r",
											"const physiciansIdList = response.map(physicians => physicians.id) //create a container/variable for physicians ids\r",
											"console.log(\"physiciansIdList = \", physiciansIdList)\r",
											"\r",
											"pm.variables.set(\"physicianID_length\", physiciansIdList.length) //to use in other requests\r",
											"console.log(\"all physician count in DB  : \" , physiciansIdList.length)\r",
											"\r",
											"// Get an active physicians id to update in the next requests(For put request)\r",
											"const activePhysiciansList = response.filter((physicians) => physicians.user.activated === true); // filtering the active physicians\r",
											"console.log(\"active physicians = \", activePhysiciansList)\r",
											"\r",
											"const physician = activePhysiciansList[Math.floor(Math.random()*activePhysiciansList.length)]; // randomly select a physician \r",
											"console.log(\"randomly selected physician =\" , physician)\r",
											"\r",
											"if(physician){ //if physician is true create a collection variable for random selected physician id\r",
											"    pm.collectionVariables.set(\"randomSelected_physicianID_alp\",physician.id)\r",
											"    console.log(\"random selected physician id to be updated later =\", physician.id)\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\",  ()=> {\r",
											"    pm.response.to.have.status(200); //status code validation test\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is 'application/json'\", ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");// Content-Type Test\r",
											"});\r",
											"\r",
											"// Each physician body has id property Test\r",
											"pm.test(\"Each physician body has id property\", ()=> {\r",
											"    pm.expect(response).to.be.an('array'); // validates the response whether an array or not\r",
											"  for (let i = 0; i < response.length; i++) { \r",
											"    pm.expect(response[i]).to.have.property('id'); // validates each physician body has id property\r",
											"  }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response Body has the physicians\", () => {\r",
											"       pm.expect(physiciansIdList.length > 0).to.eql(true); //physician ids validation test / physicians' ids number are more than 0\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//if physician can not be found and we dont have any random id, lets create some test\r",
											"pm.test(\"Active Physicians found and had random id \", () => {\r",
											"    pm.expect(physician).to.be.an(\"object\"); // Is physician an object\r",
											"    pm.expect(physician.user.activated).to.eql(true); // same with next line- \r",
											"    // Is the physician active\r",
											"    pm.expect(physician.user.activated).to.be.true; // Is the physician active\r",
											"    pm.expect(physician).to.have.property('id'); // Does the physician have property id\r",
											"  \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "2a2_physicians_page_size_QueryParams",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const response = pm.response.json();\r",
											"const physicianIdList = response.map(physicians => physicians.id) \r",
											"pm.variables.set(\"physicianIdList_Request1\",physicianIdList); //set a postman variable to use in the next request. We use local variable and it will disappear after the execution. This variable only works in collection runner - sonraki requestte kullanmak için bir local variable tanımla. bu variable request calistiktan sonra görünmez. sadece collection runner / folder runner'da işe yarar.\r",
											"\r",
											"//status code test\r",
											"pm.test(\"Status code is 200\", ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"//size param test for this request - bu request için size testi\r",
											"pm.test(\"Is size param as expected\", () => {\r",
											"       pm.expect(physicianIdList.length).to.eql(pm.variables.get(\"size_param\"));\r",
											"  });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// SET THE page PARAM FROM HERE - page parametresini buradan belirleyin\r",
											"pm.variables.set(\"page_param\",1) \r",
											"\r",
											"// SET THE size PARAM FROM HERE - size parametresini buradan belirleyin\r",
											"pm.variables.set(\"size_param\",10) "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians?page={{page_param}}&size={{size_param}}",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									],
									"query": [
										{
											"key": "page",
											"value": "{{page_param}}"
										},
										{
											"key": "size",
											"value": "{{size_param}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2a3_physicians_page_size_params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const response = pm.response.json();\r",
											"const physicianIdList = response.map(physicians => physicians.id) \r",
											"pm.variables.set(\"physicianIdList_Request2\",physicianIdList); //set a postman variable to use in the next request. We use local variable and it will disappear after the execution. This variable only works in collection runner - sonraki requestte kullanmak için bir local variable tanımla. bu variable request calistiktan sonra görünmez. sadece collection runner / folder runner'da işe yarar.\r",
											"\r",
											"//status code test\r",
											"pm.test(\"Status code is 200\", ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"//size param test for this request - bu request için size testi\r",
											"pm.test(\"Is size param as expected\", () => {\r",
											"       pm.expect(physicianIdList.length).to.eql(pm.variables.get(\"size_param\"));\r",
											"  });\r",
											"\r",
											"//size param test for this request - bu request için size testi\r",
											"pm.test(\"Page param test\", () => {\r",
											"       pm.expect(pm.variables.get(\"physicianIdList_Request1\")).to.not.eql(pm.variables.get(\"physicianIdList_Request2\"));\r",
											"  });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// SET THE page PARAM FROM HERE - page parametresini buradan belirleyin\r",
											"pm.variables.set(\"page_param\",2) \r",
											"\r",
											"// SET THE size PARAM FROM HERE - size parametresini buradan belirleyin\r",
											"pm.variables.set(\"size_param\",20) "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians?page={{page_param}}&size={{size_param}}",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									],
									"query": [
										{
											"key": "page",
											"value": "{{page_param}}"
										},
										{
											"key": "size",
											"value": "{{size_param}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2a4_physicians_sort(asc)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"const physicianIdList = response.map(physicians => physicians.id)// assignning physician ids to a container\r",
											"console.log(\"physicianIdList unordered : \" , physicianIdList)\r",
											"console.log(\"all physician count : \" , physicianIdList)\r",
											"\r",
											"const ascSortedIdList = physicianIdList.sort(function(a, b){return a - b}); //sort physician ids ascending / physician idlerini artan siralama\r",
											"console.log(\"ascending sorted IDs : \",ascSortedIdList)\r",
											"\r",
											"\r",
											"//sort param ascending id test \r",
											"pm.test(\"Page param test\", () => {\r",
											"       pm.expect(physicianIdList).to.eql(ascSortedIdList);\r",
											"       pm.expect(physicianIdList.length).to.eql(ascSortedIdList.length)\r",
											"  });\r",
											"\r",
											"//status code test\r",
											"pm.test(\"Status code is 200\", ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians?sort=id,asc",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									],
									"query": [
										{
											"key": "sort",
											"value": "id,asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2a5_physicians_sort(desc)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"const physicianIdList = response.map(physicians => physicians.id)// assigning physician ids to a container\r",
											"console.log(\"physicianIdList unordered : \" , physicianIdList)\r",
											"\r",
											"const descSortedIdList = physicianIdList.sort(function(a, b){return b - a}); //sort physician ids ascending / physicianidlerini artan siralama\r",
											"console.log(\"descending sorted IDs : \",descSortedIdList)\r",
											"\r",
											"\r",
											"\r",
											"//sort param ascending id test \r",
											"pm.test(\"Page param test\", () => {\r",
											"       pm.expect(physicianIdList).to.eql(descSortedIdList);\r",
											"       pm.expect(physicianIdList.length).to.eql(descSortedIdList.length)\r",
											"  });\r",
											"\r",
											"\r",
											"//status code test\r",
											"pm.test(\"Status code is 200\", ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians?sort=id,desc",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									],
									"query": [
										{
											"key": "sort",
											"value": "id,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2b_EXTRACT_5_ID_from_Physician",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											" // RUN FROM FOLDER or COLLECTION RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIRIN\r",
											"const response = pm.response.json();\r",
											"console.log(\"Extracting the first 5 physician id and assigning to an array\")\r",
											"    // // container for 5 physician id and extracting the first 5 ids - 5 doktor id'si için container ve ilk 5 idleri alma\r",
											"    const idListFiveElements = response.slice(0,5).map(physicians => physicians.id) \r",
											"  \r",
											"  /*\r",
											"    //  OR YOU CAN EXTRACT IDS WITH A LOOP\r",
											"    const idListFiveElements = []; // \r",
											"    for (let i = 0; i < 5; i++) {\r",
											"        idListFiveElements.push(response[i].id); // adding the first 5 id to array - ilk 5 id arraye ekle\r",
											"  }; \r",
											"  */\r",
											"  \r",
											"    console.log(\"idListFiveElements :\" ,idListFiveElements)\r",
											"\r",
											"// creating variable to colleciton to reuse - yeniden kullanım için collection variable olustur\r",
											"pm.variables.set(\"idListFiveElements_alp\",idListFiveElements);  //--a-------\r",
											"\r",
											"pm.test(\"!!!! - 5 PHYSICIAN ID ARE READY TO USE - !!!!!\", ()=> {\r",
											"    pm.expect(pm.variables.get(\"idListFiveElements_alp\").length).to.be.above(0);\r",
											"}); //COLLECTION RUN VEYA MONITOR YAPILDIGINDA BILDIRIM DUSMESI ICIN\r",
											"\r",
											"postman.setNextRequest(\"2b(M)_physicians_Verify_5_IDs_multiRun\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "// RUN FROM FOLDER or COLLECTION RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIRIN",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "2b(M)_physicians_Verify_5_IDs_multiRun",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
											"\r",
											"const physicianIds = pm.variables.get(\"idListFiveElements_alp\") // define an array to get the data - data için array tanımla\r",
											"console.log(\"Multi Run Tests starts... Preparing physician ids to verify...\")\r",
											"console.log(\"Physician IDs are \" , physicianIds)\r",
											"\r",
											"pm.variables.set('current_physicianID_alp',physicianIds.shift()) // take the first element in array and return it. - arraydeki ilk elementi alır ve onu döndürür.\r",
											"console.log(\"current physician ID = \"+pm.variables.get(\"current_physicianID_alp\"));\r",
											"\r",
											"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
											"if(Array.isArray(physicianIds) && physicianIds.length > 0){\r",
											"postman.setNextRequest(\"2b(M)_physicians_Verify_5_IDs_multiRun\") // defining next request to run again with different physician IDs - farklı physician IDsi ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
											"} else{\r",
											"postman.setNextRequest(null);   // stop after executing current request -\r",
											"postman.setNextRequest(\"2c1_Physicians_Speciality\")\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
											"\r",
											"//status code test\r",
											"pm.test('Status code is 200 OK', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//property -user- validation test\r",
											"pm.test('Response body has user property', () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('user');\r",
											"})\r",
											"\r",
											"//id validation test\r",
											"pm.test('Is the id value as expected', () => {\r",
											"    pm.expect(pm.response.json().id).to.eql(pm.variables.get('current_physicianID_alp'));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians/{{current_physicianID_alp}}",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians",
										"{{current_physicianID_alp}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2c1_Physicians_Speciality",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response= pm.response.json()\r",
											"\r",
											"console.log(\"speciality field should be :\" , pm.collectionVariables.get(\"randomSpeciality_alp\"))\r",
											"console.log(\"speciality field in response :\" , response.speciality)\r",
											"\r",
											"// status code test\r",
											"pm.test(\"Status code is 200\",  ()=> {\r",
											"    pm.response.to.have.status(200); //status code validation test\r",
											"});\r",
											"\r",
											"//Content-Type header test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");// Content-Type Test\r",
											"});\r",
											"\r",
											"//Response payload speciality field updated verification test\r",
											"pm.test(\"Response Payload speciality field updated \",()=> {\r",
											"    pm.expect(response.speciality.toString()).to.equal(pm.collectionVariables.get(\"randomSpeciality_alp\"));\r",
											"})\r",
											"\r",
											"// Physician has speciality property/field Test\r",
											"pm.test(\"Physician should have speciality property\", ()=> {\r",
											"      pm.expect(response).to.have.property('speciality'); // validates each physician body has speciality property\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"2c2_Physicians_Address\")\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// Seçilebilen tüm speciality ozellikleri ile bir array oluşturalım\r",
											"var specialities = [\"ALLERGY_IMMUNOLOGY\", \"ANESTHESIOLOGY\", \"DERMATOLOGY\", \"DIAGNOSTIC_RADIOLOGY\", \"EMERGENCY_MEDICINE\", \"FAMILY_MEDICINE\", \"INTERNAL_MEDICINE\", \"MEDICAL_GENETICS\", \"NEUROLOGY\", \"NUCLEAR_MEDICINE\", \"OBSTETRICS_GYNECOLOGY\", \"OPHTHALMOLOGY\", \"PATHOLOGY\", \"PEDIATRICS\", \"PHYSICALMEDICINE_REHABILITATION\", \"PREVENTIVE_MEDICINE\", \"PSYCHIATRY\", \"RADIATION_ONCOLOGY\", \"SURGERY\", \"UROLOGY\"];\r",
											"console.log(\"specialities : \", specialities)\r",
											"\r",
											"\r",
											"// Arrayden rastgele bir index seçelim\r",
											"var randomIndex = Math.floor(Math.random() * specialities.length);\r",
											"\r",
											"// Arrayden rastgele seçilen elemanı alalım\r",
											"var randomSpeciality = specialities[randomIndex];\r",
											"\r",
											"// Rastgele seçilen elemanı bir environment variable'a atayalım\r",
											"pm.collectionVariables.set(\"randomSpeciality_alp\", randomSpeciality);\r",
											"\r",
											"// Sonucu konsola yazdıralım\r",
											"console.log(\"Random selected speciality field data : \" + randomSpeciality);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"petros.preston@farmoaks.com\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"{{randomSpeciality_alp}}\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "2c2_Physicians_Address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response= pm.response.json()\r",
											"\r",
											"console.log(\"Adress field should be :\" , pm.variables.get(\"randomAdress_alp\"))\r",
											"console.log(\"Adress field in response :\" , response.adress)\r",
											"\r",
											"// status code test\r",
											"pm.test(\"Status code is 200\",  ()=> {\r",
											"    pm.response.to.have.status(200); //status code validation test\r",
											"});\r",
											"\r",
											"//Content-Type header test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");// Content-Type Test\r",
											"});\r",
											"\r",
											"//Response payload speciality field updated verification test\r",
											"pm.test(\"Response Payload adress field updated \",()=> {\r",
											"    pm.expect(response.adress.toString()).to.equal(pm.collectionVariables.get(\"randomAdress_alp\"));\r",
											"})\r",
											"\r",
											"// Physician has speciality property/field Test\r",
											"pm.test(\"Physician should have adress property\", ()=> {\r",
											"      pm.expect(response).to.have.property('adress'); // validates each physician body has speciality property\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"2c3_Physicians_Email\")\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// Seçilebilen tüm speciality ozellikleri ile bir array oluşturalım\r",
											"var adresses = [\"İleride Alparslanın eivnin orada\", \"Alparslan'ın evinin ordan solda\", \"Alparslan mah. Alparslan apt. Alparslan:)\", \"Adress Alparslan\", \"Alparslan sehrinde Alparslan Kim:)\" ];\r",
											"console.log(\"adresses : \", adresses)\r",
											"\r",
											"\r",
											"// Arrayden rastgele bir index seçelim\r",
											"var randomIndex = Math.floor(Math.random() * adresses.length);\r",
											"\r",
											"// Arrayden rastgele seçilen elemanı alalım\r",
											"var randomAdress = adresses[randomIndex];\r",
											"\r",
											"// Rastgele seçilen elemanı bir environment variable'a atayalım\r",
											"pm.collectionVariables.set(\"randomAdress_alp\", randomAdress);\r",
											"\r",
											"// Sonucu konsola yazdıralım\r",
											"console.log(\"Random selected Adress field data : \" + randomAdress);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"{{randomAdress_alp}}\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"petros.preston@farmoaks.com\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"{{randomSpeciality_alp}}\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "2c3_Physicians_Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response= pm.response.json()\r",
											"\r",
											"console.log(\"E-mail field should be :\" , pm.collectionVariables.get(\"randomEmail_alp\"))\r",
											"console.log(\"E-mail field in response :\" , response.user.email)\r",
											"\r",
											"// status code test\r",
											"pm.test(\"Status code is 200\",  ()=> {\r",
											"    pm.response.to.have.status(200); //status code validation test\r",
											"});\r",
											"\r",
											"//Content-Type header test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");// Content-Type Test\r",
											"});\r",
											"\r",
											"//Response payload email field updated verification test\r",
											"pm.test(\"Response Payload E-Mail field updated \",()=> {\r",
											"    pm.expect(response.email.toString()).to.equal(pm.collectionVariables.get(\"randomEmail_alp\"));\r",
											"})\r",
											"\r",
											"// Physician has email property/field Test\r",
											"pm.test(\"Physician should have email property\", ()=> {\r",
											"      pm.expect(response.user).to.have.property('email'); // validates each physician body has email property\r",
											"});\r",
											"\r",
											"//id ile physician sorgulatıp ilgili fieldlar değişmişmi kontrol etmek için\r",
											"pm.variables.set(\"updatedID\",response.id)\r",
											"\r",
											"\r",
											"postman.setNextRequest(\"2c4_Physicians_Update_Check\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// 10 tane rastgele email adresi üretelim\r",
											"function generateEmails (num) {\r",
											"  var emails = []; //email için container\r",
											"  \r",
											"  for (var i = 0; i < num; i++) {\r",
											"    var name = Math.random().toString(36).substring(2, 10); //isim yapalim\r",
											"    var domain = Math.random().toString(36).substring(2, 6) + \".com\"; // domain olusturma\r",
											"    var email = \"alp_\" + name + \"@\" + domain; //email son hali\r",
											"    emails.push(email); // arraye ekleme\r",
											"  }\r",
											"  return emails;\r",
											"}\r",
											"\r",
											"var emails = generateEmails(10); //method call and getting 10 email.\r",
											"\r",
											"console.log(emails);\r",
											"\r",
											"\r",
											"// Arrayden rastgele bir index seçelim\r",
											"var randomIndex = Math.floor(Math.random() * emails.length);\r",
											"\r",
											"// Arrayden rastgele seçilen elemanı alalım\r",
											"var ramdomEmail = emails[randomIndex];\r",
											"\r",
											"// Rastgele seçilen elemanı bir environment variable'a atayalım\r",
											"pm.collectionVariables.set(\"randomEmail_alp\", ramdomEmail);\r",
											"\r",
											"// Sonucu konsola yazdıralım\r",
											"console.log(\"Random selected e-mail field data : \" + ramdomEmail);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"{{randomAdress_alp}}\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"{{randomEmail_alp}}\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"{{randomSpeciality_alp}}\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "2c4_Physicians_Update_Check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response= pm.response.json()\r",
											"\r",
											"// status code test\r",
											"pm.test(\"Status code is 200\",  ()=> {\r",
											"    pm.response.to.have.status(200); //status code validation test\r",
											"});\r",
											"\r",
											"//Content-Type header test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");// Content-Type Test\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//Response payload speciality field updated verification test\r",
											"console.log(\"response donen speciality\",response.speciality)\r",
											"console.log(\"random update edilen value\" , pm.collectionVariables.get(\"randomSpeciality_alp\"))\r",
											"\r",
											"pm.test(\"Response Payload speciality field updated \",()=> {\r",
											"    pm.expect(response.speciality.toString()).to.equal(pm.variables.get(\"randomSpeciality_alp\"));\r",
											"});\r",
											"\r",
											"////-----------------------------------------\r",
											"//Response payload adress field updated verification test\r",
											"pm.test(\"Response Payload adress field updated \",()=> {\r",
											"    pm.expect(response.adress.toString()).to.equal(pm.collectionVariables.get(\"randomAdress_alp\"));\r",
											"});\r",
											"\r",
											"//Response payload email field updated verification test\r",
											"pm.test(\"Response Payload E-Mail field updated \",()=> {\r",
											"    pm.expect(response.email.toString()).to.equal(pm.collectionVariables.get(\"randomEmail_alp\"));\r",
											"});\r",
											"\r",
											"//----------------\r",
											"// Physician has email property/field Test\r",
											"pm.test(\"Physician should have id property\", ()=> {\r",
											"      pm.expect(response).to.have.property('id'); // validates each physician body has id property\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"3a1_AllPatients_NoAuth\")\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians/91612",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians",
										"91612"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Patient Copy",
					"item": [
						{
							"name": "Patient - Negative Tests",
							"item": [
								{
									"name": "3a1_AllPatients_NoAuth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"//status code 200 olmalı",
													"pm.test(\"Response status code is 40 Unauthorized\", () => {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"// Content-Type Test",
													"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");",
													"});",
													"",
													"//status code validation",
													"pm.test(\"Status code is 401 Unauthorized\",  () => {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"//Error message validation",
													"pm.test(\"Is message as expected\", () => {",
													"       pm.expect(response.message).to.eql(\"error.http.401\");",
													"  });",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}/api/patients",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"patients"
											]
										}
									},
									"response": []
								},
								{
									"name": "3a1_SET_InvPAGE_query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
													"\r",
													"const invalid_Page_Params = \"-1,73,90,x,abc,*,1234567890123456\"; //WRITE YOUR INVALID PAGE PARAMS HERE\r",
													"\r",
													"const inv_pageParams_arr = invalid_Page_Params.split (\",\"); // virgülü ayırıcı olarak kullan\r",
													"\r",
													"pm.variables.set(\"inv_pageParams\",inv_pageParams_arr) // to call and use params from next request, created a variable\r",
													"\r",
													"console.log(\"Invalid page params ready to use : \" ,pm.variables.get(\"inv_pageParams\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(\"!!!! - INVALID SIZE PARAMS ARE READY TO USE - !!!!\", ()=> {\r",
													"    pm.expect(pm.variables.get(\"inv_pageParams\").length).to.be.above(0);\r",
													"}); //COLLECTION RUN VEYA MONITOR YAPILDIGINDA BILDIRIM DUSMESI ICIN\r",
													"\r",
													"pm.test(\"invalid page params exist\",()=>{\r",
													"    console.log(\"Invalid page params set as \", pm.variables.get(\"inv_pageParams\"))\r",
													"})\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}/api/patients?page=-1",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"patients"
											],
											"query": [
												{
													"key": "page",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3a1(M)_InvPAGE_query_for_patients",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"//!! THIS REQUEST GETS THE DATA FROM \"2a7_SET_INVALID_PAGE_PARAMS_TO_USE\" REQUEST\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req IN THE \"\"2a7_SET_INVALID_PAGE_PARAMS_TO_USE\"\"\r",
													"\r",
													"const inv_pageParams = pm.variables.get(\"inv_pageParams\")\r",
													"\r",
													"console.log(\"Multi Run Tests starts...Preparing invalid PAGE params to verify...\")\r",
													"console.log(\"invalid size params are : \" , inv_pageParams)\r",
													"\r",
													"pm.variables.set('current_page_param',inv_pageParams.shift()) // take the first element in array and return it. - arraydeki ilk elementi alır ve bir arraye atar.  'current_param' arrayini sonra cagirarak kullanıyoruz.\r",
													"console.log(\"current_page_param : \"+ pm.variables.get(\"current_page_param\"));\r",
													"\r",
													"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
													"if(Array.isArray(inv_pageParams) && inv_pageParams.length > 0){\r",
													"postman.setNextRequest(\"3a1(M)_InvPAGE_query_for_patients\") // defining next request to run again with different physician IDs - farklı physician IDsi ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
													"} else{\r",
													"postman.setNextRequest(null);   // stop after executing current request -\r",
													"postman.setNextRequest(\"3a2_SET_InvSIZE_query_for_patients\") \r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"const response = pm.response.json();\r",
													"const patientsIdList = response.map(patients => patients.id) //create a container/variable for patients ids\r",
													"\r",
													"// physicianID_length tum id sayısı\r",
													"console.log(\"Number of patients in response body  : \" , patientsIdList.length)\r",
													"//status code test\r",
													"pm.test('Status code should not be 200 OK', () => {\r",
													"    pm.response.to.not.have.status(200);\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response is empty\", () => {\r",
													"  pm.expect(pm.response.text()).to.be.empty;\r",
													"});\r",
													"\r",
													"// Request URL contains \"page\" query Test - Request URL page query'si içeriyor mu\r",
													"pm.test(\"Page parameter is correctly set in the request URL\", () => {\r",
													"    pm.expect(pm.request.url.query.get(\"page\")).to.exist;\r",
													"});\r",
													"\r",
													" // Query parametresinin harf içerip içermediğinine bakalim\r",
													"    var isNotNumber = isNaN(pm.request.url.query.get(\"page\"));\r",
													"    // Query parametresinin 0'dan küçük olup olmadığını kontrol edelim\r",
													"    var isNegative = pm.request.url.query.get(\"page\") < 0;\r",
													"    // Eğer query parametresi 0'dan küçük veya harf içeriyorsa, status code 400 olmali\r",
													"    if (isNotNumber || isNegative) {\r",
													"    // Eğer size param 0 dan küçükse ve harf içeriyorsa\r",
													"    pm.test(\"Status code should not be 200 if size query param < 0 or it contain strings.\", () => {\r",
													"        pm.expect(response.to.not.have.status(200));\r",
													"        })\r",
													"    };\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}/api/patients?page={{current_page_param}}",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"patients"
											],
											"query": [
												{
													"key": "page",
													"value": "{{current_page_param}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3a2_SET_InvSIZE_query_for_patients",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
													"\r",
													"//max hasta sayısı 1712\r",
													"let invalid_Size_Params = \"-1,0,xbc,+\"; //WRITE YOUR INVALID SIZE PARAMS HERE\r",
													"\r",
													"const inv_sizeParams_arr = invalid_Size_Params.split (\",\"); // virgülü ayırıcı olarak kullan\r",
													"\r",
													"pm.variables.set(\"inv_sizeParams\",inv_sizeParams_arr) // to call and use params from next request, created a variable\r",
													"\r",
													"console.log(\"Invalid size params ready to use : \" , pm.variables.get(\"inv_sizeParams\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
													"\r",
													"pm.test(\"!!!! - INVALID SIZE PARAMS ARE READY TO USE - !!!!\", ()=> {\r",
													"    pm.expect(pm.variables.get(\"inv_sizeParams\").length).to.be.above(0);\r",
													"}); //COLLECTION RUN VEYA MONITOR YAPILDIGINDA BILDIRIM DUSMESI ICIN\r",
													"\r",
													"pm.test(\"Invalid size params\",()=>{\r",
													"    console.log(\"Invalid size params set as \", pm.variables.get(\"inv_sizeParams\"))\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}/api/patients?size=abv",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"patients"
											],
											"query": [
												{
													"key": "size",
													"value": "abv"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3a2(M)_InvSIZE_query_for_patients",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"//!! THIS REQUEST GETS THE DATA FROM PREVIOUS REQUEST\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req IN THE \"\"2a7_SET_INVALID_PAGE_PARAMS_TO_USE\"\"\r",
													"\r",
													"const inv_sizeParams = pm.variables.get(\"inv_sizeParams\")\r",
													"\r",
													"console.log(\"Multi Run Tests starts...Preparing invalid SİZE params to verify...\")\r",
													"console.log(\"invalid size params are : \" , inv_sizeParams)\r",
													"\r",
													"pm.variables.set('current_size_param',inv_sizeParams.shift()) // take the first element in array and return it. - arraydeki ilk elementi alır ve bir arraye atar.  'current_param' arrayini sonra cagirarak kullanıyoruz.\r",
													"console.log(\"current_size_param : \"+ pm.variables.get(\"current_size_param\"));\r",
													"\r",
													"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
													"if(Array.isArray(inv_sizeParams) && inv_sizeParams.length > 0){\r",
													"postman.setNextRequest(\"3a2(M)_InvSIZE_query_for_patients\") // defining next request to run again with different physician IDs - farklı physician IDsi ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
													"} else{\r",
													"postman.setNextRequest(null);   // stop after executing current request -\r",
													"postman.setNextRequest(\"3a2_InvSIZE_query_for_patients\") \r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"const response = pm.response.json();\r",
													"const patientsIDlist = response.map(patients => patients.id) //create a container/variable for physicians ids\r",
													"\r",
													"// physicianID_length tum id sayısı\r",
													"console.log(\"Number of patients in response body  : \" , patientsIDlist.length)\r",
													"\r",
													"/*\r",
													"//status code test\r",
													"pm.test('Status code should not be 200 OK', () => {\r",
													"    pm.response.to.not.have.status(200);\r",
													"});\r",
													"*/\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response should be empty\", () => {\r",
													"  pm.expect(pm.response.text()).to.be.empty;\r",
													"});\r",
													"\r",
													"//the count of patients should be same with query parameter value\r",
													"pm.test(\"Number of patients should be same with query parameter value\", () => {\r",
													"    console.log(\"Value of size query parameter\", pm.request.url.query.get(\"size\"))\r",
													"    pm.expect(pm.variables.get(\"current_size_param\")).to.eql(physiciansIdList.length);\r",
													"});\r",
													"\r",
													" // Query parametresinin harf içerip içermediğinine bakalim\r",
													"var isNotNumber = isNaN(pm.request.url.query.get(\"size\"));\r",
													"    // Query parametresinin 0'dan küçük veya eşit olup olmadığını kontrol edelim\r",
													"var isNegative = pm.request.url.query.get(\"size\") <= 0;\r",
													"    // Eğer query parametresi 0'dan küçük veya harf içeriyorsa, status code 400 olmali\r",
													"if (isNotNumber || isNegative) {\r",
													"// Eğer size param 0 dan küçükse ve harf içeriyorsa\r",
													"    pm.test(\"Status code should not be 200 if size query param < 0 or it contain letters.\", () => {\r",
													"        pm.expect(response.to.not.have.status(200));\r",
													"        })\r",
													"    };\r",
													"\r",
													"if (pm.request.url.query.get(\"size\") > 1712) {\r",
													"  pm.test(\"If size param is greater than 1712, number of patients in response should be 1712\", () => {\r",
													"    pm.expect(physiciansIdList.length).to.equal(1712);\r",
													"  });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}/api/patients?size={{current_size_param}}",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"patients"
											],
											"query": [
												{
													"key": "size",
													"value": "{{current_size_param}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3a2_InvSIZE_query_for_patients",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"pm.variables.set(\"current_size_param\",12345678910)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"const response = pm.response.json();\r",
													"const patientsIDlist = response.map(patients => patients.id) //create a container/variable for physicians ids\r",
													"\r",
													"// physicianID_length tum id sayısı\r",
													"console.log(\"Number of patients in response body  : \" , patientsIDlist.length)\r",
													"console.log(\"Query parameter is :\" ,pm.variables.get(\"current_size_param\"))\r",
													"//status code test\r",
													"pm.test('Status code should not be 200 OK', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response should not be empty\", () => {\r",
													"  pm.expect(pm.response.text()).to.not.be.empty;\r",
													"});\r",
													"\r",
													"if (pm.request.url.query.get(\"size\") < 1712) {\r",
													"//the count of patients should be same with query parameter value\r",
													"pm.test(\"Number of patients should be same with query parameter value\", () => {\r",
													"    console.log(\"Value of size query parameter\", pm.request.url.query.get(\"size\"))\r",
													"    pm.expect(pm.variables.get(\"current_size_param\")).to.eql(physiciansIdList.length);\r",
													"})\r",
													"};\r",
													"\r",
													" // Query parametresinin harf içerip içermediğinine bakalim\r",
													"var isNotNumber = isNaN(pm.request.url.query.get(\"size\"));\r",
													"    // Query parametresinin 0'dan küçük olup olmadığını kontrol edelim\r",
													"var isNegative = pm.request.url.query.get(\"size\") < 0;\r",
													"    // Eğer query parametresi 0'dan küçük veya harf içeriyorsa, status code 400 olmali\r",
													"if (isNotNumber || isNegative) {\r",
													"// Eğer size param 0 dan küçükse ve harf içeriyorsa\r",
													"    pm.test(\"Status code should not be 200 if size query param < 0 or it contain letters.\", () => {\r",
													"        pm.expect(response.to.not.have.status(200));\r",
													"        })\r",
													"    };\r",
													"\r",
													"if (pm.request.url.query.get(\"size\") > 1712) {\r",
													"  pm.test(\"If size param is greater than 1712, number of patients in response should be 1712\", () => {\r",
													"    pm.expect(physiciansIdList.length).to.equal(1712);\r",
													"  });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}/api/patients?size={{current_size_param}}",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"patients"
											],
											"query": [
												{
													"key": "size",
													"value": "{{current_size_param}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3a4_InvSORT_query_for_patients",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"//status code test\r",
													"pm.test(\"Response status code is 500\", ()=> {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"//Response body properties check\r",
													"pm.test(\"Response body has -type-, -title-, -status-, -detail-, -path-, -message- properties\", function () {\r",
													"    pm.expect(response).to.be.an('object').that.has.all.keys('type', 'title', 'status', 'detail', 'path', 'message');\r",
													"});\r",
													"\r",
													"//Error message validation\r",
													"pm.test(\"Is message as expected\", () => {\r",
													"       pm.expect(response.message).to.eql(\"error.http.500\");\r",
													"  });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}/api/patients?sort=idi,ASC",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"patients"
											],
											"query": [
												{
													"key": "sort",
													"value": "idi,ASC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3b2_InvDATES_query_for_DateFiltering",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test('Response status code is 400 Bad Request', () => {",
													"    pm.response.to.have.status(400);",
													"})",
													"",
													"// Content-Type Test",
													"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");",
													"});",
													"",
													"pm.test(\"Response has the required fields\", ()=> {",
													"    pm.expect(response).to.have.property('type');",
													"    pm.expect(response).to.have.property('title');",
													"    pm.expect(response).to.have.property('status');",
													"    pm.expect(response).to.have.property('detail');",
													"    pm.expect(response).to.have.property('path');",
													"    pm.expect(response).to.have.property('message');",
													"});",
													"",
													"pm.test('Is the detail in error response body as expected', () => {",
													"    pm.expect(response.detail).to.include('Required LocalDate parameter');",
													"})",
													"",
													"pm.test('Is message as expected', () => {",
													"    pm.expect(response.message).to.eql('error.http.400');",
													"})",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}/api/in-patients/bydate?startDate=2024-03-01&endDate=2024-03-30",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"in-patients",
												"bydate"
											],
											"query": [
												{
													"key": "startDate",
													"value": "2024-03-01"
												},
												{
													"key": "endDate",
													"value": "2024-03-30"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "3a1_AllPatients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const patientsList = response.map(patients => patients.id) ",
											"console.log(\"patients sayısı\", patientsList.length)",
											"",
											"//status code 200 olmalı",
											"pm.test(\"Response status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Content-Type header test",
											"pm.test(\"Content-Type header is 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");// Content-Type Test",
											"});",
											"",
											"// Hastaların firstname, lastname,id ve phone bilgileri olmalı",
											"pm.test(\"Each patient object has non-empty -firstName-, -lastName-, -id- and -phone- fields\", () => {",
											"    pm.expect(response).to.be.an('array').that.is.not.empty;",
											"    response.forEach((patient)=> {",
											"        pm.expect(patient.firstName).to.exist.and.to.have.lengthOf.at.least(1, \"Firstname Value should not be empty\");",
											"        pm.expect(patient.lastName).to.exist.and.to.have.lengthOf.at.least(1, \"Lastname Value should not be empty\");",
											"        pm.expect(patient.id.toString()).to.exist.and.to.have.lengthOf.at.least(1, \"Id Value should not be empty\");",
											"        pm.expect(patient.phone).to.exist.and.to.have.lengthOf.at.least(1, \"Phone Value should not be empty\");",
											"    });",
											"});",
											"",
											"// patients listesi 0dan büyük olmalı ki hastaların listelendiğini doğrulayalım",
											"pm.test(\"Patients should be listed\", ()=> {",
											"    pm.expect(patientsList.length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/patients",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "3a1_Patients_page_query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Arrayden rastgele bir index seçelim\r",
											"var randomPageNUmber = Math.floor(Math.random() * 100+1);\r",
											"pm.variables.set(\"query_page_number\",randomPageNUmber)\r",
											"console.log(\"random number for page query\",pm.variables.get(\"query_page_number\") )"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response= pm.response.json()\r",
											"\r",
											"const patientsList = response.map(patients => patients.id)\r",
											"\r",
											"\r",
											"//verify successfull response\r",
											"pm.test(\"successfull HTTP status code\",()=>{\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"//Content-Type header test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");// Content-Type Test\r",
											"});\r",
											"\r",
											"// patients listesi 0dan büyük olmalı ki hastaların listelendiğini doğrulayalım\r",
											"pm.test(\"Patients should be listed\", ()=> {\r",
											"    pm.expect(patientsList.length).to.be.above(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/patients?page={{query_page_number}}",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"patients"
									],
									"query": [
										{
											"key": "page",
											"value": "{{query_page_number}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3a2_Patients_size_query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"first_Patients_id_in_page_five\",11607)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Arrayden rastgele bir index seçelim\r",
											"var randomSizeNumber = Math.floor(Math.random() * 5+1);\r",
											"pm.variables.set(\"query_size_number\",randomSizeNumber)\r",
											"console.log(\"random number for size query\",pm.variables.get(\"query_size_number\") )"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response= pm.response.json()\r",
											"\r",
											"const patientsList = response.map(patients => patients.id)\r",
											"\r",
											"//verify successfull response\r",
											"pm.test(\"successfull HTTP status code\",()=>{\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"//Content-Type header test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");// Content-Type Test\r",
											"});\r",
											"\r",
											"// listelenen patients sayısı query size ile aynı olmaalı\r",
											"pm.test(\"Patients should be listed and has same lenght with size query\", ()=> {\r",
											"    pm.expect(patientsList.length).to.be.eql(pm.variables.get(\"query_size_number\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/patients?size={{query_size_number}}",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"patients"
									],
									"query": [
										{
											"key": "size",
											"value": "{{query_size_number}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3a3_patients_sort(asc)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"const patientsIDList = response.map(patients => patients.id)// assignning physician ids to a container\r",
											"console.log(\"patientsIDList unordered : \" , patientsIDList)\r",
											"console.log(\"all patients count : \" , patientsIDList.length)\r",
											"\r",
											"const ascSortedIdList = patientsIDList.sort(function(a, b){return a - b}); //sort physician ids ascending / physician idlerini artan siralama\r",
											"console.log(\"ascending sorted IDs : \",ascSortedIdList)\r",
											"\r",
											"\r",
											"//asc param ascending id test \r",
											"pm.test(\"asc param test\", () => {\r",
											"       pm.expect(patientsIDList).to.eql(ascSortedIdList);\r",
											"       pm.expect(patientsIDList.length).to.eql(ascSortedIdList.length)\r",
											"  });\r",
											"\r",
											"//status code test\r",
											"pm.test(\"Status code is 200\", ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/patients?sort=id,asc",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"patients"
									],
									"query": [
										{
											"key": "sort",
											"value": "id,asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3a4_patients_sort(desc)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"const patientsIdList = response.map(patients => patients.id)// assigning physician ids to a container\r",
											"console.log(\"patientsIdList unordered : \" , patientsIdList)\r",
											"\r",
											"const descSortedIdList = patientsIdList.sort(function(a, b){return b - a}); //sort patients ids ascending / patients idlerini artan siralama\r",
											"console.log(\"descending sorted IDs : \",descSortedIdList)\r",
											"\r",
											"\r",
											"\r",
											"//sort param ascending id test \r",
											"pm.test(\"Sort param test\", () => {\r",
											"       pm.expect(patientsIdList).to.eql(descSortedIdList);\r",
											"       pm.expect(patientsIdList.length).to.eql(descSortedIdList.length)\r",
											"  });\r",
											"\r",
											"\r",
											"//status code test\r",
											"pm.test(\"Status code is 200\", ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/patients?sort=id,desc",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"patients"
									],
									"query": [
										{
											"key": "sort",
											"value": "id,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3b1_Patients_DateFiltering_futureDates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status Code Test",
											"pm.test(\"Response status code is 200\", ()=> {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"// response body bos oldugunu test et",
											"pm.test(\"Response body is  empty\",  ()=> {",
											"    pm.expect(response).to.be.empty;",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/in-patients/bydate?fromDate=2024-08-20&toDate=2024-09-25",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"in-patients",
										"bydate"
									],
									"query": [
										{
											"key": "fromDate",
											"value": "2024-08-20"
										},
										{
											"key": "toDate",
											"value": "2024-09-25"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3b2_Patients_DateFiltering_DatesPassed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const response = pm.response.json();",
											"const patientsIdList = response.map(patients => patients.id)// assigning patients ids to a container",
											"",
											"// Status Code Test",
											"pm.test(\"Response status code is 200\", ()=> {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"// response body bos oldugunu test et",
											"pm.test(\"Response body should not be empty\",  ()=> {",
											"    pm.expect(response).to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id, startDate, status, appointment, patient\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach((patients)=> {",
											"        pm.expect(patients).to.have.property('id');",
											"        pm.expect(patients).to.have.property('startDate');",
											"        pm.expect(patients).to.have.property('status');",
											"        pm.expect(patients).to.have.property('appointment');",
											"        pm.expect(patients).to.have.property('patient');",
											"    });",
											"});",
											"",
											"",
											"// patients listesi 0dan büyük olmalı ki hastaların listelendiğini doğrulayalım",
											"pm.test(\"Patients should be listed\", ()=> {",
											"    pm.expect(patientsIdList.length).to.be.above(0);",
											"});",
											"",
											"postman.setNextRequest(\"getAllAppointments_Negatif\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/in-patients/bydate?fromDate=2023-03-01&toDate=2023-03-30",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"in-patients",
										"bydate"
									],
									"query": [
										{
											"key": "fromDate",
											"value": "2023-03-01"
										},
										{
											"key": "toDate",
											"value": "2023-03-30"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Appointment Copy",
					"item": [
						{
							"name": "Appointment-Negatif",
							"item": [
								{
									"name": "getAllAppointments_Negatif",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"invalidAppo_Id\",\"abc123\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}api/appointments/{{invalidAppo_Id}}",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"appointments",
												"{{invalidAppo_Id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "getAppointmentsID_Negatif",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 401', function () {\r",
													"    pm.expect(pm.response.code).to.equal(401);\r",
													"})\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Full authentication is required to access this resource\");\r",
													"});\r",
													"\r",
													"pm.test('Response Content-Type is application/problem+json', function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/problem+json');\r",
													"})\r",
													"\r",
													"pm.test('Response has the required fields', function () {\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('type');\r",
													"    pm.expect(responseData).to.have.property('title');\r",
													"    pm.expect(responseData).to.have.property('status');\r",
													"    pm.expect(responseData).to.have.property('detail');\r",
													"    pm.expect(responseData).to.have.property('path');\r",
													"    pm.expect(responseData).to.have.property('message');\r",
													"})\r",
													"\r",
													"pm.test('Status is a non-negative integer', function () {\r",
													"    pm.expect(responseData.status).to.be.a('number');\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}api/appointments",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"appointments"
											]
										}
									},
									"response": []
								},
								{
									"name": "SET_AppoıintmentID_params",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
													"\r",
													"let invalid_AppID = \"abc123,  ,&%+, \"; //WRITE YOUR INVALID PAGE PARAMS HERE\r",
													"\r",
													"const invalid_AppID_arr = invalid_AppID.split (\",\"); // virgülü ayırıcı olarak kullan\r",
													"\r",
													"pm.variables.set(\"invalid_appointmentID\",invalid_AppID_arr) // to call and use params from next request, created a variable\r",
													"\r",
													"console.log(\"Invalid appointment ID ready to use : \" , pm.variables.get(\"invalid_appointmentID\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID APPOINTMENT ID\r",
													"// !!!!!!!! YOU CAN SET INVALID APPOINTMENT ID FROM Pre-Req\r",
													"\r",
													"pm.test(\"!!!! - INVALID SIZE PARAMS ARE READY TO USE - !!!!\", ()=> {\r",
													"    pm.expect(pm.variables.get(\"invalid_appointmentID\").length).to.be.above(0);\r",
													"}); //COLLECTION RUN VEYA MONITOR YAPILDIGINDA BILDIRIM DUSMESI ICIN\r",
													"\r",
													"pm.test(\"Invalid appointment IDs  \",()=>{\r",
													"    console.log(\"Invalid appointment IDs set as \", pm.variables.get(\"invalid_appointmentID\"))\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r\n// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}api/appointments/",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"appointments",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "(M)_AppointmentID_Negative",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"//!! THIS REQUEST GETS THE DATA FROM PREVIOUS REQUEST\r",
													"// !!!!!!!! YOU CAN SET INVALID APPOINTMENT ID FROM Pre-Req IN THE PREVIOUS REQUEST\r",
													"\r",
													"const inv_appointmentIDs = pm.variables.get(\"invalid_appointmentID\")\r",
													"\r",
													"console.log(\"Multi Run Tests starts...Preparing invalid appointment IDs to verify...\")\r",
													"console.log(\"invalid invalid appointment IDs are : \" , inv_appointmentIDs)\r",
													"\r",
													"pm.variables.set('current_AppointmentID',inv_appointmentIDs.shift()) // take the first element in array and return it. - arraydeki ilk elementi alır ve bir arraye atar.  'current_param' arrayini sonra cagirarak kullanıyoruz.\r",
													"console.log(\"current_AppointmentID : \"+ pm.variables.get(\"current_AppointmentID\"));\r",
													"\r",
													"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
													"if(Array.isArray(inv_appointmentIDs) && inv_appointmentIDs.length > 0){\r",
													"postman.setNextRequest(\"(M)_AppointmentID_Negative\") // defining next request to run again with different physician IDs - farklı physician IDsi ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
													"} else{\r",
													"postman.setNextRequest(null);   // stop after executing current request -\r",
													"postman.setNextRequest(\"AppointmentID_Negative1\") \r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is not 200 OK',  ()=> {\r",
													"    pm.expect(pm.response.code).to.not.equal(200);\r",
													"})\r",
													"\r",
													"pm.test('Response Content-Type is application/json', function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.not.include('application/json');\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}api/appointments/{{current_AppointmentID}}",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"appointments",
												"{{current_AppointmentID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "AppointmentID_Negative1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"inv_appointmentID\", 22544555668854)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();\r",
													"\r",
													"pm.test('Status code is  404 Not Found',  ()=> {\r",
													"    pm.expect(pm.response.code).to.equal(404);\r",
													"})\r",
													"\r",
													"pm.test('Response Content-Type is application/problem+json',  ()=> {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/problem+json');\r",
													"})\r",
													"\r",
													"pm.test('Response has the required fields', function () {\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('type');\r",
													"    pm.expect(responseData).to.have.property('title');\r",
													"    pm.expect(responseData).to.have.property('status');\r",
													"    pm.expect(responseData).to.have.property('detail');\r",
													"    pm.expect(responseData).to.have.property('path');\r",
													"    pm.expect(responseData).to.have.property('message');\r",
													"})\r",
													"\r",
													"pm.test('Status is a non-negative integer', function () {\r",
													"    pm.expect(responseData.status).to.be.a('number');\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}api/appointments/{{inv_appointmentID}}",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"appointments",
												"{{inv_appointmentID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "AppointmentID_Negative2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"inv_appointmentID\",'.')"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();\r",
													"\r",
													"pm.test('Status code is not 200 OK',  ()=> {\r",
													"    pm.expect(pm.response.code).to.not.equal(200);\r",
													"})\r",
													"\r",
													"pm.test('Response Content-Type is application/problem+json',  ()=> {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/problem+json');\r",
													"})\r",
													"\r",
													"pm.test('Response has the required fields', function () {\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('type');\r",
													"    pm.expect(responseData).to.have.property('title');\r",
													"    pm.expect(responseData).to.have.property('status');\r",
													"    pm.expect(responseData).to.have.property('detail');\r",
													"    pm.expect(responseData).to.have.property('path');\r",
													"    pm.expect(responseData).to.have.property('message');\r",
													"})\r",
													"\r",
													"pm.test('Status is a non-negative integer', function () {\r",
													"    pm.expect(responseData.status).to.be.a('number');\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}api/appointments/{{inv_appointmentID}}",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"appointments",
												"{{inv_appointmentID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "getAllAppointments_Positive",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"const appointments = response.map(appointment => appointment.id);",
											"",
											"var appointmentsFirst = appointments[0];",
											"",
											"pm.collectionVariables.set('ali_appointment_id', appointmentsFirst)",
											"",
											"pm.test('Successful response: ', () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test('Content-Type header is \\'application/json\\'', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"})",
											"",
											"pm.test('Response contains an array of appointments', function () {",
											"    pm.expect(response).to.be.an('array');",
											"})",
											"",
											"pm.test('Patient\\'s email is in a valid email format', function () {",
											"    response.forEach(function (appointment) {",
											"        pm.expect(appointment.patient.email).to.match(/\\S+@\\S+\\.\\S+/);",
											"    });",
											"})",
											"",
											"pm.test('Number of appointments created matches the length of the appointments array', function () {",
											"    pm.expect(response.length).to.equal(response.filter(appointment => appointment.id !== 0).length);",
											"})",
											"",
											"pm.test(\"First appointment ID matches the response\", function () {",
											"    pm.expect(appointmentsFirst).to.equal(response[0].id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/appointments",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"appointments"
									]
								}
							},
							"response": []
						},
						{
							"name": "getAppointmentsID_Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//collectionVarien id response daki ıd ile eşit mi?\r",
											"pm.test(\"in collectionVariables ID equal to responseId\", function (){\r",
											"    pm.expect(pm.collectionVariables.get(\"ali_appointment_id\")).to.eql(responseJson.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/appointments/{{ali_appointment_id}}",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"appointments",
										"{{ali_appointment_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Rooms Copy",
					"item": [
						{
							"name": "GetAllRooms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"console.log(response.id_token);",
											"pm.environment.set(\"token_goksel\", response.id_token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    ",
											"    responseData.forEach(function(room) {",
											"        pm.expect(room).to.include.all.keys('createdBy', 'createdDate', 'id', 'roomNumber', 'roomType', 'status', 'price', 'description');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"RoomNumber is a positive integer\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(room) {",
											"        pm.expect(room.roomNumber).to.be.a('number').and.to.be.above(0);",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Price is a non-negative number\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    responseData.forEach(function(room) {",
											"        pm.expect(room.price).to.be.a('number');",
											"        pm.expect(room.price).to.be.at.least(0);",
											"    });",
											"});",
											"",
											"pm.test(\"Status is a boolean value\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    responseData.forEach(function(room) {",
											"        pm.expect(room.status).to.be.a('boolean');",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Running token generation\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/rooms",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"rooms"
									]
								}
							},
							"response": []
						},
						{
							"name": "PostRooms_Get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"console.log(response.id_token);\r",
											"pm.environment.set(\"token_goksel\", response.id_token);\r",
											"pm.collectionVariables.set(\"roomID_goksel\", response.id);\r",
											"\r",
											"\r",
											"pm.test(\"assertion statuscode succesfully\",function(){\r",
											"var statusCode=pm.response.code;\r",
											"pm.expect(statusCode).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"RoomNumber is a positive integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.roomNumber).to.be.a('number').and.to.be.above(0, \"RoomNumber should be a positive integer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Price is a non-negative number\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.price).to.be.a('number');\r",
											"    pm.expect(responseData.price).to.be.at.least(0, \"Price should be a non-negative number\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Description is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept-Charset",
										"value": "*/*",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"createdBy\": \"goksel\",\r\n  \"createdDate\": \"2024-02-17T13:45:51.902Z\",\r\n  \"description\": \"gokselin odasi\",\r\n  \"price\": 1459,\r\n  \"roomNumber\": {{$randomInt}},\r\n  \"roomType\": \"TWIN\",\r\n  \"status\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/rooms",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"rooms"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetRooms",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"console.log(\"Running token generation\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"console.log(response.id_token);",
											"pm.environment.set(\"token_goksel\", response.id_token);",
											"pm.variables.set(\"roomID_goksel\", response.id);",
											"",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"fail response body:\",function(){",
											"    var jsonData=pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"createdBy\");",
											"    pm.expect(jsonData).to.have.property(\"createdDate\");",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"roomNumber\");",
											"    pm.expect(jsonData).to.have.property(\"roomType\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"    pm.expect(jsonData).to.have.property(\"price\");",
											"    pm.expect(jsonData).to.have.property(\"description\");",
											"",
											"})",
											"pm.test(\"ASSERTİON body:\",function(){",
											"    var jsonData=pm.response.json();",
											"    pm.expect(jsonData.roomType).to.have.eq(\"TWIN\");",
											"    pm.expect(jsonData.status).to.have.eq(true)",
											"})",
											"//",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/rooms/{{roomID_goksel}}",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"rooms",
										"{{roomID_goksel}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PostRooms_Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"console.log(response.id_token);\r",
											"pm.environment.set(\"token_goksel\", response.id_token);\r",
											"pm.collectionVariables.set(\"roomID_Delete_goksel\", response.id);\r",
											"\r",
											"\r",
											"pm.test(\"assertion statuscode succesfully\",function(){\r",
											"var statusCode=pm.response.code;\r",
											"pm.expect(statusCode).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"RoomNumber is a positive integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.roomNumber).to.be.a('number').and.to.be.above(0, \"RoomNumber should be a positive integer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Price is a non-negative number\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.price).to.be.a('number');\r",
											"    pm.expect(responseData.price).to.be.at.least(0, \"Price should be a non-negative number\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Description is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept-Charset",
										"value": "*/*",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"createdBy\": \"goksel\",\r\n  \"createdDate\": \"2024-02-17T13:45:51.902Z\",\r\n  \"description\": \"gokselin odasi\",\r\n  \"price\": 1459,\r\n  \"roomNumber\": {{$randomInt}},\r\n  \"roomType\": \"TWIN\",\r\n  \"status\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/rooms",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"rooms"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteRooms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//const response = pm.response.json();\r",
											"\r",
											"//pm.collectionVariables.set(\"roomID_Delete_goksel\", response.id);\r",
											"\r",
											"\r",
											"pm.test(\"Response status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response header assertion\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.include(\"nginx/1.18.0 (Ubuntu)\"); \r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.include(\"keep-alive\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Content-Type-Options\")).to.include(\"nosniff\"); \r",
											"    pm.expect(pm.response.headers.get(\"Pragma\")).to.include(\"no-cache\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{QAT05_base_url}}/api/rooms/{{roomID_Delete_goksel}}",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"rooms",
										"{{roomID_Delete_goksel}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Şeyma",
			"item": [
				{
					"name": "User-jwt-controller",
					"item": [
						{
							"name": "jwtToken",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Running token generation\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"//Verify successfull response \r",
											"pm.test(\"Successfull response: \", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"//Verify response content \r",
											"pm.test(\"Successfull body response: \", function(){\r",
											"    pm.expect(responseJson).haveOwnProperty('id_token')\r",
											"});\r",
											"\r",
											"//write accessToken as a Environment variable \r",
											"pm.environment.set('seyma_token',responseJson.id_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{seymapassword}}\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"{{seymausername}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/authenticate",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Physcian",
					"item": [
						{
							"name": "createPhyscian",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{seyma_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"adress\": \"string\",\r\n  \"appointments\": [\r\n    {\r\n      \"anamnesis\": \"string\",\r\n      \"createdBy\": \"string\",\r\n      \"createdDate\": \"2024-02-13T10:46:36.286Z\",\r\n      \"ctests\": [\r\n        {\r\n          \"appointment\": \"string\",\r\n          \"createdBy\": \"string\",\r\n          \"createdDate\": \"2024-02-13T10:46:36.286Z\",\r\n          \"ctestResults\": [\r\n            {\r\n              \"createdBy\": \"string\",\r\n              \"createdDate\": \"2024-02-13T10:46:36.286Z\",\r\n              \"ctest\": \"string\",\r\n              \"ctestItem\": {\r\n                \"createdBy\": \"string\",\r\n                \"createdDate\": \"2024-02-13T10:46:36.286Z\",\r\n                \"defaultValMax\": \"string\",\r\n                \"defaultValMin\": \"string\",\r\n                \"description\": \"string\",\r\n                \"id\": 0,\r\n                \"name\": \"string\",\r\n                \"price\": 0\r\n              },\r\n              \"date\": \"2024-02-13T10:46:36.286Z\",\r\n              \"description\": \"string\",\r\n              \"id\": 0,\r\n              \"result\": \"string\"\r\n            }\r\n          ],\r\n          \"date\": \"2024-02-13T10:46:36.286Z\",\r\n          \"description\": \"string\",\r\n          \"id\": 0,\r\n          \"name\": \"string\"\r\n        }\r\n      ],\r\n      \"description\": \"string\",\r\n      \"diagnosis\": \"string\",\r\n      \"endDate\": \"2024-02-13T10:46:36.286Z\",\r\n      \"id\": 0,\r\n      \"patient\": {\r\n        \"adress\": \"string\",\r\n        \"appointments\": [\r\n          \"string\"\r\n        ],\r\n        \"birthDate\": \"2024-02-13T10:46:36.286Z\",\r\n        \"bloodGroup\": \"Apositive\",\r\n        \"country\": {\r\n          \"id\": 0,\r\n          \"name\": \"string\"\r\n        },\r\n        \"createdBy\": \"string\",\r\n        \"createdDate\": \"2024-02-13T10:46:36.286Z\",\r\n        \"cstate\": {\r\n          \"country\": {\r\n            \"id\": 0,\r\n            \"name\": \"string\"\r\n          },\r\n          \"id\": 0,\r\n          \"name\": \"string\"\r\n        },\r\n        \"description\": \"string\",\r\n        \"email\": \"string\",\r\n        \"firstName\": \"string\",\r\n        \"gender\": \"MALE\",\r\n        \"id\": 0,\r\n        \"inPatients\": [\r\n          {\r\n            \"appointment\": \"string\",\r\n            \"createdBy\": \"string\",\r\n            \"createdDate\": \"2024-02-13T10:46:36.286Z\",\r\n            \"description\": \"string\",\r\n            \"endDate\": \"2024-02-13T10:46:36.286Z\",\r\n            \"id\": 0,\r\n            \"patient\": \"string\",\r\n            \"room\": {\r\n              \"createdBy\": \"string\",\r\n              \"createdDate\": \"2024-02-13T10:46:36.286Z\",\r\n              \"description\": \"string\",\r\n              \"id\": 0,\r\n              \"price\": 0,\r\n              \"roomNumber\": 0,\r\n              \"roomType\": \"TWIN\",\r\n              \"status\": true\r\n            },\r\n            \"startDate\": \"2024-02-13T10:46:36.286Z\",\r\n            \"status\": \"UNAPPROVED\"\r\n          }\r\n        ],\r\n        \"lastName\": \"string\",\r\n        \"phone\": \"string\",\r\n        \"ssn\": \"374-41-8595\",\r\n        \"user\": {\r\n          \"activated\": true,\r\n          \"createdBy\": \"string\",\r\n          \"createdDate\": \"2024-02-13T10:46:36.286Z\",\r\n          \"email\": \"string\",\r\n          \"firstName\": \"string\",\r\n          \"id\": 0,\r\n          \"imageUrl\": \"string\",\r\n          \"langKey\": \"string\",\r\n          \"lastName\": \"string\",\r\n          \"login\": \"string\",\r\n          \"resetDate\": \"2024-02-13T10:46:36.286Z\",\r\n          \"ssn\": \"361-21-9919\"\r\n        }\r\n      },\r\n      \"physician\": \"string\",\r\n      \"prescription\": \"string\",\r\n      \"startDate\": \"2024-02-13T10:46:36.286Z\",\r\n      \"status\": \"UNAPPROVED\",\r\n      \"treatment\": \"string\"\r\n    }\r\n  ],\r\n  \"birthDate\": \"2024-02-13T10:46:36.286Z\",\r\n  \"bloodGroup\": \"Apositive\",\r\n  \"country\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"createdBy\": \"string\",\r\n  \"createdDate\": \"2024-02-13T10:46:36.286Z\",\r\n  \"cstate\": {\r\n    \"country\": {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    },\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"description\": \"string\",\r\n  \"examFee\": 1,\r\n  \"firstName\": \"string\",\r\n  \"gender\": \"MALE\",\r\n  \"id\": 0,\r\n  \"image\": \"string\",\r\n  \"imageContentType\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"speciality\": \"ALLERGY_IMMUNOLOGY\",\r\n  \"ssn\": \"572-30-2059\",\r\n  \"user\": {\r\n    \"activated\": true,\r\n    \"createdBy\": \"string\",\r\n    \"createdDate\": \"2024-02-13T10:46:36.286Z\",\r\n    \"email\": \"string\",\r\n    \"firstName\": \"string\",\r\n    \"id\": 0,\r\n    \"imageUrl\": \"string\",\r\n    \"langKey\": \"string\",\r\n    \"lastName\": \"string\",\r\n    \"login\": \"string\",\r\n    \"resetDate\": \"2024-02-13T10:46:36.286Z\",\r\n    \"ssn\": \"516-89-0070\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "getAllPhyscians",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"// Verify successfull status Code \r",
											"pm.test(\"Verify Successfull Response :: Http status code 200 returned\",\r",
											"function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Verification Point \r",
											"pm.test(\"Verify that a list of ids equals to size\",\r",
											"function(){\r",
											"        pm.expect(responseJson.length.toString()).to.equal(pm.collectionVariables.get(\"sphyscians_size\"));\r",
											"});\r",
											"\r",
											"console.log(\"Data\",responseJson.length.toString());\r",
											"\r",
											"pm.collectionVariables.set('sphyscian_id',responseJson.first().id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{seyma_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians?page&size={{sphyscians_size}}&sort",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									],
									"query": [
										{
											"key": "page",
											"value": null
										},
										{
											"key": "size",
											"value": "{{sphyscians_size}}"
										},
										{
											"key": "sort",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getPhyscianId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{seyma_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians/{{sphyscian_id}}",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians",
										"{{sphyscian_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updatePhyscian",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{seyma_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"createdBy\": \"adminteam0423\",\r\n    \"createdDate\": \"2023-02-19T01:09:46.888203Z\",\r\n    \"id\": 1304,\r\n    \"firstName\": \"Doctor\",\r\n    \"lastName\": \"Baba\",\r\n    \"birthDate\": \"1987-06-18T21:00:00Z\",\r\n    \"phone\": \"4372254567\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"Ankara Mugla  karar ver?\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2023-02-18T23:51:51.026053Z\",\r\n        \"id\": 1147,\r\n        \"login\": \"doktorsedat\",\r\n        \"firstName\": \"dat\",\r\n        \"lastName\": \"Babadagi\",\r\n        \"email\": \"doctorsedat@gmail.com\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"796-09-0909\"\r\n    },\r\n    \"speciality\": \"DERMATOLOGY\",\r\n    \"appointments\": null,\r\n    \"country\": null,\r\n    \"cstate\": null,\r\n    \"examFee\": 250.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "physciansIdList",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"const besIdList = [];\r",
											"\r",
											"for (let i = 0; i < 5; i++) {\r",
											"  besIdList.push(response[i].id);\r",
											"  };\r",
											"\r",
											"console.log(\"Response besIdList :\" ,besIdList)\r",
											"\r",
											"pm.collectionVariables.set(\"besIdList\",besIdList);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{seyma_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "getAllPhysciansPage",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"// Verify successfull status Code \r",
											"pm.test(\"Verify Successfull Response :: Http status code 200 returned\",\r",
											"function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// data length\r",
											"var data = responseJson.length;\r",
											"\r",
											"// Number of data returned\r",
											"console.log(\"Number of data:\",responseJson.length.toString());\r",
											"\r",
											"// Verification Point \r",
											"pm.test(\"Verify that a list of ids equals to page\",\r",
											"function(){\r",
											"    pm.expect(data).to.be.lessThan(21);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{seyma_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians?page={{sphyscians_page}}",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									],
									"query": [
										{
											"key": "page",
											"value": "{{sphyscians_page}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getAllPhysciansSortAsc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"const physicianIdList = responseJson.map(physicians => physicians.id ) \r",
											"console.log(\"physicianIdList unordered : \" , physicianIdList)\r",
											"console.log(\"all physician count : \" , physicianIdList)\r",
											"\r",
											"const ascSortedIdList = physicianIdList.sort(function(a,b){\r",
											"    return a - b \r",
											"});\r",
											"console.log(\"ascending sorted IDs : \" , ascSortedIdList)\r",
											"\r",
											"pm.test(\"Page param test\", () => {\r",
											"    pm.expect(physicianIdList).to.eql(ascSortedIdList);\r",
											"    pm.expect(physicianIdList.lenght).to.eql(ascSortedIdList.lenght)\r",
											"});\r",
											"\r",
											"// Verify successfull status Code \r",
											"pm.test(\"Verify Successfull Response :: Http status code 200 returned\",\r",
											"    function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{seyma_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians?sort=id,asc",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians"
									],
									"query": [
										{
											"key": "sort",
											"value": "id,asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getAllPhysciansSortDesc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{seyma_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians?sort=id,desc",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians"
									],
									"query": [
										{
											"key": "sort",
											"value": "id,desc"
										}
									]
								},
								"description": "\n# Retrieve Physicians\n\nThis endpoint retrieves a list of physicians. The request is sent via an HTTP GET method to the specified URL with the query parameter for sorting the results by ID in descending order.\n\n### Request\n\n`GET /api/physicians?sort=id,desc`\n\n### Response\n\n- Status: 200\n- Content-Type: application/json\n\nExample response body:\n```json\n[\n    {\n        \"createdBy\":\"\",\n        \"createdDate\":\"\",\n        \"id\":0,\n        \"firstName\":\"\",\n        \"lastName\":\"\",\n        \"birthDate\":\"\",\n        \"phone\":\"\",\n        \"gender\":\"\",\n        \"bloodGroup\":\"\",\n        \"adress\":\"\",\n        \"description\":\"\",\n        \"user\":{\n            \"createdBy\":\"\",\n            \"createdDate\":\"\",\n            \"id\":0,\n            \"login\":\"\",\n            \"firstName\":\"\",\n            \"lastName\":\"\",\n            \"email\":\"\",\n            \"activated\":true,\n            \"langKey\":\"\",\n            \"imageUrl\":null,\n            \"resetDate\":null,\n            \"ssn\":\"\"\n        },\n        \"speciality\":\"\",\n        \"appointments\":null,\n        \"country\":null,\n        \"cstate\":null,\n        \"examFee\":0,\n        \"image\":\"\",\n        \"imageContentType\":null\n    }\n]\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "Patient",
					"item": [
						{
							"name": "getAllPatients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"// Verify successfull status Code \r",
											"pm.test(\"Verify Successfull Response :: Http status code 200 returned\",\r",
											"function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Verification Point \r",
											"pm.test(\"Verify that a list of ids equals to size\",\r",
											"function(){\r",
											"    pm.expect(responseJson.length.toString()).to.equal(pm.collectionVariables.get(\"spatients_size\"));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set('spatients_id',responseJson.first().id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{seyma_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/patients?page&size ={{spatients_size}}&sort",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"patients"
									],
									"query": [
										{
											"key": "page",
											"value": null
										},
										{
											"key": "size ",
											"value": "{{spatients_size}}"
										},
										{
											"key": "sort",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Appointment",
					"item": [
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Response JSON verisini al\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"//Verify successfull response\r",
											"pm.test(\"Status code is 404: \", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"pm.test(\"Verify 'detail' in response body\", function () {\r",
											"    pm.expect(responseJson.detail).to.equal(\"404 NOT_FOUND\");\r",
											"});\r",
											"\r",
											"console.log(\"Response dan dönen mesaj:\", responseJson.message);\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is application/problem+json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status is a non-negative integer\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.status).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Status should be a non-negative integer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Path is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.path).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{seyma_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/appointments/",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"appointments",
										""
									],
									"query": [
										{
											"key": "id",
											"value": "{{sinv_appid}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Rooms",
					"item": [
						{
							"name": "getAllRooms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"// Verify successfull status Code \r",
											"pm.test(\"Verify Successfull Response :: Http status code 200 returned\",\r",
											"function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Verification Point \r",
											"pm.test(\"Verify that a list of ids equals to size\",\r",
											"function(){\r",
											"    pm.expect(responseJson.length.toString()).to.equal(pm.collectionVariables.get(\"sroom_size\"));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set('sroom_id',responseJson.first().id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{seyma_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/rooms?page&size={{sroom_size}}&sort",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"rooms"
									],
									"query": [
										{
											"key": "page",
											"value": null
										},
										{
											"key": "size",
											"value": "{{sroom_size}}"
										},
										{
											"key": "sort",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Ali",
			"item": [
				{
					"name": "User-JWT-Controller",
					"item": [
						{
							"name": "jwt_Token_positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response=pm.response.json()\r",
											"pm.environment.set(\"ali_token\",response.ali_token)\r",
											"\r",
											"//verify succesfull response\r",
											"pm.test(\"successfull response: \", function(){\r",
											"    pm.expect(pm.response.status).to.equal('OK');\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"//verify response body\r",
											"pm.test(\"successfull response: \", function(){\r",
											"    pm.expect(response).haveOwnProperty('id_token')\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{ali_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{ali_username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{ali_password}}\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"{{ali_username}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/authenticate",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "jwt_Token_negative",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//assert status code\r",
											"pm.test(\"assertion status code\", function(){\r",
											"    //get status code\r",
											"    var statusCode=pm.response.code;\r",
											"    pm.expect(statusCode).to.be.oneOf([400,401]);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ali_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{ali_negatifPassword}}\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"{{ali_negatifUsername}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/authenticate",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Patients",
					"item": [
						{
							"name": "getAllPatients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ali_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/patients",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "getAllPatients_Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is application/problem+json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('type');\r",
											"    pm.expect(responseData).to.have.property('title');\r",
											"    pm.expect(responseData).to.have.property('status');\r",
											"    pm.expect(responseData).to.have.property('detail');\r",
											"    pm.expect(responseData).to.have.property('path');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status is a non-zero integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status).to.exist.and.to.be.a('number');\r",
											"    pm.expect(responseData.status).to.not.equal(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Detail is not empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.detail).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Detail should not be empty\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/patients",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"patients"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Appointment",
					"item": [
						{
							"name": "Appointment-Negatif",
							"item": [
								{
									"name": "getAllAppointments_Negatif",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ali_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}api/appointments/abc123",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"appointments",
												"abc123"
											]
										}
									},
									"response": []
								},
								{
									"name": "getAppointmentsID_Negatif",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 401', function () {\r",
													"    pm.expect(pm.response.code).to.equal(401);\r",
													"})\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Full authentication is required to access this resource\");\r",
													"});\r",
													"\r",
													"pm.test('Response Content-Type is application/problem+json', function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/problem+json');\r",
													"})\r",
													"\r",
													"pm.test('Response has the required fields', function () {\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('type');\r",
													"    pm.expect(responseData).to.have.property('title');\r",
													"    pm.expect(responseData).to.have.property('status');\r",
													"    pm.expect(responseData).to.have.property('detail');\r",
													"    pm.expect(responseData).to.have.property('path');\r",
													"    pm.expect(responseData).to.have.property('message');\r",
													"})\r",
													"\r",
													"pm.test('Status is a non-negative integer', function () {\r",
													"    pm.expect(responseData.status).to.be.a('number');\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}api/appointments",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"appointments"
											]
										}
									},
									"response": []
								},
								{
									"name": "getAppointmentsID_Negatif Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 401', function () {\r",
													"    pm.expect(pm.response.code).to.equal(401);\r",
													"})\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Full authentication is required to access this resource\");\r",
													"});\r",
													"\r",
													"pm.test('Response Content-Type is application/problem+json', function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/problem+json');\r",
													"})\r",
													"\r",
													"pm.test('Response has the required fields', function () {\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('type');\r",
													"    pm.expect(responseData).to.have.property('title');\r",
													"    pm.expect(responseData).to.have.property('status');\r",
													"    pm.expect(responseData).to.have.property('detail');\r",
													"    pm.expect(responseData).to.have.property('path');\r",
													"    pm.expect(responseData).to.have.property('message');\r",
													"})\r",
													"\r",
													"pm.test('Status is a non-negative integer', function () {\r",
													"    pm.expect(responseData.status).to.be.a('number');\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}api/appointments/",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"appointments",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "(M)_AppointmentID_Negative",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"//!! THIS REQUEST GETS THE DATA FROM PREVIOUS REQUEST\r",
													"// !!!!!!!! YOU CAN SET INVALID APPOINTMENT ID FROM Pre-Req IN THE PREVIOUS REQUEST\r",
													"\r",
													"const inv_appointmentIDs = pm.variables.get(\"invalid_appointmentID\")\r",
													"\r",
													"console.log(\"Multi Run Tests starts...Preparing invalid appointment IDs to verify...\")\r",
													"console.log(\"invalid invalid appointment IDs are : \" , inv_appointmentIDs)\r",
													"\r",
													"pm.variables.set('current_AppointmentID',inv_appointmentIDs.shift()) // take the first element in array and return it. - arraydeki ilk elementi alır ve bir arraye atar.  'current_param' arrayini sonra cagirarak kullanıyoruz.\r",
													"console.log(\"current_AppointmentID : \"+ pm.variables.get(\"current_AppointmentID\"));\r",
													"\r",
													"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
													"if(Array.isArray(inv_appointmentIDs) && inv_appointmentIDs.length > 0){\r",
													"postman.setNextRequest(\"(M)_AppointmentID_Negative\") // defining next request to run again with different physician IDs - farklı physician IDsi ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
													"} else{\r",
													"postman.setNextRequest(null);   // stop after executing current request -\r",
													"postman.setNextRequest(\"AppointmentID_Negative1\") \r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is not 200 OK',  ()=> {\r",
													"    pm.expect(pm.response.code).to.not.equal(200);\r",
													"})\r",
													"\r",
													"pm.test('Response Content-Type is application/json', function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.not.include('application/json');\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}api/appointments/{{current_AppointmentID}}",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"appointments",
												"{{current_AppointmentID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "AppointmentID_Negative1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"inv_appointmentID\", 22544555668854)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();\r",
													"\r",
													"pm.test('Status code is  404 Not Found',  ()=> {\r",
													"    pm.expect(pm.response.code).to.equal(404);\r",
													"})\r",
													"\r",
													"pm.test('Response Content-Type is application/problem+json',  ()=> {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/problem+json');\r",
													"})\r",
													"\r",
													"pm.test('Response has the required fields', function () {\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('type');\r",
													"    pm.expect(responseData).to.have.property('title');\r",
													"    pm.expect(responseData).to.have.property('status');\r",
													"    pm.expect(responseData).to.have.property('detail');\r",
													"    pm.expect(responseData).to.have.property('path');\r",
													"    pm.expect(responseData).to.have.property('message');\r",
													"})\r",
													"\r",
													"pm.test('Status is a non-negative integer', function () {\r",
													"    pm.expect(responseData.status).to.be.a('number');\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}api/appointments/{{inv_appointmentID}}",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"appointments",
												"{{inv_appointmentID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "AppointmentID_Negative2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"inv_appointmentID\",'.')"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();\r",
													"\r",
													"pm.test('Status code is not 200 OK',  ()=> {\r",
													"    pm.expect(pm.response.code).to.not.equal(200);\r",
													"})\r",
													"\r",
													"pm.test('Response Content-Type is application/problem+json',  ()=> {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/problem+json');\r",
													"})\r",
													"\r",
													"pm.test('Response has the required fields', function () {\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('type');\r",
													"    pm.expect(responseData).to.have.property('title');\r",
													"    pm.expect(responseData).to.have.property('status');\r",
													"    pm.expect(responseData).to.have.property('detail');\r",
													"    pm.expect(responseData).to.have.property('path');\r",
													"    pm.expect(responseData).to.have.property('message');\r",
													"})\r",
													"\r",
													"pm.test('Status is a non-negative integer', function () {\r",
													"    pm.expect(responseData.status).to.be.a('number');\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}api/appointments/{{inv_appointmentID}}",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"appointments",
												"{{inv_appointmentID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "getAllAppointments_Positive",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"const appointments = response.map(appointment => appointment.id);",
											"",
											"var appointmentsFirst = appointments[0];",
											"",
											"pm.collectionVariables.set('ali_appointment_id', appointmentsFirst)",
											"",
											"pm.test('Successful response: ', () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test('Content-Type header is \\'application/json\\'', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"})",
											"",
											"pm.test('Response contains an array of appointments', function () {",
											"    pm.expect(response).to.be.an('array');",
											"})",
											"",
											"pm.test('Patient\\'s email is in a valid email format', function () {",
											"    response.forEach(function (appointment) {",
											"        pm.expect(appointment.patient.email).to.match(/\\S+@\\S+\\.\\S+/);",
											"    });",
											"})",
											"",
											"pm.test('Number of appointments created matches the length of the appointments array', function () {",
											"    pm.expect(response.length).to.equal(response.filter(appointment => appointment.id !== 0).length);",
											"})",
											"",
											"pm.test(\"First appointment ID matches the response\", function () {",
											"    pm.expect(appointmentsFirst).to.equal(response[0].id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ali_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/appointments",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"appointments"
									]
								}
							},
							"response": []
						},
						{
							"name": "getAppointmentsID_Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//collectionVarien id response daki ıd ile eşit mi?\r",
											"pm.test(\"in collectionVariables ID equal to responseId\", function (){\r",
											"    pm.expect(pm.collectionVariables.get(\"ali_appointment_id\")).to.eql(responseJson.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ali_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/appointments/{{ali_appointment_id}}",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"appointments",
										"{{ali_appointment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SET_AppoıintmentID_params",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
											"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
											"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
											"\r",
											"let invalid_AppID = \"abc123,  ,&%+\"; //WRITE YOUR INVALID PAGE PARAMS HERE\r",
											"\r",
											"const invalid_AppID_arr = invalid_AppID.split (\",\"); // virgülü ayırıcı olarak kullan\r",
											"\r",
											"pm.variables.set(\"invalid_appointmentID\",invalid_AppID_arr) // to call and use params from next request, created a variable\r",
											"\r",
											"console.log(\"Invalid appointment ID ready to use : \" , pm.variables.get(\"invalid_appointmentID\"));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
											"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID APPOINTMENT ID\r",
											"// !!!!!!!! YOU CAN SET INVALID APPOINTMENT ID FROM Pre-Req\r",
											"\r",
											"pm.test(\"!!!! - INVALID SIZE PARAMS ARE READY TO USE - !!!!\", ()=> {\r",
											"    pm.expect(pm.variables.get(\"invalid_appointmentID\").length).to.be.above(0);\r",
											"}); //COLLECTION RUN VEYA MONITOR YAPILDIGINDA BILDIRIM DUSMESI ICIN\r",
											"\r",
											"pm.test(\"Invalid appointment IDs  \",()=>{\r",
											"    console.log(\"Invalid appointment IDs set as \", pm.variables.get(\"invalid_appointmentID\"))\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r\n// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/appointments",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"appointments"
									]
								}
							},
							"response": []
						},
						{
							"name": "deneme",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is not 200 OK',  ()=> {\r",
											"    pm.expect(pm.response.code).to.not.equal(200);\r",
											"})\r",
											"\r",
											"pm.test('Response Content-Type is application/json', function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.not.include('application/json');\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/appointments/.",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"appointments",
										"."
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Rooms",
					"item": [
						{
							"name": "getAllRooms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ali_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/rooms",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"rooms"
									]
								}
							},
							"response": []
						},
						{
							"name": "createRoom",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ali_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"createdBy\": \"string\",\r\n  \"createdDate\": \"2024-02-19T11:34:24.156Z\",\r\n  \"description\": \"string\",\r\n  \"id\": 0,\r\n  \"price\": 0,\r\n  \"roomNumber\": 0,\r\n  \"roomType\": \"TWIN\",\r\n  \"status\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/rooms",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"rooms"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteRoom",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ali_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/rooms",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"rooms"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Physcian",
					"item": [
						{
							"name": "getAllPhysician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response=pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verification Point ",
											"pm.test(\"Verify that a list of ids equals to size\",",
											"function(){",
											"        pm.expect(response.length.toString()).to.equal(pm.collectionVariables.get(\"murat_physician_size\"));",
											"});",
											"",
											"//Verification property have ID",
											"pm.test(\"Verification property have ID\",",
											"function(){",
											"        pm.expect(response[0]).to.have.property(\"id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ali_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians?size={{murat_physician_size}}&page&sort",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									],
									"query": [
										{
											"key": "size",
											"value": "{{murat_physician_size}}"
										},
										{
											"key": "page",
											"value": null
										},
										{
											"key": "sort",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getPyhsicianId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ali_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians?size&page&sort",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									],
									"query": [
										{
											"key": "size",
											"value": null,
											"description": "\n"
										},
										{
											"key": "page",
											"value": null
										},
										{
											"key": "sort",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getPyhsicianIdList",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians?page=2",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "updatePhysician",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ali_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "Ab188100*",
						"type": "string"
					},
					{
						"key": "username",
						"value": "alibnc123",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "MuratO",
			"item": [
				{
					"name": "User-JWT- Controller",
					"item": [
						{
							"name": "user_jwt_controller",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"token iss creating\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"console.log(response.id_token);\r",
											"\r",
											"pm.environment.set(\"QAT5_murattoken\", response.id_token);\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 800ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
											"});\r",
											"pm.test(\"Successful response\", function () {\r",
											"    pm.expect(response).haveOwnProperty('id_token')\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{muratpassword_token}}\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"{{muratusername_token}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/authenticate",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "negative_userName_jvt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//fixed missing ')' in the last test\r",
											"pm.test('Status code not equal 200', function () {\r",
											"    pm.expect(pm.response.to.not.equal(200));\r",
											"})\r",
											"const responseJson = pm.response.json();\r",
											"//response body have error\r",
											"pm.test(\"fail response body \", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.have.property(\"fieldErrors\");\r",
											"});\r",
											"\r",
											"pm.test(\"fail response body \", function () {\r",
											"    \r",
											" pm.response.to.have.header(\"Content-Type\",\"application/problem+json\");\r",
											"});\r",
											"\r",
											"  // verifies request doesn't return id_token property\r",
											"pm.test(\"Response body does not contain id_token property\", ()=> {\r",
											"    pm.expect(responseJson).to.not.have.property(\"id_token\");})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{murat_password}}\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"{{muratwrongusername_token}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/authenticate",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "negative_userPassword_jvt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//asser status con not equlas 200\r",
											"pm.test('Status code not equal 200', function () {\r",
											"    pm.expect(pm.status).to.not.equal(200);\r",
											"})\r",
											"//response body have erorr\r",
											"pm.test(\"fail response body \", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.have.property(\"fieldErrors\");\r",
											"});\r",
											"\r",
											"pm.test(\"fail response body \", function () {\r",
											"    \r",
											" pm.response.to.have.header(\"Content-Type\",\"application/problem+json\")\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{muratwrongpassword_token}}\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"{{murat_username}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/authenticate",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "negative_test_jvt controller",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//asser status con not equlas 200\r",
											"pm.test('Status code not equal 200', function () {\r",
											"    pm.expect(pm.status).to.not.equal(200);\r",
											"})\r",
											"//response body have erorr\r",
											"pm.test(\"fail response body \", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.have.property(\"fieldErrors\");\r",
											"});\r",
											"\r",
											"pm.test(\"fail response body \", function () {\r",
											"    \r",
											" pm.response.to.have.header(\"Content-Type\",\"application/problem+json\")\r",
											"});\r",
											"  // verifies request doesn't return id_token property\r",
											"pm.test(\"Response body does not contain id_token property\", ()=> {\r",
											"    pm.expect(responseJson).to.not.have.property(\"id_token\");})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{muratwrongpassword_token}}\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"{{muratwrongusername_token}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/authenticate",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Physcian",
					"item": [
						{
							"name": "getAllPhysician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verify status string\r",
											"pm.test('Status code name has string', function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"})\r",
											"//verify status string\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"//write console response length\r",
											"const responseJson = pm.response.json();\r",
											"console.log((\"response length::\"+responseJson.length).toString());\r",
											"\r",
											"pm.collectionVariables.set( \"murat_physician_size\", responseJson.length.toString());\r",
											"\r",
											"console.log(\"murat_physician_size::\"+pm.collectionVariables.get('murat_physician_size'));\r",
											"//verify that list of length equals to size\r",
											"pm.test('verify that list of ids equals to size', function () {\r",
											"    pm.expect(responseJson.length).to.equal(parseInt(pm.collectionVariables.get('murat_physician_size')));\r",
											"})\r",
											"//verify that body have id property\r",
											"pm.test(\"verify that have id\",function(){\r",
											"  pm.expect(responseJson[0]).to.have.property(\"id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{QAT5_murattoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians?page=&size={{murat_physician_size}}",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									],
									"query": [
										{
											"key": "page",
											"value": ""
										},
										{
											"key": "size",
											"value": "{{murat_physician_size}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "size_negative_getAllPhysician Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//\r",
											"pm.test('Status code name has string', function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"})\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"console.log((\"response length::\"+responseJson.length).toString());\r",
											"\r",
											"console.log(\"ali_physicianNegative_size-1::\"+pm.collectionVariables.get('ali_physicianNegative_size-1'));\r",
											"\r",
											"pm.test('verify that list of ids equals to size', function () {\r",
											"    pm.expect(responseJson.length).to.not.equal(parseInt(pm.collectionVariables.get('ali_physicianNegative_size-1')));\r",
											"})\r",
											"\r",
											"pm.test(\"verify that have id\",function(){\r",
											"  pm.expect(responseJson[0]).to.have.property(\"id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{QAT5_murattoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians?page=&size=-1",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									],
									"query": [
										{
											"key": "page",
											"value": ""
										},
										{
											"key": "size",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SET_firstfive_physician_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// RUN FROM FOLDER or COLLECTION RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIRIN",
											"const response = pm.response.json();",
											"console.log(\"Extracting the first 5 physician id and assigning to an array\")",
											"    // container for 5 physician id and extracting the first 5 ids - 5 doktor id'si için container ve ilk 5 idleri alma",
											"",
											"    const muratfiveidlist = response.slice(0,5).map(physicians => physicians.id) ",
											"  pm.variables.set(\"muratidlist\",muratfiveidlist);",
											"  /*",
											"    //  OR YOU CAN EXTRACT IDS WITH A LOOP",
											"    const idListFiveElements = []; // ",
											"    for (let i = 0; i < 5; i++) {",
											"        idListFiveElements.push(response[i].id); // adding the first 5 id to array - ilk 5 id arraye ekle",
											"  }; ",
											"  */",
											"  ",
											"    console.log(\"idListFiveElements :\" ,pm.collectionVariables.get(\"muratidlist\"))",
											"",
											"// creating variable to colleciton to reuse - yeniden kullanım için collection variable olustur",
											"//pm.variables.set(\"idListFiveElements_alp\",idListFiveElements);  //--a-------",
											"",
											"pm.test(\"!!!! - 5 PHYSICIAN ID ARE READY TO USE - !!!!!\", ()=> {",
											"    pm.expect(pm.variables.get(\"muratidlist\").length).to.be.above(0);",
											"}); ",
											"",
											"",
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//\"setnext request\" sonraki request calistirir",
											"postman.setNextRequest(\"firstfive_physician_id\")",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{QAT5_murattoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians/",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians",
										""
									],
									"query": [
										{
											"key": "size",
											"value": "{{murat_physician_size}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "firstfive_physician_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson=pm.response.json();",
											"pm.test('Status code name has string', function () {",
											"    pm.response.to.have.status('OK');",
											"})",
											"",
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"console.log(responseJson.id);",
											"pm.test('is id equal', function () {",
											"    ",
											"pm.expect(pm.variables.get(\"current_physician_mrt\")).to.equal(responseJson.id)});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
											"\r",
											"const physicianIds = pm.variables.get(\"muratidlist\") // define an array to get the data - data için array tanımla\r",
											"console.log(\"Preparing physician ids to verify...\")\r",
											"console.log(\"Physician IDs are \" , physicianIds)\r",
											"\r",
											"pm.variables.set('current_physician_mrt',physicianIds.shift()); // take the first element in array and return it. - arraydeki ilk elementi alır ve onu döndürür.\r",
											"console.log(\"current physician ID = \"+pm.variables.get(\"current_physician_mrt\"));\r",
											"\r",
											"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
											"if(Array.isArray(physicianIds) && physicianIds.length > 0){\r",
											"postman.setNextRequest(\"firstfive_physician_id\") // defining next request to run again with different physician IDs - farklı physician IDsi ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
											"} else{\r",
											"postman.setNextRequest(null);   // stop after executing current request -\r",
											"postman.setNextRequest(\"updatePhysicianspeciality\")\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{QAT5_murattoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians/{{current_physician_mrt}}",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians",
										"{{current_physician_mrt}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updatePhysicianspeciality",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//speciality list olusturduk sıfırdan 19 kadar bransların numarası var\r",
											"const list_speciality=[ \"ALLERGY_IMMUNOLOGY\",\r",
											"    \"ANESTHESIOLOGY\",\r",
											"    \"MEDICAL_GENETICS\",\r",
											"    \"PATHOLOGY\",\r",
											"    \"PSYCHIATRY\"]\r",
											"//listten random element index ile aldık\r",
											"function randompsindex(){\r",
											"    const randomspidx=Math.floor(Math.random()*(list_speciality.length))\r",
											"    return list_speciality[randomspidx];\r",
											"    }\r",
											"    //random elementi collection varriable atadık\r",
											"const randomspecialty=randompsindex();\r",
											"console.log('randomspecialisty');\r",
											"pm.collectionVariables.set(\"randomspecialist\",randomspecialty);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson=pm.response.json()\r",
											"\r",
											"const randoms_pecialist=pm.collectionVariables.get(\"randomspecialist\")\r",
											"console.log(randoms_pecialist)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//random element ile response elementi karsılastırdık\r",
											"pm.test('verify speciality is equal randomspecilaty',function(){\r",
											"pm.expect(randoms_pecialist).to.equal(responseJson.speciality);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{QAT5_murattoken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"createdBy\": \"adminmurat\",\r\n        \"createdDate\": \"2023-03-02T14:34:12.695534Z\",\r\n        \"id\": 5223,\r\n        \"firstName\": \"Dr\",\r\n        \"lastName\": \"Murat\",\r\n        \"birthDate\": \"2001-12-31T22:00:00Z\",\r\n        \"phone\": \"555-555-5555\",\r\n        \"gender\": \"MALE\",\r\n        \"bloodGroup\": \"Apositive\",\r\n        \"adress\": \"\",\r\n        \"description\": \"\",\r\n        \"user\": {\r\n            \"createdBy\": \"anonymousUser\",\r\n            \"createdDate\": \"2023-03-02T14:31:54.945657Z\",\r\n            \"id\": 13143,\r\n            \"login\": \"drmurat\",\r\n            \"firstName\": \"Dr\",\r\n            \"lastName\": \"Murat\",\r\n            \"email\": \"drmurat@gmail.com\",\r\n            \"activated\": true,\r\n            \"langKey\": \"en\",\r\n            \"imageUrl\": null,\r\n            \"resetDate\": null,\r\n            \"ssn\": \"657-05-0505\"\r\n        },\r\n        \"speciality\": \"{{randomspecialist}}\",\r\n        \"appointments\": null,\r\n        \"country\": null,\r\n        \"cstate\": null,\r\n        \"examFee\": 750.00,\r\n        \"image\": \"\",\r\n        \"imageContentType\": null\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "set_negative_speciality",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"////run before negative_speciality request using runner\r",
											"//bos ,listede olmayan,hiclik,kucuk harf listeden list olusturduk bu elmentlerle update edilmiyor\r",
											"const list_speciality=[ \"U\",\" \",\"\",\"pathology\",\"-12\"];\r",
											"    \r",
											"//list  to set varriable\r",
											"pm.variables.set(\"list_speciality\",list_speciality)\r",
											"\r",
											"console.log(\"Invalid speciality ready to use : \" , pm.variables.get(\"list_speciality\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//test list lenght bigger than zero\r",
											"pm.test(\"!!!! - INVALID SIZE array is READY TO USE - !!!!\", ()=> {\r",
											"    pm.expect(pm.variables.get(\"list_speciality\").length).to.be.above(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{QAT5_murattoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "negative_speciality",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"//run with set_negative_speciality request using runner\r",
											"const inv_list_speciality = pm.variables.get(\"list_speciality\")\r",
											"\r",
											"console.log(\"Multi Run Tests starts...Preparing invalid SİZE params to verify...\")\r",
											"console.log(\"invalid specialities are : \" , inv_list_speciality)\r",
											"//ilk elementi alır \r",
											"\r",
											"pm.variables.set('current_speciality',inv_list_speciality.shift()); // take the first element in array and return it. - arraydeki ilk elementi alır ve bir arraye atar.  'current_param' arrayini sonra cagirarak kullanıyoruz.\r",
											"console.log(\"current_speciality : \"+ pm.variables.get(\"current_speciality\"));\r",
											"\r",
											"\r",
											"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
											"if(Array.isArray(inv_list_speciality) && inv_list_speciality.length > 0){\r",
											"postman.setNextRequest(\"negative_speciality\") // defining next request to run again with different physician IDs - farklı physician speciality ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
											"} else{\r",
											"postman.setNextRequest(null);   // stop after executing current request -\r",
											"postman.setNextRequest(\"updatePhysicianemail\") \r",
											"\r",
											"};\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson=pm.response.json()\r",
											"const inv_curr_specialist=pm.variables.get(\"current_speciality\")\r",
											"console.log(\"invalid speciaity:\",inv_curr_specialist);\r",
											"\r",
											"//kabul edilmeyen elemanlar ile 4oo status kodu aldık\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('verify speciality is not equal randomspecilaty',function(){\r",
											"pm.expect(inv_curr_specialist).to.not.equal(responseJson.speciality);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{QAT5_murattoken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"createdBy\": \"adminmurat\",\r\n        \"createdDate\": \"2023-03-02T14:34:12.695534Z\",\r\n        \"id\": 5223,\r\n        \"firstName\": \"Dr\",\r\n        \"lastName\": \"Murat\",\r\n        \"birthDate\": \"2001-12-31T22:00:00Z\",\r\n        \"phone\": \"555-555-5555\",\r\n        \"gender\": \"MALE\",\r\n        \"bloodGroup\": \"Apositive\",\r\n        \"adress\": \"\",\r\n        \"description\": \"\",\r\n        \"user\": {\r\n            \"createdBy\": \"anonymousUser\",\r\n            \"createdDate\": \"2023-03-02T14:31:54.945657Z\",\r\n            \"id\": 13143,\r\n            \"login\": \"drmurat\",\r\n            \"firstName\": \"Dr\",\r\n            \"lastName\": \"Murat\",\r\n            \"email\": \"drmurat@gmail.com\",\r\n            \"activated\": true,\r\n            \"langKey\": \"en\",\r\n            \"imageUrl\": null,\r\n            \"resetDate\": null,\r\n            \"ssn\": \"657-05-0505\"\r\n        },\r\n        \"speciality\": {{current_speciality}},\r\n        \"appointments\": null,\r\n        \"country\": null,\r\n        \"cstate\": null,\r\n        \"examFee\": 750.00,\r\n        \"image\": \"\",\r\n        \"imageContentType\": null\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "negative_speciality Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson=pm.response.json()\r",
											"const inv_curr_specialist=pm.variables.get(\"current_speciality\")\r",
											"console.log(\"invalid speciaity:\",inv_curr_specialist);\r",
											"\r",
											"//kabul edilmeyen elemanlar ile 4oo status kodu aldık\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('verify speciality is not equal randomspecilaty',function(){\r",
											"pm.expect(inv_curr_specialist).to.not.equal(responseJson.speciality);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{QAT5_murattoken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"createdBy\": \"adminmurat\",\r\n        \"createdDate\": \"2023-03-02T14:34:12.695534Z\",\r\n        \"id\": 5223,\r\n        \"firstName\": \"Dr\",\r\n        \"lastName\": \"Murat\",\r\n        \"birthDate\": \"2001-12-31T22:00:00Z\",\r\n        \"phone\": \"555-555-5555\",\r\n        \"gender\": \"MALE\",\r\n        \"bloodGroup\": \"Apositive\",\r\n        \"adress\": \"\",\r\n        \"description\": \"\",\r\n        \"user\": {\r\n            \"createdBy\": \"anonymousUser\",\r\n            \"createdDate\": \"2023-03-02T14:31:54.945657Z\",\r\n            \"id\": 13143,\r\n            \"login\": \"drmurat\",\r\n            \"firstName\": \"Dr\",\r\n            \"lastName\": \"Murat\",\r\n            \"email\": \"drmurat@gmail.com\",\r\n            \"activated\": true,\r\n            \"langKey\": \"en\",\r\n            \"imageUrl\": null,\r\n            \"resetDate\": null,\r\n            \"ssn\": \"657-05-0505\"\r\n        },\r\n        \"speciality\": 4,\r\n        \"appointments\": null,\r\n        \"country\": null,\r\n        \"cstate\": null,\r\n        \"examFee\": 750.00,\r\n        \"image\": \"\",\r\n        \"imageContentType\": null\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "updatePhysicianemail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const list_email=[ \"dnm12@yahoo.com\",\r",
											"    \"dnm13@yahoo.com\",\r",
											"    \"dnm14@yahoo.com\",\r",
											"    \"dnm15@yahoo.com\",\r",
											"    \"dnm16@yahoo.com\"]\r",
											"\r",
											"function randomemailindex(){\r",
											"    const randomspidx=Math.floor(Math.random()*(list_email.length))\r",
											"    return list_email[randomspidx];\r",
											"    }\r",
											"const randomemail=randomemailindex();\r",
											"console.log(randomemail);\r",
											"pm.collectionVariables.set(\"randoms_emails\",randomemail);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson=pm.response.json()\r",
											"const randomemails=pm.collectionVariables.get(\"randoms_emails\")\r",
											"console.log(randomemails)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('verify speciality is equal random email',function(){\r",
											"pm.expect(randomemails).to.equal(responseJson.user.email);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{QAT5_murattoken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"createdBy\": \"adminmuratt\",\r\n        \"createdDate\": \"2023-03-02T14:34:12.695534Z\",\r\n        \"id\": 5223,\r\n        \"firstName\": \"Drm\",\r\n        \"lastName\": \"Murat\",\r\n        \"birthDate\": \"2001-12-31T22:00:00Z\",\r\n        \"phone\": \"555-555-5555\",\r\n        \"gender\": \"MALE\",\r\n        \"bloodGroup\": \"Apositive\",\r\n        \"adress\": \"\",\r\n        \"description\": \"\",\r\n        \"user\": {\r\n            \"createdBy\": \"anonymousUser\",\r\n            \"createdDate\": \"2023-03-02T14:31:54.945657Z\",\r\n            \"id\": 13143,\r\n            \"login\": \"drmurat\",\r\n            \"firstName\": \"Dr\",\r\n            \"lastName\": \"Murat\",\r\n            \"email\": \"ddddrmurat@gmail.com\",\r\n            \"activated\": true,\r\n            \"langKey\": \"en\",\r\n            \"imageUrl\": null,\r\n            \"resetDate\": null,\r\n            \"ssn\": \"657-05-0505\"\r\n        },\r\n        \"speciality\": \"PATHOLOGY\",\r\n        \"appointments\": null,\r\n        \"country\": null,\r\n        \"cstate\": null,\r\n        \"examFee\": 750.00,\r\n        \"image\": \"\",\r\n        \"imageContentType\": null\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "updatePhysician_adress",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const list_adress=[ \"adress1\",\r",
											"    \"4444442\",\r",
											"    \"a.,6&3\",\r",
											"    \"/////\",\r",
											"    \"  \"]\r",
											"\r",
											"function random_adressindex(){\r",
											"    const randomspidx=Math.floor(Math.random()*(list_adress.length))\r",
											"    return list_adress[randomspidx];\r",
											"    }\r",
											"const randomadress=random_adressindex();\r",
											"console.log(randomadress);\r",
											"pm.collectionVariables.set(\"randoms_adress\",randomadress);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson=pm.response.json()\r",
											"const randomadresses=pm.collectionVariables.get(\"randoms_adress\")\r",
											"console.log(randomadresses)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('verify speciality is equal random email',function(){\r",
											"pm.expect(randomadresses).to.equal(responseJson.adress);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{QAT5_murattoken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"createdBy\": \"adminmuratt\",\r\n        \"createdDate\": \"2023-03-02T14:34:12.695534Z\",\r\n        \"id\": 5223,\r\n        \"firstName\": \"Drm\",\r\n        \"lastName\": \"Murat\",\r\n        \"birthDate\": \"2001-12-31T22:00:00Z\",\r\n        \"phone\": \"555-555-5555\",\r\n        \"gender\": \"MALE\",\r\n        \"bloodGroup\": \"Apositive\",\r\n        \"adress\": \"{{randoms_adress}}\",\r\n        \"description\": \"\",\r\n        \"user\": {\r\n            \"createdBy\": \"anonymousUser\",\r\n            \"createdDate\": \"2023-03-02T14:31:54.945657Z\",\r\n            \"id\": 13143,\r\n            \"login\": \"drmurat\",\r\n            \"firstName\": \"Dr\",\r\n            \"lastName\": \"Murat\",\r\n            \"email\": \"drmurat@gmail.com\",\r\n            \"activated\": true,\r\n            \"langKey\": \"en\",\r\n            \"imageUrl\": null,\r\n            \"resetDate\": null,\r\n            \"ssn\": \"657-05-0505\"\r\n        },\r\n        \"speciality\": \"PATHOLOGY\",\r\n        \"appointments\": null,\r\n        \"country\": null,\r\n        \"cstate\": null,\r\n        \"examFee\": 750.00,\r\n        \"image\": \"\",\r\n        \"imageContentType\": null\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Patients",
					"item": [
						{
							"name": "getAllpatients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code name has string\r",
											"pm.test('Status code name has string', function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"})\r",
											"//Status code is 200\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set('murat_patient_size', responseJson.length.toString())\r",
											"\r",
											"console.log('murat_physician_size::' + pm.collectionVariables.get('murat_patient_size'))\r",
											"//verify that list of response length equals to size\r",
											"pm.test('verify that list of response length equals to size', function () {\r",
											"    pm.expect(responseJson.length).to.equal(parseInt(pm.collectionVariables.get('murat_patient_size')));\r",
											"})\r",
											"//verify that have id\r",
											"pm.test('verify that have id', function () {\r",
											"    pm.expect(responseJson[0]).to.have.property('id');\r",
											"})\r",
											"//Response data length must be greater than zero\r",
											"pm.test(\"Response data length must be greater than zero\", function () {\r",
											"    const responseJSON = pm.response.json();\r",
											"    pm.expect(responseJSON.length).to.be.greaterThan(0, \"Response data length should be greater than zero\");\r",
											"//header Content-Type is application/problem+json\r",
											"pm.test(\"header Content-Type is application/json\", function () {\r",
											"    \r",
											" pm.response.to.have.header(\"Content-Type\",\"application/json\")\r",
											"});\r",
											"   });\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{QAT5_murattoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/patients?page&size={{murat_patient_size}}&sort",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"patients"
									],
									"query": [
										{
											"key": "page",
											"value": null
										},
										{
											"key": "size",
											"value": "{{murat_patient_size}}"
										},
										{
											"key": "sort",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "negative_patients/bydate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//Response body is an array without element\r",
											"pm.test(\"Response body is an array without element\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').and.to.not.have.lengthOf.at.least(1);\r",
											"});\r",
											"\r",
											"//Dates in the response have the correct format\r",
											"pm.test(\"Dates in the response have the correct format\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    responseData.forEach(function(item) {\r",
											"                pm.expect(item.toDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"console.log(item.date);\r",
											"    });\r",
											"});\r",
											"\r",
											"//Response is not empty\r",
											"pm.test(\"Response is not empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.empty;\r",
											"});\r",
											"\r",
											"// date parameters value\r",
											"var enddate = pm.request.url.query.get('toDate');\r",
											"var startdate = pm.request.url.query.get('fromDate');\r",
											"//Date format is ISO 8601\r",
											"pm.test('Date format is ISO 8601', function () {\r",
											"    pm.expect(startdate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"    pm.expect(enddate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"})\r",
											"//startdate is after endDate\r",
											"pm.test(\"startdate is after endDate\", function () {\r",
											"  pm.expect(new Date(startdate).getTime()).to.be.above(new Date(enddate).getTime());\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{QAT5_murattoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/in-patients/bydate?fromDate=2023-12-01&toDate=2023-01-23",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"in-patients",
										"bydate"
									],
									"query": [
										{
											"key": "fromDate",
											"value": "2023-12-01"
										},
										{
											"key": "toDate",
											"value": "2023-01-23"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "pozitive_patients/bydate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"//Response body is an array with at least one element\r",
											"pm.test('Response body is an array with at least one element', function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);\r",
											"})\r",
											"//Response is not empty\r",
											"pm.test('Response is not empty', function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.not.be.empty;\r",
											"})\r",
											"// date parameters value\r",
											"var enddate = pm.request.url.query.get('toDate');\r",
											"var startdate = pm.request.url.query.get('fromDate');\r",
											"\r",
											"//Date format is ISO 8601\r",
											"pm.test('Date format is ISO 8601', function () {\r",
											"    pm.expect(startdate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"    pm.expect(enddate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"})\r",
											"//startdate is before endDate2\r",
											"pm.test(\"startdate is before endDate2\", function () {\r",
											"  pm.expect(new Date(startdate).getTime()).to.be.below(new Date(enddate).getTime());\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{QAT5_murattoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/in-patients/bydate?fromDate=2023-01-01&toDate=2024-01-23",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"in-patients",
										"bydate"
									],
									"query": [
										{
											"key": "fromDate",
											"value": "2023-01-01"
										},
										{
											"key": "toDate",
											"value": "2024-01-23"
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of in-patient records within a specified date range. The request should include the 'fromDate' and 'toDate' query parameters to define the start and end dates for the search. The response will be in JSON format and will contain an array of in-patient records, each including details about the patient, appointment, physician, and other related information.\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "Appointment",
					"item": [
						{
							"name": "appointment-resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJSON=pm.response.json();\r",
											"pm.test(\"Successful response\", function () {\r",
											"    pm.expect(responseJSON[0]).to.have.property('id');\r",
											"});\r",
											"\r",
											"//\r",
											"console.log(responseJSON[0].id);\r",
											"pm.variables.set(\"idpatient_mrt\",responseJSON.first().id)\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{QAT5_murattoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/appointments?filter&page&size=1&sort",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"appointments"
									],
									"query": [
										{
											"key": "filter",
											"value": null
										},
										{
											"key": "page",
											"value": null
										},
										{
											"key": "size",
											"value": "1"
										},
										{
											"key": "sort",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getAppointmentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"const responseJSON = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify idpatient_mrt matches response id\",function(){\r",
											"    console.log(pm.variables.get(\"idpatient_mrt\"));\r",
											"  pm.expect(responseJSON.id).to.eqls(pm.variables.get(\"idpatient_mrt\"));\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{QAT5_murattoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/appointments/{{idpatient_mrt}}",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"appointments",
										"{{idpatient_mrt}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Rooms",
					"item": [
						{
							"name": "getAllRoomsUsingGET",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJSON=pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Successful response\", function () {\r",
											"    pm.expect(responseJSON[0]).to.have.property('id');\r",
											"});\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"RoomNumber is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function(room) {\r",
											"        pm.expect(room.roomNumber).to.be.a('number').and.to.be.at.least(0, \"RoomNumber should be a non-negative integer\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Price is a non-negative number\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    \r",
											"    responseData.forEach(function(room) {\r",
											"        pm.expect(room.price).to.be.at.least(0);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{QAT5_murattoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/rooms?page&size&sort",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"rooms"
									],
									"query": [
										{
											"key": "page",
											"value": null
										},
										{
											"key": "size",
											"value": null
										},
										{
											"key": "sort",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "createRoomUsingPOST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed AssertionError by checking for existence before equality\r",
											"pm.test('Status code is 200 or 201', function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"//check the room number\r",
											"pm.test(\"check the room number\",function(){\r",
											"console.log(\"roomNumberr::\", pm.variables.get(\"roomNumberr\"));\r",
											"pm.expect(pm.response.json().roomNumber).to.exist;\r",
											"pm.expect(pm.response.json().roomNumber).to.equal(pm.variables.get(\"roomNumberr\"));\r",
											"})\r",
											"pm.collectionVariables.set(\"roomid_murat\",(pm.response.json()).id);\r",
											"console.log(\"roomidmurat\",pm.collectionVariables.get(\"roomid_murat\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"roomNumberr\", _.random(1, 100000)); // 1 ile 100000 arasında rastgele bir sayı oluşturur"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{QAT5_murattoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"createdDate\": \"2024-02-16T12:55:29.879Z\",\r\n  \"description\": \"parent room\",\r\n  \"price\": 1600,\r\n  \"roomNumber\": {{roomNumberr}},\r\n  \"roomType\": \"TWIN\",\r\n  \"status\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/rooms",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"rooms"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteRoomUsingDELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Room successfully deleted from the system\", function () {\r",
											"    const responseData = xml2Json(pm.response.text());\r",
											"    \r",
											"    pm.expect(responseData).to.be.null;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within an acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{QAT5_murattoken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/rooms/{{roomid_murat}}",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"rooms",
										"{{roomid_murat}}"
									],
									"query": [
										{
											"key": "id",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Göksel",
			"item": [
				{
					"name": "User-JWT- Controller",
					"item": [
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"console.log(response.id_token);",
											"pm.environment.set(\"token_goksel\", response.id_token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    //pm.response.to.have.status(200);",
											"    pm.expect(pm.response.status).to.equal('OK');",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Running token generation\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_goksel}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{goksel_password}}\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"{{goksel_username}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/authenticate",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid_username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"console.log(response.id_token);\r",
											"pm.environment.set(\"token_goksel\", response.id_token);\r",
											"\r",
											"\r",
											"pm.test(\"assertion statuscode Bad Request\",function(){\r",
											"var statusCode=pm.response.code;\r",
											"pm.expect(statusCode).to.be.oneOf([400,401]);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"// assert error key and value\r",
											"pm.test(\"fail response body:\",function(){\r",
											"    var jsonData=pm.response.json();\r",
											"    pm.expect(jsonData.error).to.have.eq(\"Unauthorized\");\r",
											"    pm.expect(jsonData.message).to.have.eq(\"Unauthorized\")\r",
											"})\r",
											"\r",
											"// assert error key\r",
											"pm.test(\"fail response body:\",function(){\r",
											"    var jsonData=pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
											"    pm.expect(jsonData).to.have.property(\"status\");\r",
											"    pm.expect(jsonData).to.have.property(\"error\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(jsonData).to.have.property(\"path\");\r",
											"\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Running token generation\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{invalidUsernameGoksel}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{goksel_password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"123456789\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"{{invalidUsernameGoksel}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/authenticate",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid_password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"console.log(response.id_token);\r",
											"pm.environment.set(\"token_goksel\", response.id_token);\r",
											"\r",
											"pm.test(\"assertion statuscode Bad Request\",function(){\r",
											"var statusCode=pm.response.code;\r",
											"pm.expect(statusCode).to.be.oneOf([400,401]);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// assert error key\r",
											"pm.test(\"fail response body:\",function(){\r",
											"    var jsonData=pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\");\r",
											"})\r",
											"\r",
											"// assert error key and value\r",
											"pm.test(\"fail response body:\",function(){\r",
											"    var jsonData=pm.response.json();\r",
											"    pm.expect(jsonData.error).to.have.eq(\"Unauthorized\");\r",
											"    pm.expect(jsonData.message).to.have.eq(\"Unauthorized\")\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Running token generation\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{invalidPasswordGoksel}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{goksel_username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{invalidPasswordGoksel}}\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"usergoksel\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/authenticate",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid_password&username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// assert error key\r",
											"pm.test(\"fail response body:\",function(){\r",
											"    var jsonData=pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\");\r",
											"})\r",
											"\r",
											"// assert error key and value\r",
											"pm.test(\"fail response body:\",function(){\r",
											"    var jsonData=pm.response.json();\r",
											"    pm.expect(jsonData.error).to.have.eq(\"Unauthorized\");\r",
											"    pm.expect(jsonData.message).to.have.eq(\"Unauthorized\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Running token generation\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{invalidPasswordGoksel}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{invalidUsernameGoksel}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{invalidPasswordGoksel}}\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"{{invalidUsernameGoksel}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/authenticate",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "empty_username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"console.log(response.id_token)\r",
											"\r",
											"pm.environment.set('token_goksel', response.id_token)\r",
											"\r",
											"pm.test('assertion statuscode Bad Request', function () {\r",
											"    var statusCode = pm.response.code;\r",
											"    pm.expect(statusCode).to.be.oneOf([\r",
											"        400,\r",
											"        401\r",
											"    ]);\r",
											"})\r",
											"\r",
											"pm.test(\"fail response body:\",function(){\r",
											"    var jsonData=pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"error.validation\");\r",
											"    pm.expect(jsonData.title).to.equal(\"Method argument not valid\");\r",
											"    pm.expect(jsonData.fieldErrors).to.be.an('array');\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Running token generation\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{goksel_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{goksel_username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"123456789\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/authenticate",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "empty_password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"console.log(response.id_token);\r",
											"pm.environment.set(\"token_goksel\", response.id_token);\r",
											"\r",
											"pm.test(\"assertion statuscode Bad Request\",function(){\r",
											"var statusCode=pm.response.code;\r",
											"pm.expect(statusCode).to.be.oneOf([400,401]);\r",
											"});\r",
											"\r",
											"pm.test(\"fail response body:\",function(){\r",
											"    var jsonData=pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"error.validation\");\r",
											"    pm.expect(jsonData.title).to.equal(\"Method argument not valid\");\r",
											"    pm.expect(jsonData.fieldErrors).to.be.an('array');\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Running token generation\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{goksel_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{goksel_username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"usergoksel\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/authenticate",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "empty_username&password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"console.log(response.id_token);\r",
											"pm.environment.set(\"token_goksel\", response.id_token);\r",
											"\r",
											"pm.test(\"assertion statuscode Bad Request\",function(){\r",
											"var statusCode=pm.response.code;\r",
											"pm.expect(statusCode).to.be.oneOf([400,401]);\r",
											"});\r",
											"\r",
											"pm.test(\"fail response body:\",function(){\r",
											"    var jsonData=pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"error.validation\");\r",
											"    pm.expect(jsonData.title).to.equal(\"Method argument not valid\");\r",
											"    pm.expect(jsonData.fieldErrors).to.be.an('array');\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Running token generation\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{goksel_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{goksel_username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/authenticate",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid_endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error property\",function(){\r",
											"    var jsonData=pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\");\r",
											"})\r",
											"\r",
											"pm.test(\"Error property value is 'Not Found'\",function(){\r",
											"    var jsonData=pm.response.json();\r",
											"    pm.expect(jsonData.error).to.equal(\"Not Found\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Running token generation\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/authenticat",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"authenticat"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Physcian",
					"item": [
						{
							"name": "GetAllPhysician_2/a",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed the test for setting environment variable",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"const response = pm.response.json();",
											"pm.environment.set(\"token_goksel\", response[0].id);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Appointments field is null or an array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    responseData.forEach(function(physician) {",
											"        pm.expect(physician.appointments).to.satisfy(function (value) {",
											"            return value === null || Array.isArray(value);",
											"        }, \"Appointments field should be null or an array\");",
											"    });",
											"});",
											"",
											"pm.test(\"Id in the response is a non-zero positive integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    responseData.forEach(function(physician) {",
											"        pm.expect(physician.id).to.be.a('number').and.to.be.above(0);",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Exam fee is a non-negative number\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    responseData.forEach(function(physician) {",
											"        pm.expect(physician.examFee).to.be.a('number').and.to.be.at.least(0);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{goksel_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{goksel_username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									]
								},
								"description": "\n# Retrieve Physicians\n\nThis endpoint retrieves a list of physicians.\n\n## Request\n\n### HTTP Request\n  `GET {{QAT05_base_url}}api/physicians`\n\n## Response\n\n- Status: 200\n- Content-Type: application/json\n\nExample Response Body:\n```json\n[\n    {\n        \"createdBy\": \"\",\n        \"createdDate\": \"\",\n        \"id\": 0,\n        \"firstName\": \"\",\n        \"lastName\": \"\",\n        \"birthDate\": \"\",\n        \"phone\": \"\",\n        \"gender\": \"\",\n        \"bloodGroup\": \"\",\n        \"address\": \"\",\n        \"description\": \"\",\n        \"user\": {\n            \"createdBy\": \"\",\n            \"createdDate\": \"\",\n            \"id\": 0,\n            \"login\": \"\",\n            \"firstName\": \"\",\n            \"lastName\": \"\",\n            \"email\": \"\",\n            \"activated\": true,\n            \"langKey\": \"\",\n            \"imageUrl\": null,\n            \"resetDate\": null,\n            \"ssn\": \"\"\n        },\n        \"speciality\": \"\",\n        \"appointments\": null,\n        \"country\": null,\n        \"cstate\": null,\n        \"examFee\": 0,\n        \"image\": \"\",\n        \"imageContentType\": null\n    }\n]\n"
							},
							"response": []
						},
						{
							"name": "GetAllParameterPhysician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Removed redundant tests and updated properties",
											"pm.test('Response status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test('Content-Type header is application/json', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"})",
											"",
											"pm.test('Response is an array of objects', function () {",
											"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;",
											"});",
											"",
											"pm.test('Each object has the required properties', function () {",
											"    pm.response.json().forEach(function(physician) {",
											"        pm.expect(physician).to.have.property('id');",
											"        pm.expect(physician).to.have.property('firstName');",
											"        pm.expect(physician).to.have.property('lastName');",
											"        pm.expect(physician).to.have.property('birthDate');",
											"        pm.expect(physician).to.have.property('phone');",
											"        pm.expect(physician).to.have.property('gender');",
											"        pm.expect(physician).to.have.property('bloodGroup');",
											"        pm.expect(physician).to.have.property('adress');",
											"        pm.expect(physician).to.have.property('description');",
											"        pm.expect(physician).to.have.property('user');",
											"        pm.expect(physician).to.have.property('speciality');",
											"        pm.expect(physician).to.have.property('examFee');",
											"        pm.expect(physician).to.have.property('image');",
											"        pm.expect(physician).to.have.property('imageContentType');",
											"        pm.expect(physician).to.not.have.property('ssn');",
											"        pm.expect(physician).to.have.property('createdBy', 'postman_team06');",
											"        pm.expect(physician.examFee).to.be.a('number').and.to.be.at.least(0);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Running token generation\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{goksel_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{goksel_username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians?page=1&size=1",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "updatePhysicianUsingPUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"console.log(response.id_token);\r",
											"pm.environment.set(\"token_goksel\", response.id_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{goksel_username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{goksel_password}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "*/*",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"createdBy\": \"admingoksel\",\r\n        \"createdDate\": \"2023-02-23T06:15:34.306489Z\",\r\n        \"id\": 5202,\r\n        \"firstName\": \"admin\",\r\n        \"lastName\": \"goksel\",\r\n        \"birthDate\": \"1982-02-22T21:00:00Z\",\r\n        \"phone\": \"5444856932\",\r\n        \"gender\": \"MALE\",\r\n        \"bloodGroup\": \"Apositive\",\r\n        \"adress\": \" samsun canik 55\",\r\n        \"description\": \"\",\r\n        \"user\": {\r\n            \"createdBy\": \"admingoksel\",\r\n            \"createdDate\": \"2023-02-22T17:50:09.285715Z\",\r\n            \"id\": 3916,\r\n            \"login\": \"admingoksel\",\r\n            \"firstName\": \"admin\",\r\n            \"lastName\": \"goksel\",\r\n            \"email\": \"admingoksel@gmail.com\",\r\n            \"activated\": true,\r\n            \"langKey\": \"en\",\r\n            \"imageUrl\": null,\r\n            \"resetDate\": null,\r\n            \"ssn\": \"887-12-5276\"\r\n        },\r\n        \"speciality\": \"PSYCHIATRY\",\r\n        \"appointments\": null,\r\n        \"country\": null,\r\n        \"cstate\": null,\r\n        \"examFee\": 250.00,\r\n        \"image\": \"\",\r\n        \"imageContentType\": null\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Patients",
					"item": [
						{
							"name": "GetAllPatients",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Running token generation\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"console.log(response.id_token);\r",
											"pm.environment.set(\"token_goksel\", response.id_token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{goksel_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{goksel_username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/in-patients",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"in-patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "PostPatient",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Running token generation\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": []
							},
							"response": []
						},
						{
							"name": "GetPatients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"console.log(response.id_token);\r",
											"pm.environment.set(\"token_goksel\", response.id_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Running token generation\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{QAT05_base_url}}/api/patient/physician",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"patient",
										"physician"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Appointment",
					"item": [
						{
							"name": "getAllApointment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"StartDate and endDate are in valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"  ",
											"    });",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Running token generation\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{goksel_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{goksel_username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{QAT05_base_url}}/api/appointments",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"appointments"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Running token generation\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{goksel_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{goksel_username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{QAT05_base_url}}/api/appointments",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"appointments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Rooms",
					"item": [
						{
							"name": "GetAllRooms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"console.log(response.id_token);",
											"pm.environment.set(\"token_goksel\", response.id_token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    ",
											"    responseData.forEach(function(room) {",
											"        pm.expect(room).to.include.all.keys('createdBy', 'createdDate', 'id', 'roomNumber', 'roomType', 'status', 'price', 'description');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"RoomNumber is a positive integer\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(room) {",
											"        pm.expect(room.roomNumber).to.be.a('number').and.to.be.above(0);",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Price is a non-negative number\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    responseData.forEach(function(room) {",
											"        pm.expect(room.price).to.be.a('number');",
											"        pm.expect(room.price).to.be.at.least(0);",
											"    });",
											"});",
											"",
											"pm.test(\"Status is a boolean value\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    responseData.forEach(function(room) {",
											"        pm.expect(room.status).to.be.a('boolean');",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Running token generation\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{goksel_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{goksel_username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/rooms",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"rooms"
									]
								}
							},
							"response": []
						},
						{
							"name": "PostRooms_Get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"console.log(response.id_token);\r",
											"pm.environment.set(\"token_goksel\", response.id_token);\r",
											"pm.collectionVariables.set(\"roomID_goksel\", response.id);\r",
											"\r",
											"\r",
											"pm.test(\"assertion statuscode succesfully\",function(){\r",
											"var statusCode=pm.response.code;\r",
											"pm.expect(statusCode).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"RoomNumber is a positive integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.roomNumber).to.be.a('number').and.to.be.above(0, \"RoomNumber should be a positive integer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Price is a non-negative number\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.price).to.be.a('number');\r",
											"    pm.expect(responseData.price).to.be.at.least(0, \"Price should be a non-negative number\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Description is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{goksel_username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{goksel_password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept-Charset",
										"value": "*/*",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"createdBy\": \"goksel\",\r\n  \"createdDate\": \"2024-02-17T13:45:51.902Z\",\r\n  \"description\": \"gokselin odasi\",\r\n  \"price\": 1459,\r\n  \"roomNumber\": {{$randomInt}},\r\n  \"roomType\": \"TWIN\",\r\n  \"status\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/rooms",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"rooms"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetRooms",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"console.log(\"Running token generation\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"console.log(response.id_token);",
											"pm.environment.set(\"token_goksel\", response.id_token);",
											"pm.variables.set(\"roomID_goksel\", response.id);",
											"",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"fail response body:\",function(){",
											"    var jsonData=pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"createdBy\");",
											"    pm.expect(jsonData).to.have.property(\"createdDate\");",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"roomNumber\");",
											"    pm.expect(jsonData).to.have.property(\"roomType\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"    pm.expect(jsonData).to.have.property(\"price\");",
											"    pm.expect(jsonData).to.have.property(\"description\");",
											"",
											"})",
											"pm.test(\"ASSERTİON body:\",function(){",
											"    var jsonData=pm.response.json();",
											"    pm.expect(jsonData.roomType).to.have.eq(\"TWIN\");",
											"    pm.expect(jsonData.status).to.have.eq(true)",
											"})",
											"//",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{goksel_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{goksel_username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/rooms/{{roomID_goksel}}",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"rooms",
										"{{roomID_goksel}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PostRooms_Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"console.log(response.id_token);\r",
											"pm.environment.set(\"token_goksel\", response.id_token);\r",
											"pm.collectionVariables.set(\"roomID_Delete_goksel\", response.id);\r",
											"\r",
											"\r",
											"pm.test(\"assertion statuscode succesfully\",function(){\r",
											"var statusCode=pm.response.code;\r",
											"pm.expect(statusCode).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"RoomNumber is a positive integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.roomNumber).to.be.a('number').and.to.be.above(0, \"RoomNumber should be a positive integer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Price is a non-negative number\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.price).to.be.a('number');\r",
											"    pm.expect(responseData.price).to.be.at.least(0, \"Price should be a non-negative number\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Description is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{goksel_username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{goksel_password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept-Charset",
										"value": "*/*",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"createdBy\": \"goksel\",\r\n  \"createdDate\": \"2024-02-17T13:45:51.902Z\",\r\n  \"description\": \"gokselin odasi\",\r\n  \"price\": 1459,\r\n  \"roomNumber\": {{$randomInt}},\r\n  \"roomType\": \"TWIN\",\r\n  \"status\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/rooms",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"rooms"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteRooms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"console.log(response.id_token);\r",
											"pm.environment.set(\"token_goksel\", response.id_token);\r",
											"pm.collectionVariables.set(\"roomID_Delete_goksel\", response.id);\r",
											"\r",
											"\r",
											"pm.test(\"Response status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response header assertion\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.include(\"nginx/1.18.0 (Ubuntu)\"); \r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.include(\"keep-alive\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Content-Type-Options\")).to.include(\"nosniff\"); \r",
											"    pm.expect(pm.response.headers.get(\"Pragma\")).to.include(\"no-cache\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{goksel_username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{goksel_password}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{QAT05_base_url}}/api/rooms/{{roomID_Delete_goksel}}",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"rooms",
										"{{roomID_Delete_goksel}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "123456789",
						"type": "string"
					},
					{
						"key": "username",
						"value": "admingoksel",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Alparslan",
			"item": [
				{
					"name": "Auser-jwt-controller",
					"item": [
						{
							"name": "User-jwt-Negative Test",
							"item": [
								{
									"name": "jwtToken-InvalidUserName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"invalidRandom_UserName_alp\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401 Unauthorized\",  () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"    const response = pm.response.json();\r",
													"pm.test(\"Is message as expected\", () => {\r",
													"       pm.expect(response.message).to.eql(\"error.http.401\");\r",
													"  });\r",
													"\r",
													"  // Expected title validation\r",
													"pm.test(\"Is title value as expected\", () => {\r",
													"       pm.expect(response.title).to.eql(\"Unauthorized\");\r",
													"  });\r",
													"\r",
													"  // verifies request doesn't return id_token property\r",
													"pm.test(\"Response body does not contain id_token property\", ()=> {\r",
													"    pm.expect(response).to.not.have.property(\"id_token\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"password\": \"{{password_alp}}\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"{{invalidRandom_UserName_alp}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}api/authenticate",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"authenticate"
											]
										}
									},
									"response": []
								},
								{
									"name": "jwtToken-Invalid_Pass",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"  //status code validation\r",
													"pm.test(\"Status code is 401 Unauthorized\",  () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													" const response = pm.response.json();\r",
													"//Error message validation\r",
													"pm.test(\"Is message as expected\", () => {\r",
													"          pm.expect(response.message).to.eql(\"error.http.401\");\r",
													"  });\r",
													"\r",
													"// Expected title validation\r",
													"pm.test(\"Is title value as expected\", () => {\r",
													"       pm.expect(response.title).to.eql(\"Unauthorized\");\r",
													"  });\r",
													"\r",
													"  // verifies request doesn't return id_token property\r",
													"pm.test(\"Response body does not contain id_token property\", ()=> {\r",
													"    pm.expect(response).to.not.have.property(\"id_token\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"invalidRandom_Password_alp\", pm.variables.replaceIn(\"{{$randomPassword}}\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"password\": \"{{invalidRandom_Password_alp}}\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"{{username_alp}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}api/authenticate",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"authenticate"
											]
										}
									},
									"response": []
								},
								{
									"name": "jwtToken-NoPass",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//status code validation\r",
													"pm.test(\"Status code is 400 Bad Request\",  () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"    const response = pm.response.json();\r",
													"//Error message validation\r",
													"pm.test(\"Is message as expected\", () => {\r",
													"       pm.expect(response.message).to.eql(\"error.validation\");\r",
													"  });\r",
													"\r",
													"//Response Body Error Field check test\r",
													"pm.test(\"Response Body has password in fieldErrors\", ()=> {\r",
													"    pm.expect(pm.response.text()).to.include(\"password\");\r",
													"});\r",
													"\r",
													"// verifies request doesn't return id_token property\r",
													"pm.test(\"Response body does not contain id_token property\", ()=> {\r",
													"    pm.expect(response).to.not.have.property(\"id_token\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"password\": \"\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"{{username_alp}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}api/authenticate",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"authenticate"
											]
										}
									},
									"response": []
								},
								{
									"name": "jwtToken-NoUsername",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//status code test\r",
													"pm.test(\"Status code is 400 Bad Request\",  () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"//Error message validation\r",
													"pm.test(\"Is message as expected\", () => {\r",
													"       pm.expect(response.message).to.eql(\"error.validation\");\r",
													"  });\r",
													"\r",
													"//Response Body Error Field check test\r",
													"pm.test(\"Response Body has username in fieldErrors\", ()=> {\r",
													"    pm.expect(pm.response.text()).to.include(\"username\");\r",
													"});\r",
													"\r",
													"// verifies request doesn't return id_token property\r",
													"pm.test(\"Response body does not contain id_token property\", ()=> {\r",
													"    pm.expect(response).to.not.have.property(\"id_token\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"password\": \"123456789\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}api/authenticate",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"authenticate"
											]
										}
									},
									"response": []
								},
								{
									"name": "jwtToken-NoBody",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400 Bad Request\",  () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"// verifies request doesn't return id_token property\r",
													"    const response = pm.response.json();\r",
													"pm.test(\"Response body does not contain id_token property\", ()=> {\r",
													"    pm.expect(response).to.not.have.property(\"id_token\");\r",
													"});\r",
													"\r",
													"//\r",
													"pm.test(\"Is message as expected\", () => {\r",
													"       pm.expect(response.message).to.eql(\"error.http.400\");\r",
													"  });\r",
													"\r",
													"pm.test(\"Is detail as expected\", () => {\r",
													"       pm.expect(response.detail).to.eql(\"Required request body is missing: public org.springframework.http.ResponseEntity<com.hospitalms.app.web.rest.UserJWTController$JWTToken> com.hospitalms.app.web.rest.UserJWTController.authorize(com.hospitalms.app.web.rest.vm.LoginVM)\");\r",
													"  });\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}api/authenticate",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"authenticate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "jwtToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"console.log(response.id_token);\r",
											"\r",
											"pm.environment.set(\"token_alp\", response.id_token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// verifies response body returns id_token property\r",
											"pm.test(\"Response body has id_token property\", () => {\r",
											"    pm.expect(response).to.have.property(\"id_token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"username_alp\",\"adminAsd\")\r",
											"pm.collectionVariables.set(\"password_alp\",\"123456789\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{password_alp}}\",\r\n  \"rememberMe\": true,\r\n  \"username\": \"{{username_alp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/authenticate",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Physcian",
					"item": [
						{
							"name": "Physcian - Negative Tests",
							"item": [
								{
									"name": "2a6_Physicians_NoAuth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    const response = pm.response.json();\r",
													"\r",
													"\r",
													"//status code validation\r",
													"pm.test(\"Status code is 401 Unauthorized\",  () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/problem+json'\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"// response body status test\r",
													"pm.test(\"Status should be 401\",() => {\r",
													"    pm.expect(response.status).to.eql(401)\r",
													"} );\r",
													"\r",
													"//message validation test\r",
													"pm.test(\"Is message as expected\", () => {\r",
													"       pm.expect(response.message).to.eql(\"error.http.401\");\r",
													"  });\r",
													"\r",
													"//Detail property test\r",
													"pm.test(\"Is detail property as expected\", () => {\r",
													"       pm.expect(response.detail).to.eql(\"Full authentication is required to access this resource\");\r",
													"  });\r",
													"\r",
													"\r",
													"\r",
													"// verifies request doesn't return id_token property\r",
													"pm.test(\"Response body does not contain phsician properties\", ()=> {\r",
													"    pm.expect(response).to.not.have.property(\"id\");\r",
													"    pm.expect(response).to.not.have.property(\"firstName\");\r",
													"    pm.expect(response).to.not.have.property(\"user\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}api/physicians",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"physicians"
											]
										}
									},
									"response": []
								},
								{
									"name": "2a7_SET_InvPAGE_queryParams_for_Physician",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
													"\r",
													"const invalid_Page_Params = \"-1,73,90,x,abc,*,1234567890123456\"; //WRITE YOUR INVALID PAGE PARAMS HERE\r",
													"\r",
													"const inv_pageParams_arr = invalid_Page_Params.split (\",\"); // virgülü ayırıcı olarak kullan\r",
													"\r",
													"pm.variables.set(\"inv_pageParams1\",inv_pageParams_arr) // to call and use params from next request, created a variable\r",
													"\r",
													"console.log(\"Invalid page params ready to use : \" ,pm.variables.get(\"inv_pageParams\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"!!!! - INVALID PAGE PARAMS ARE READY TO USE - !!!!\", ()=> {\r",
													"    pm.expect(pm.variables.get(\"inv_pageParams1\").length).to.be.above(0);\r",
													"}); //COLLECTION RUN VEYA MONITOR YAPILDIGINDA BILDIRIM DUSMESI ICIN\r",
													"\r",
													"pm.test(\"invalid page params \",()=>{\r",
													"    console.log(\"Invalid page params set as \", pm.variables.get(\"inv_pageParams1\"))\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r\n// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}api/physicians?page=1",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"physicians"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "1",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "2a7(M)_InvPAGE_queryParams_for_Physician",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"//!! THIS REQUEST GETS THE DATA FROM \"2a7_SET_INVALID_PAGE_PARAMS_TO_USE\" REQUEST\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req IN THE \"\"2a7_SET_INVALID_PAGE_PARAMS_TO_USE\"\"\r",
													"\r",
													"const inv_pageParams = pm.variables.get(\"inv_pageParams1\")\r",
													"\r",
													"console.log(\"Multi Run Tests starts...Preparing invalid page params to verify...\")\r",
													"console.log(\"invalid page params are : \" , inv_pageParams)\r",
													"\r",
													"pm.variables.set('current_param',inv_pageParams.shift()) // take the first element in array and return it. - arraydeki ilk elementi alır ve bir arraye atar.  'current_param' arrayini sonra cagirarak kullanıyoruz.\r",
													"console.log(\"current_param : \"+ pm.variables.get(\"current_param\"));\r",
													"\r",
													"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
													"if(Array.isArray(inv_pageParams) && inv_pageParams.length > 0){\r",
													"postman.setNextRequest(\"2a7(M)_InvPAGE_queryParams_for_Physician\") // defining next request to run again with different physician IDs - farklı physician IDsi ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
													"} else{\r",
													"postman.setNextRequest(null);   // stop after executing current request -\r",
													"postman.setNextRequest(\"2a8_SET_invSIZE_queryParams_for_Physician\") \r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*\r",
													"// verifies request doesn't return id_token property\r",
													"    const response = pm.response.json();\r",
													"pm.test(\"Response body does not contain id_token property\", ()=> {\r",
													"    pm.expect(response).to.not.have.property(\"id\");\r",
													"    pm.expect(response).to.not.have.property(\"user\");\r",
													"    pm.expect(response).to.not.have.property(\"firstName\");\r",
													"});\r",
													"*/\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code should not be 200\", function () {\r",
													"  pm.response.not.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/problem+json'\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"//property -id- validation test / id field'inin olmadığını test eder.\r",
													"pm.test('Response body should not have -user- property. There should be no response body', () => {\r",
													"    pm.expect(pm.response[0]).to.have.property('user');\r",
													"})\r",
													"\r",
													"// Request URL contains \"page\" query Test - Request URL page query'si içeriyor mu\r",
													"pm.test(\"Page parameter is correctly set in the request URL\", () => {\r",
													"    pm.expect(pm.request.url.query.get(\"page\")).to.exist;\r",
													"});\r",
													"\r",
													"// Page Query parameter sadece sayılardan oluşmalı\r",
													"pm.test (\"Page Query parameter should be digit/number\", ()=>  {\r",
													"  // Page Query parameter'ın sayı olup olmadığını kontrol edelim\r",
													"  pm.expect (isNaN (pm.request.url.query.get(\"page\"))).to.be.false;\r",
													"  //isNaN-> değerin NOT A NUUMBER yani \"sayı Değil\" olup olmadığını kontrol eder. \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}api/physicians?page={{current_param}}",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"physicians"
											],
											"query": [
												{
													"key": "page",
													"value": "{{current_param}}"
												},
												{
													"key": "size",
													"value": "1",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "2a8_SET_invSIZE_queryParams_for_Physician",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
													"\r",
													"let invalid_Size_Params = \"-1,0,21,xbc,(,101,454546564\"; //WRITE YOUR INVALID PAGE PARAMS HERE\r",
													"\r",
													"const inv_sizeParams_arr = invalid_Size_Params.split (\",\"); // virgülü ayırıcı olarak kullan\r",
													"\r",
													"pm.variables.set(\"inv_sizeParams\",inv_sizeParams_arr) // to call and use params from next request, created a variable\r",
													"\r",
													"console.log(\"Invalid size params ready to use : \" , pm.variables.get(\"inv_sizeParams\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
													"\r",
													"pm.test(\"!!!! - INVALID SIZE PARAMS ARE READY TO USE - !!!!\", ()=> {\r",
													"    pm.expect(pm.variables.get(\"inv_sizeParams\").length).to.be.above(0);\r",
													"}); //COLLECTION RUN VEYA MONITOR YAPILDIGINDA BILDIRIM DUSMESI ICIN\r",
													"\r",
													"pm.test(\"Invalid size params \",()=>{\r",
													"    console.log(\"Invalid size params set as \", pm.variables.get(\"inv_sizeParams\"))\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r\n// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}api/physicians?size=-1",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"physicians"
											],
											"query": [
												{
													"key": "size",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "2a8(M)_InvSIZE_queryParams_for_Physician",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"//!! THIS REQUEST GETS THE DATA FROM \"2a7_SET_INVALID_PAGE_PARAMS_TO_USE\" REQUEST\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req IN THE \"\"2a7_SET_INVALID_PAGE_PARAMS_TO_USE\"\"\r",
													"\r",
													"const inv_sizeParams = pm.variables.get(\"inv_sizeParams\")\r",
													"\r",
													"console.log(\"Multi Run Tests starts...Preparing invalid size params to verify...\")\r",
													"console.log(\"invalid size params are : \" , inv_sizeParams)\r",
													"\r",
													"pm.variables.set('current_size',inv_sizeParams.shift()) // take the first element in array and return it. - arraydeki ilk elementi alır ve bir arraye atar.  'current_param' arrayini sonra cagirarak kullanıyoruz.\r",
													"console.log(\"current_size : \"+ pm.variables.get(\"current_size\"));\r",
													"\r",
													"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
													"if(Array.isArray(inv_sizeParams) && inv_sizeParams.length > 0){\r",
													"postman.setNextRequest(\"2a8(M)_InvSIZE_queryParams_for_Physician\") // defining next request to run again with different physician IDs - farklı physician IDsi ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
													"} else{\r",
													"postman.setNextRequest(null);   // stop after executing current request -\r",
													"postman.setNextRequest(\"2c1_SET_InvSPECIALITY_data_for_physician\") \r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"const response = pm.response.json();\r",
													"const physicianIDarr = response.map(physician => physician.id) //create a container/variable for physicians ids\r",
													"\r",
													"// physicianID_length tum id sayısı\r",
													"console.log(\"Number of physician in response body  : \" , physicianIDarr.length)\r",
													"\r",
													"\r",
													"//status code test\r",
													"pm.test('Status code should not be 200 OK', () => {\r",
													"    pm.response.to.not.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response should be empty\", () => {\r",
													"  pm.expect(pm.response.text()).to.be.empty;\r",
													"});\r",
													"\r",
													" // Query parametresinin harf içerip içermediğinine bakalim\r",
													"var isNotNumber = isNaN(pm.request.url.query.get(\"size\"));\r",
													"    // Query parametresinin 0'dan küçük veya eşit olup olmadığını kontrol edelim\r",
													"var isNegative = pm.request.url.query.get(\"size\") <= 0;\r",
													"    // Eğer query parametresi 0'dan küçük veya harf içeriyorsa, status code 400 olmali\r",
													"if (isNotNumber || isNegative) {\r",
													"// Eğer size param 0 dan küçükse ve harf içeriyorsa\r",
													"    pm.test(\"Status code should not be 200 if size query param < 0 or it contain letters.\", () => {\r",
													"        pm.expect(response.to.not.have.status(200));\r",
													"        })\r",
													"    };\r",
													"\r",
													"if (pm.request.url.query.get(\"size\") > 89) {\r",
													"  pm.test(\"If size param is greater than 89, number of physician in response should be 89\", () => {\r",
													"    pm.expect(physicianIDarr.length).to.equal(89);\r",
													"  });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}api/physicians?size={{current_size}}",
											"host": [
												"{{QAT05_base_url}}api"
											],
											"path": [
												"physicians"
											],
											"query": [
												{
													"key": "size",
													"value": "{{current_size}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "2c1_SET_InvSPECIALITY_data_for_physician",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
													"\r",
													"pm.test(\"!!!! - INVALID SPECIALTY DATA ARE READY TO USE - !!!!\", ()=> {\r",
													"    pm.expect(pm.variables.get(\"inv_Speciality\").length).to.be.above(0);\r",
													"}); //COLLECTION RUN VEYA MONITOR YAPILDIGINDA BILDIRIM DUSMESI ICIN\r",
													"\r",
													"pm.test(\"Invalid Speciality Data \",()=>{\r",
													"    console.log(\"Invalid Speciality Data set as \", pm.variables.get(\"inv_Speciality\"))\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
													"\r",
													"const invalid_Speciality = \"OBSTETRIC,, ,surgery,abc,*,123456\"; //WRITE YOUR INVALID PAGE PARAMS HERE\r",
													"\r",
													"const invalid_SpecialityArr = invalid_Speciality.split (\",\"); // virgülü ayırıcı olarak kullan\r",
													"\r",
													"pm.variables.set(\"inv_Speciality\",invalid_SpecialityArr) // to call and use params from next request, created a variable\r",
													"\r",
													"console.log(\"Invalid Speciality Data ready to use : \" ,pm.variables.get(\"inv_Speciality\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"petros.preston@farmoaks.com\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"OPHTHALMOLOGY\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}/api/physicians",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"physicians"
											]
										}
									},
									"response": []
								},
								{
									"name": "2c1(M)_InvSPECIALITY_data_for_physician",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"\r",
													"// status code test\r",
													"pm.test(\"Status code is 400 Bad Request\",  ()=> {\r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has the required fields\", ()=> {\r",
													"    pm.expect(response).to.have.property('type');\r",
													"    pm.expect(response).to.have.property('title');\r",
													"    pm.expect(response).to.have.property('status');\r",
													"    pm.expect(response).to.have.property('detail');\r",
													"    pm.expect(response).to.have.property('path');\r",
													"    pm.expect(response).to.have.property('message');\r",
													"});\r",
													"\r",
													"pm.test('Is the detail in error response body as expected', () => {\r",
													"    pm.expect(response.detail).to.include('Cannot deserialize value of type');\r",
													"})\r",
													"\r",
													"pm.test('Is message as expected', () => {\r",
													"    pm.expect(response.message).to.eql('error.http.400');\r",
													"})\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"//!! THIS REQUEST GETS THE DATA FROM \"2a7_SET_INVALID_PAGE_PARAMS_TO_USE\" REQUEST\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req IN THE \"\"2a7_SET_INVALID_PAGE_PARAMS_TO_USE\"\"\r",
													"\r",
													"const inv_Specialities = pm.variables.get(\"inv_Speciality\")\r",
													"\r",
													"console.log(\"Multi Run Tests starts...Preparing invalid Speciality data to verify...\")\r",
													"console.log(\"invalid Speciality data are : \" , inv_Specialities)\r",
													"\r",
													"pm.variables.set('current_Speciality',inv_Specialities.shift()) // take the first element in array and return it. - arraydeki ilk elementi alır ve bir arraye atar.  'current_param' arrayini sonra cagirarak kullanıyoruz.\r",
													"console.log(\"current_Speciality : \"+ pm.variables.get(\"current_Speciality\"));\r",
													"\r",
													"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
													"if(Array.isArray(inv_Specialities) && inv_Specialities.length > 0){\r",
													"postman.setNextRequest(\"2c1(M)_InvSPECIALITY_data_for_physician\") // defining next request to run again with different speciality - farklı speciality ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
													"} else{\r",
													"postman.setNextRequest(null);   // stop after executing current request -\r",
													"postman.setNextRequest(\"2c2_SET_InvADRESS_data_for_Physician\") \r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"petros.preston@farmoaks.com\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"{{current_Speciality}}\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}/api/physicians",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"physicians"
											]
										}
									},
									"response": []
								},
								{
									"name": "2c2_SET_InvADRESS_data_for_Physician",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID ADRESS DATA\r",
													"// !!!!!!!! YOU CAN SET INVALID ADRESS DATA FROM Pre-Req\r",
													"\r",
													"pm.test(\"!!!! - INVALID ADRESS DATA ARE READY TO USE - !!!!\", ()=> {\r",
													"    pm.expect(pm.variables.get(\"inv_Adress\").length).to.be.above(0);\r",
													"}); //COLLECTION RUN VEYA MONITOR YAPILDIGINDA BILDIRIM DUSMESI ICIN\r",
													"\r",
													"pm.test(\"Invalid Adress Data \",()=>{\r",
													"    console.log(\"Invalid Adress Data set as \", pm.variables.get(\"inv_Adress\"))\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
													"\r",
													"const invalid_Adress = \"123,%%%%++++$$$$$,, \"; //WRITE YOUR INVALID ADRESS PARAMS HERE\r",
													"\r",
													"const invalid_AdressArr = invalid_Adress.split (\",\"); // virgülü ayırıcı olarak kullan\r",
													"\r",
													"pm.variables.set(\"inv_Adress\",invalid_AdressArr) // to call and use params from next request, created a variable\r",
													"\r",
													"console.log(\"Invalid Adress Data ready to use : \" ,pm.variables.get(\"inv_Adress\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"{{inv_Adress}}\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"petros.preston@farmoaks.com\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"SURGERY\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}/api/physicians",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"physicians"
											]
										}
									},
									"response": []
								},
								{
									"name": "2c2(M)_InvADRESS_data_for_Physician",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"// status code test\r",
													"pm.test(\"Status code is 400 Bad Request\",  ()=> {\r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has the required fields\", ()=> {\r",
													"    pm.expect(response).to.have.property('type');\r",
													"    pm.expect(response).to.have.property('title');\r",
													"    pm.expect(response).to.have.property('status');\r",
													"    pm.expect(response).to.have.property('detail');\r",
													"    pm.expect(response).to.have.property('path');\r",
													"    pm.expect(response).to.have.property('message');\r",
													"});\r",
													"\r",
													"/*\r",
													"pm.test('Is the detail in error response body as expected', () => {\r",
													"    pm.expect(response.detail).to.include('Cannot deserialize value of type');\r",
													"})\r",
													"*/\r",
													"\r",
													"pm.test('Is message as expected', () => {\r",
													"    pm.expect(response.message).to.eql('error.http.400');\r",
													"})\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"//!! THIS REQUEST GETS THE DATA FROM PREVIOUS REQUEST\r",
													"// !!!!!!!! YOU CAN SET INVALID ADRESS DATA FROM Pre-Req IN THE PREVIOUS REQ.\r",
													"\r",
													"const inv_AdressArr = pm.variables.get(\"inv_Adress\")\r",
													"\r",
													"console.log(\"Multi Run Tests starts...Preparing invalid Adress data to verify...\")\r",
													"console.log(\"invalid Adress data are : \" , inv_AdressArr)\r",
													"\r",
													"pm.variables.set('current_Adress',inv_AdressArr.shift()) // take the first element in array and return it. - arraydeki ilk elementi alır ve bir arraye atar.  'current_param' arrayini sonra cagirarak kullanıyoruz.\r",
													"console.log(\"current_Adress is : \"+ pm.variables.get(\"current_Adress\"));\r",
													"\r",
													"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
													"if(Array.isArray(inv_AdressArr) && inv_AdressArr.length > 0){\r",
													"postman.setNextRequest(\"2c2(M)_InvADRESS_data_for_Physician\") // defining next request to run again with different adress - farklı adress ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
													"} else{\r",
													"postman.setNextRequest(null);   // stop after executing current request -\r",
													"postman.setNextRequest(\"2c3_SET_invEMAIL_data_for_Physician\") \r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"{{current_Adress}}\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"petros.preston@farmoaks.com\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"SURGERY\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}/api/physicians",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"physicians"
											]
										}
									},
									"response": []
								},
								{
									"name": "2c3_SET_invEMAIL_data_for_Physician",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID EMAIL ADRESS DATA\r",
													"// !!!!!!!! YOU CAN SET INVALID EMAIL ADRESS DATA FROM Pre-Req\r",
													"\r",
													"pm.test(\"!!!! - INVALID EMAIL DATA ARE READY TO USE - !!!!\", ()=> {\r",
													"    pm.expect(pm.variables.get(\"invalid_Emails\").length).to.be.above(0);\r",
													"}); //COLLECTION RUN VEYA MONITOR YAPILDIGINDA BILDIRIM DUSMESI ICIN\r",
													"\r",
													"pm.test(\"Invalid Email Data \",()=>{\r",
													"    console.log(\"Invalid Email Data set as \", pm.variables.get(\"invalid_Emails\"))\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID EMAIL ADRESS DATA\r",
													"// !!!!!!!! YOU CAN SET INVALID EMAIL ADRESS DATA FROM Pre-Req\r",
													"\r",
													"\r",
													"const invalid_Emails = \" ,,asd123@abccom,asd123@,.@abc.c,asd123abc\"; //WRITE YOUR INVALID ADRESS PARAMS HERE\r",
													"\r",
													"const invalid_EmailsArr = invalid_Emails.split (\",\"); // virgülü ayırıcı olarak kullan\r",
													"\r",
													"pm.variables.set(\"invalid_Emails\",invalid_EmailsArr) // to call and use params from next request, created a variable\r",
													"\r",
													"console.log(\"Invalid Email Adress Data ready to use : \" ,pm.variables.get(\"invalid_Emails\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"' '\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"petros.preston@farmoaks.com\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"SURGERY\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}/api/physicians",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"physicians"
											]
										}
									},
									"response": []
								},
								{
									"name": "2c3(M)_InvEMAIL_data_for_Physician",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"console.log(\"kullanılan email datası  \", pm.variables.get(\"current_Email\"))\r",
													"// status code test\r",
													"pm.test(\"Status code is 400 Bad Request --> STATUS CODE TEKLI CALİSTIRIRKEN 200 DONUYOR TOPLU CALISMADA 400 DONUYOR GORUNUYOR!!!!!!!!!!!\",  ()=> {\r",
													"    pm.response.to.have.status(400); \r",
													"    console.log(pm.variables.get(\"current_Email\"))\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has the required fields\", ()=> {\r",
													"    pm.expect(response).to.have.property('type');\r",
													"    pm.expect(response).to.have.property('title');\r",
													"    pm.expect(response).to.have.property('status');\r",
													"    pm.expect(response).to.have.property('detail');\r",
													"    pm.expect(response).to.have.property('path');\r",
													"    pm.expect(response).to.have.property('message');\r",
													"});\r",
													"\r",
													"/*\r",
													"pm.test('Is the detail in error response body as expected', () => {\r",
													"    pm.expect(response.detail).to.include('Cannot deserialize value of type');\r",
													"})\r",
													"*/\r",
													"\r",
													"pm.test('Is message as expected', () => {\r",
													"    pm.expect(response.message).to.eql('error.http.400');\r",
													"})\r",
													"\r",
													"//Response payload email field updated verification test\r",
													"pm.test(\"Response Payload E-Mail field should be same with updated email adress \",()=> {\r",
													"    pm.expect(response.email.toString()).to.equal(pm.variables.get(\"current_Email\"));\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"//!! THIS REQUEST GETS THE DATA FROM PREVIOUS REQUEST\r",
													"// !!!!!!!! YOU CAN SET INVALID ADRESS DATA FROM Pre-Req IN THE PREVIOUS REQ.\r",
													"\r",
													"const invalid_Emails = pm.variables.get(\"invalid_Emails\")\r",
													"\r",
													"console.log(\"Multi Run Tests starts...Preparing invalid Email data to verify...\")\r",
													"console.log(\"invalid Email data are : \" , invalid_Emails)\r",
													"\r",
													"pm.variables.set('current_Email',invalid_Emails.shift()) // take the first element in array and return it. - arraydeki ilk elementi alır ve bir arraye atar.  'current_param' arrayini sonra cagirarak kullanıyoruz.\r",
													"console.log(\"current_Email is : \"+ pm.variables.get(\"current_Email\"));\r",
													"\r",
													"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
													"if(Array.isArray(invalid_Emails) && invalid_Emails.length > 0){\r",
													"postman.setNextRequest(\"2c3(M)_InvEMAIL_data_for_Physician\") // defining next request to run again with different adress - farklı adress ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
													"} else{\r",
													"postman.setNextRequest(null);   // stop after executing current request -\r",
													"postman.setNextRequest(\"2a1_AllPhysicians_NoParams_filteringRandomID\") \r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"' '\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": {{current_Email}},\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"SURGERY\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}/api/physicians",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"physicians"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "2a1_AllPhysicians_NoParams_filteringRandomID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"\r",
											"const physiciansIdList = response.map(physicians => physicians.id) //create a container/variable for physicians ids\r",
											"console.log(\"physiciansIdList = \", physiciansIdList)\r",
											"\r",
											"pm.variables.set(\"physicianID_length\", physiciansIdList.length) //to use in other requests\r",
											"console.log(\"all physician count in DB  : \" , physiciansIdList.length)\r",
											"\r",
											"// Get an active physicians id to update in the next requests(For put request)\r",
											"const activePhysiciansList = response.filter((physicians) => physicians.user.activated === true); // filtering the active physicians\r",
											"console.log(\"active physicians = \", activePhysiciansList)\r",
											"\r",
											"const physician = activePhysiciansList[Math.floor(Math.random()*activePhysiciansList.length)]; // randomly select a physician \r",
											"console.log(\"randomly selected physician =\" , physician)\r",
											"\r",
											"if(physician){ //if physician is true create a collection variable for random selected physician id\r",
											"    pm.collectionVariables.set(\"randomSelected_physicianID_alp\",physician.id)\r",
											"    console.log(\"random selected physician id to be updated later =\", physician.id)\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\",  ()=> {\r",
											"    pm.response.to.have.status(200); //status code validation test\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is 'application/json'\", ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");// Content-Type Test\r",
											"});\r",
											"\r",
											"// Each physician body has id property Test\r",
											"pm.test(\"Each physician body has id property\", ()=> {\r",
											"    pm.expect(response).to.be.an('array'); // validates the response whether an array or not\r",
											"  for (let i = 0; i < response.length; i++) { \r",
											"    pm.expect(response[i]).to.have.property('id'); // validates each physician body has id property\r",
											"  }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response Body has the physicians\", () => {\r",
											"       pm.expect(physiciansIdList.length > 0).to.eql(true); //physician ids validation test / physicians' ids number are more than 0\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//if physician can not be found and we dont have any random id, lets create some test\r",
											"pm.test(\"Active Physicians found and had random id \", () => {\r",
											"    pm.expect(physician).to.be.an(\"object\"); // Is physician an object\r",
											"    pm.expect(physician.user.activated).to.eql(true); // same with next line- \r",
											"    // Is the physician active\r",
											"    pm.expect(physician.user.activated).to.be.true; // Is the physician active\r",
											"    pm.expect(physician).to.have.property('id'); // Does the physician have property id\r",
											"  \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "2a2_physicians_page_size_QueryParams",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const response = pm.response.json();\r",
											"const physicianIdList = response.map(physicians => physicians.id) \r",
											"pm.variables.set(\"physicianIdList_Request1\",physicianIdList); //set a postman variable to use in the next request. We use local variable and it will disappear after the execution. This variable only works in collection runner - sonraki requestte kullanmak için bir local variable tanımla. bu variable request calistiktan sonra görünmez. sadece collection runner / folder runner'da işe yarar.\r",
											"\r",
											"//status code test\r",
											"pm.test(\"Status code is 200\", ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"//size param test for this request - bu request için size testi\r",
											"pm.test(\"Is size param as expected\", () => {\r",
											"       pm.expect(physicianIdList.length).to.eql(pm.variables.get(\"size_param\"));\r",
											"  });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// SET THE page PARAM FROM HERE - page parametresini buradan belirleyin\r",
											"pm.variables.set(\"page_param\",1) \r",
											"\r",
											"// SET THE size PARAM FROM HERE - size parametresini buradan belirleyin\r",
											"pm.variables.set(\"size_param\",10) "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians?page={{page_param}}&size={{size_param}}",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									],
									"query": [
										{
											"key": "page",
											"value": "{{page_param}}"
										},
										{
											"key": "size",
											"value": "{{size_param}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2a3_physicians_page_size_params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const response = pm.response.json();\r",
											"const physicianIdList = response.map(physicians => physicians.id) \r",
											"pm.variables.set(\"physicianIdList_Request2\",physicianIdList); //set a postman variable to use in the next request. We use local variable and it will disappear after the execution. This variable only works in collection runner - sonraki requestte kullanmak için bir local variable tanımla. bu variable request calistiktan sonra görünmez. sadece collection runner / folder runner'da işe yarar.\r",
											"\r",
											"//status code test\r",
											"pm.test(\"Status code is 200\", ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"//size param test for this request - bu request için size testi\r",
											"pm.test(\"Is size param as expected\", () => {\r",
											"       pm.expect(physicianIdList.length).to.eql(pm.variables.get(\"size_param\"));\r",
											"  });\r",
											"\r",
											"//size param test for this request - bu request için size testi\r",
											"pm.test(\"Page param test\", () => {\r",
											"       pm.expect(pm.variables.get(\"physicianIdList_Request1\")).to.not.eql(pm.variables.get(\"physicianIdList_Request2\"));\r",
											"  });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// SET THE page PARAM FROM HERE - page parametresini buradan belirleyin\r",
											"pm.variables.set(\"page_param\",2) \r",
											"\r",
											"// SET THE size PARAM FROM HERE - size parametresini buradan belirleyin\r",
											"pm.variables.set(\"size_param\",20) "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians?page={{page_param}}&size={{size_param}}",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									],
									"query": [
										{
											"key": "page",
											"value": "{{page_param}}"
										},
										{
											"key": "size",
											"value": "{{size_param}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2a4_physicians_sort(asc)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"const physicianIdList = response.map(physicians => physicians.id)// assignning physician ids to a container\r",
											"console.log(\"physicianIdList unordered : \" , physicianIdList)\r",
											"console.log(\"all physician count : \" , physicianIdList)\r",
											"\r",
											"const ascSortedIdList = physicianIdList.sort(function(a, b){return a - b}); //sort physician ids ascending / physician idlerini artan siralama\r",
											"console.log(\"ascending sorted IDs : \",ascSortedIdList)\r",
											"\r",
											"\r",
											"//sort param ascending id test \r",
											"pm.test(\"Page param test\", () => {\r",
											"       pm.expect(physicianIdList).to.eql(ascSortedIdList);\r",
											"       pm.expect(physicianIdList.length).to.eql(ascSortedIdList.length)\r",
											"  });\r",
											"\r",
											"//status code test\r",
											"pm.test(\"Status code is 200\", ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians?sort=id,asc",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									],
									"query": [
										{
											"key": "sort",
											"value": "id,asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2a5_physicians_sort(desc)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"const physicianIdList = response.map(physicians => physicians.id)// assigning physician ids to a container\r",
											"console.log(\"physicianIdList unordered : \" , physicianIdList)\r",
											"\r",
											"const descSortedIdList = physicianIdList.sort(function(a, b){return b - a}); //sort physician ids ascending / physicianidlerini artan siralama\r",
											"console.log(\"descending sorted IDs : \",descSortedIdList)\r",
											"\r",
											"\r",
											"\r",
											"//sort param ascending id test \r",
											"pm.test(\"Page param test\", () => {\r",
											"       pm.expect(physicianIdList).to.eql(descSortedIdList);\r",
											"       pm.expect(physicianIdList.length).to.eql(descSortedIdList.length)\r",
											"  });\r",
											"\r",
											"\r",
											"//status code test\r",
											"pm.test(\"Status code is 200\", ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians?sort=id,desc",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									],
									"query": [
										{
											"key": "sort",
											"value": "id,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2b_EXTRACT_5_ID_from_Physician",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											" // RUN FROM FOLDER or COLLECTION RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIRIN\r",
											"const response = pm.response.json();\r",
											"console.log(\"Extracting the first 5 physician id and assigning to an array\")\r",
											"    // // container for 5 physician id and extracting the first 5 ids - 5 doktor id'si için container ve ilk 5 idleri alma\r",
											"    const idListFiveElements = response.slice(0,5).map(physicians => physicians.id) \r",
											"  \r",
											"  /*\r",
											"    //  OR YOU CAN EXTRACT IDS WITH A LOOP\r",
											"    const idListFiveElements = []; // \r",
											"    for (let i = 0; i < 5; i++) {\r",
											"        idListFiveElements.push(response[i].id); // adding the first 5 id to array - ilk 5 id arraye ekle\r",
											"  }; \r",
											"  */\r",
											"  \r",
											"    console.log(\"idListFiveElements :\" ,idListFiveElements)\r",
											"\r",
											"// creating variable to colleciton to reuse - yeniden kullanım için collection variable olustur\r",
											"pm.variables.set(\"idListFiveElements_alp\",idListFiveElements);  //--a-------\r",
											"\r",
											"pm.test(\"!!!! - 5 PHYSICIAN ID ARE READY TO USE - !!!!!\", ()=> {\r",
											"    pm.expect(pm.variables.get(\"idListFiveElements_alp\").length).to.be.above(0);\r",
											"}); //COLLECTION RUN VEYA MONITOR YAPILDIGINDA BILDIRIM DUSMESI ICIN\r",
											"\r",
											"postman.setNextRequest(\"2b(M)_physicians_Verify_5_IDs_multiRun\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "// RUN FROM FOLDER or COLLECTION RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIRIN",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "2b(M)_physicians_Verify_5_IDs_multiRun",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
											"\r",
											"const physicianIds = pm.variables.get(\"idListFiveElements_alp\") // define an array to get the data - data için array tanımla\r",
											"console.log(\"Multi Run Tests starts... Preparing physician ids to verify...\")\r",
											"console.log(\"Physician IDs are \" , physicianIds)\r",
											"\r",
											"pm.variables.set('current_physicianID_alp',physicianIds.shift()) // take the first element in array and return it. - arraydeki ilk elementi alır ve onu döndürür.\r",
											"console.log(\"current physician ID = \"+pm.variables.get(\"current_physicianID_alp\"));\r",
											"\r",
											"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
											"if(Array.isArray(physicianIds) && physicianIds.length > 0){\r",
											"postman.setNextRequest(\"2b(M)_physicians_Verify_5_IDs_multiRun\") // defining next request to run again with different physician IDs - farklı physician IDsi ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
											"} else{\r",
											"postman.setNextRequest(null);   // stop after executing current request -\r",
											"postman.setNextRequest(\"2c1_Physicians_Speciality\")\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
											"\r",
											"//status code test\r",
											"pm.test('Status code is 200 OK', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//property -user- validation test\r",
											"pm.test('Response body has user property', () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('user');\r",
											"})\r",
											"\r",
											"//id validation test\r",
											"pm.test('Is the id value as expected', () => {\r",
											"    pm.expect(pm.response.json().id).to.eql(pm.variables.get('current_physicianID_alp'));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians/{{current_physicianID_alp}}",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians",
										"{{current_physicianID_alp}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2c1_Physicians_Speciality",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response= pm.response.json()\r",
											"\r",
											"console.log(\"speciality field should be :\" , pm.collectionVariables.get(\"randomSpeciality_alp\"))\r",
											"console.log(\"speciality field in response :\" , response.speciality)\r",
											"\r",
											"// status code test\r",
											"pm.test(\"Status code is 200\",  ()=> {\r",
											"    pm.response.to.have.status(200); //status code validation test\r",
											"});\r",
											"\r",
											"//Content-Type header test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");// Content-Type Test\r",
											"});\r",
											"\r",
											"//Response payload speciality field updated verification test\r",
											"pm.test(\"Response Payload speciality field updated \",()=> {\r",
											"    pm.expect(response.speciality.toString()).to.equal(pm.collectionVariables.get(\"randomSpeciality_alp\"));\r",
											"})\r",
											"\r",
											"// Physician has speciality property/field Test\r",
											"pm.test(\"Physician should have speciality property\", ()=> {\r",
											"      pm.expect(response).to.have.property('speciality'); // validates each physician body has speciality property\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"2c2_Physicians_Address\")\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// Seçilebilen tüm speciality ozellikleri ile bir array oluşturalım\r",
											"var specialities = [\"ALLERGY_IMMUNOLOGY\", \"ANESTHESIOLOGY\", \"DERMATOLOGY\", \"DIAGNOSTIC_RADIOLOGY\", \"EMERGENCY_MEDICINE\", \"FAMILY_MEDICINE\", \"INTERNAL_MEDICINE\", \"MEDICAL_GENETICS\", \"NEUROLOGY\", \"NUCLEAR_MEDICINE\", \"OBSTETRICS_GYNECOLOGY\", \"OPHTHALMOLOGY\", \"PATHOLOGY\", \"PEDIATRICS\", \"PHYSICALMEDICINE_REHABILITATION\", \"PREVENTIVE_MEDICINE\", \"PSYCHIATRY\", \"RADIATION_ONCOLOGY\", \"SURGERY\", \"UROLOGY\"];\r",
											"console.log(\"specialities : \", specialities)\r",
											"\r",
											"\r",
											"// Arrayden rastgele bir index seçelim\r",
											"var randomIndex = Math.floor(Math.random() * specialities.length);\r",
											"\r",
											"// Arrayden rastgele seçilen elemanı alalım\r",
											"var randomSpeciality = specialities[randomIndex];\r",
											"\r",
											"// Rastgele seçilen elemanı bir environment variable'a atayalım\r",
											"pm.collectionVariables.set(\"randomSpeciality_alp\", randomSpeciality);\r",
											"\r",
											"// Sonucu konsola yazdıralım\r",
											"console.log(\"Random selected speciality field data : \" + randomSpeciality);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"petros.preston@farmoaks.com\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"{{randomSpeciality_alp}}\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "2c2_Physicians_Address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response= pm.response.json()\r",
											"\r",
											"console.log(\"Adress field should be :\" , pm.variables.get(\"randomAdress_alp\"))\r",
											"console.log(\"Adress field in response :\" , response.adress)\r",
											"\r",
											"// status code test\r",
											"pm.test(\"Status code is 200\",  ()=> {\r",
											"    pm.response.to.have.status(200); //status code validation test\r",
											"});\r",
											"\r",
											"//Content-Type header test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");// Content-Type Test\r",
											"});\r",
											"\r",
											"//Response payload speciality field updated verification test\r",
											"pm.test(\"Response Payload adress field updated \",()=> {\r",
											"    pm.expect(response.adress.toString()).to.equal(pm.collectionVariables.get(\"randomAdress_alp\"));\r",
											"})\r",
											"\r",
											"// Physician has speciality property/field Test\r",
											"pm.test(\"Physician should have adress property\", ()=> {\r",
											"      pm.expect(response).to.have.property('adress'); // validates each physician body has speciality property\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"2c3_Physicians_Email\")\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// Seçilebilen tüm speciality ozellikleri ile bir array oluşturalım\r",
											"var adresses = [\"İleride Alparslanın eivnin orada\", \"Alparslan'ın evinin ordan solda\", \"Alparslan mah. Alparslan apt. Alparslan:)\", \"Adress Alparslan\", \"Alparslan sehrinde Alparslan Kim:)\" ];\r",
											"console.log(\"adresses : \", adresses)\r",
											"\r",
											"\r",
											"// Arrayden rastgele bir index seçelim\r",
											"var randomIndex = Math.floor(Math.random() * adresses.length);\r",
											"\r",
											"// Arrayden rastgele seçilen elemanı alalım\r",
											"var randomAdress = adresses[randomIndex];\r",
											"\r",
											"// Rastgele seçilen elemanı bir environment variable'a atayalım\r",
											"pm.collectionVariables.set(\"randomAdress_alp\", randomAdress);\r",
											"\r",
											"// Sonucu konsola yazdıralım\r",
											"console.log(\"Random selected Adress field data : \" + randomAdress);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"{{randomAdress_alp}}\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"petros.preston@farmoaks.com\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"{{randomSpeciality_alp}}\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "2c3_Physicians_Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response= pm.response.json()\r",
											"\r",
											"console.log(\"E-mail field should be :\" , pm.collectionVariables.get(\"randomEmail_alp\"))\r",
											"console.log(\"E-mail field in response :\" , response.user.email)\r",
											"\r",
											"// status code test\r",
											"pm.test(\"Status code is 200\",  ()=> {\r",
											"    pm.response.to.have.status(200); //status code validation test\r",
											"});\r",
											"\r",
											"//Content-Type header test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");// Content-Type Test\r",
											"});\r",
											"\r",
											"//Response payload email field updated verification test\r",
											"pm.test(\"Response Payload E-Mail field updated \",()=> {\r",
											"    pm.expect(response.email.toString()).to.equal(pm.collectionVariables.get(\"randomEmail_alp\"));\r",
											"})\r",
											"\r",
											"// Physician has email property/field Test\r",
											"pm.test(\"Physician should have email property\", ()=> {\r",
											"      pm.expect(response.user).to.have.property('email'); // validates each physician body has email property\r",
											"});\r",
											"\r",
											"//id ile physician sorgulatıp ilgili fieldlar değişmişmi kontrol etmek için\r",
											"pm.variables.set(\"updatedID\",response.id)\r",
											"\r",
											"\r",
											"postman.setNextRequest(\"2c4_Physicians_Update_Check\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// 10 tane rastgele email adresi üretelim\r",
											"function generateEmails (num) {\r",
											"  var emails = []; //email için container\r",
											"  \r",
											"  for (var i = 0; i < num; i++) {\r",
											"    var name = Math.random().toString(36).substring(2, 10); //isim yapalim\r",
											"    var domain = Math.random().toString(36).substring(2, 6) + \".com\"; // domain olusturma\r",
											"    var email = \"alp_\" + name + \"@\" + domain; //email son hali\r",
											"    emails.push(email); // arraye ekleme\r",
											"  }\r",
											"  return emails;\r",
											"}\r",
											"\r",
											"var emails = generateEmails(10); //method call and getting 10 email.\r",
											"\r",
											"console.log(emails);\r",
											"\r",
											"\r",
											"// Arrayden rastgele bir index seçelim\r",
											"var randomIndex = Math.floor(Math.random() * emails.length);\r",
											"\r",
											"// Arrayden rastgele seçilen elemanı alalım\r",
											"var ramdomEmail = emails[randomIndex];\r",
											"\r",
											"// Rastgele seçilen elemanı bir environment variable'a atayalım\r",
											"pm.collectionVariables.set(\"randomEmail_alp\", ramdomEmail);\r",
											"\r",
											"// Sonucu konsola yazdıralım\r",
											"console.log(\"Random selected e-mail field data : \" + ramdomEmail);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"{{randomAdress_alp}}\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"{{randomEmail_alp}}\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"{{randomSpeciality_alp}}\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "2c4_Physicians_Update_Check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response= pm.response.json()\r",
											"\r",
											"// status code test\r",
											"pm.test(\"Status code is 200\",  ()=> {\r",
											"    pm.response.to.have.status(200); //status code validation test\r",
											"});\r",
											"\r",
											"//Content-Type header test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");// Content-Type Test\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//Response payload speciality field updated verification test\r",
											"console.log(\"response donen speciality\",response.speciality)\r",
											"console.log(\"random update edilen value\" , pm.collectionVariables.get(\"randomSpeciality_alp\"))\r",
											"\r",
											"pm.test(\"Response Payload speciality field updated \",()=> {\r",
											"    pm.expect(response.speciality.toString()).to.equal(pm.variables.get(\"randomSpeciality_alp\"));\r",
											"});\r",
											"\r",
											"////-----------------------------------------\r",
											"//Response payload adress field updated verification test\r",
											"pm.test(\"Response Payload adress field updated \",()=> {\r",
											"    pm.expect(response.adress.toString()).to.equal(pm.collectionVariables.get(\"randomAdress_alp\"));\r",
											"});\r",
											"\r",
											"//Response payload email field updated verification test\r",
											"pm.test(\"Response Payload E-Mail field updated \",()=> {\r",
											"    pm.expect(response.email.toString()).to.equal(pm.collectionVariables.get(\"randomEmail_alp\"));\r",
											"});\r",
											"\r",
											"//----------------\r",
											"// Physician has email property/field Test\r",
											"pm.test(\"Physician should have id property\", ()=> {\r",
											"      pm.expect(response).to.have.property('id'); // validates each physician body has id property\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"3a1_AllPatients_NoAuth\")\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians/91612",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians",
										"91612"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Patient",
					"item": [
						{
							"name": "Patient - Negative Tests",
							"item": [
								{
									"name": "3a1_AllPatients_NoAuth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"//status code 200 olmalı",
													"pm.test(\"Response status code is 40 Unauthorized\", () => {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"// Content-Type Test",
													"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");",
													"});",
													"",
													"//status code validation",
													"pm.test(\"Status code is 401 Unauthorized\",  () => {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"//Error message validation",
													"pm.test(\"Is message as expected\", () => {",
													"       pm.expect(response.message).to.eql(\"error.http.401\");",
													"  });",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{QAT05_base_url}}/api/patients",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"patients"
											]
										}
									},
									"response": []
								},
								{
									"name": "3a1_SET_InvPAGE_query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
													"\r",
													"const invalid_Page_Params = \"-1,73,90,x,abc,*,1234567890123456\"; //WRITE YOUR INVALID PAGE PARAMS HERE\r",
													"\r",
													"const inv_pageParams_arr = invalid_Page_Params.split (\",\"); // virgülü ayırıcı olarak kullan\r",
													"\r",
													"pm.variables.set(\"inv_pageParams\",inv_pageParams_arr) // to call and use params from next request, created a variable\r",
													"\r",
													"console.log(\"Invalid page params ready to use : \" ,pm.variables.get(\"inv_pageParams\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(\"!!!! - INVALID SIZE PARAMS ARE READY TO USE - !!!!\", ()=> {\r",
													"    pm.expect(pm.variables.get(\"inv_pageParams\").length).to.be.above(0);\r",
													"}); //COLLECTION RUN VEYA MONITOR YAPILDIGINDA BILDIRIM DUSMESI ICIN\r",
													"\r",
													"pm.test(\"invalid page params exist\",()=>{\r",
													"    console.log(\"Invalid page params set as \", pm.variables.get(\"inv_pageParams\"))\r",
													"})\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}/api/patients?page=-1",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"patients"
											],
											"query": [
												{
													"key": "page",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3a1(M)_InvPAGE_query_for_patients",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"//!! THIS REQUEST GETS THE DATA FROM \"2a7_SET_INVALID_PAGE_PARAMS_TO_USE\" REQUEST\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req IN THE \"\"2a7_SET_INVALID_PAGE_PARAMS_TO_USE\"\"\r",
													"\r",
													"const inv_pageParams = pm.variables.get(\"inv_pageParams\")\r",
													"\r",
													"console.log(\"Multi Run Tests starts...Preparing invalid PAGE params to verify...\")\r",
													"console.log(\"invalid size params are : \" , inv_pageParams)\r",
													"\r",
													"pm.variables.set('current_page_param',inv_pageParams.shift()) // take the first element in array and return it. - arraydeki ilk elementi alır ve bir arraye atar.  'current_param' arrayini sonra cagirarak kullanıyoruz.\r",
													"console.log(\"current_page_param : \"+ pm.variables.get(\"current_page_param\"));\r",
													"\r",
													"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
													"if(Array.isArray(inv_pageParams) && inv_pageParams.length > 0){\r",
													"postman.setNextRequest(\"3a1(M)_InvPAGE_query_for_patients\") // defining next request to run again with different physician IDs - farklı physician IDsi ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
													"} else{\r",
													"postman.setNextRequest(null);   // stop after executing current request -\r",
													"postman.setNextRequest(\"3a2_SET_InvSIZE_query_for_patients\") \r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"const response = pm.response.json();\r",
													"const patientsIdList = response.map(patients => patients.id) //create a container/variable for patients ids\r",
													"\r",
													"// physicianID_length tum id sayısı\r",
													"console.log(\"Number of patients in response body  : \" , patientsIdList.length)\r",
													"//status code test\r",
													"pm.test('Status code should not be 200 OK', () => {\r",
													"    pm.response.to.not.have.status(200);\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response is empty\", () => {\r",
													"  pm.expect(pm.response.text()).to.be.empty;\r",
													"});\r",
													"\r",
													"// Request URL contains \"page\" query Test - Request URL page query'si içeriyor mu\r",
													"pm.test(\"Page parameter is correctly set in the request URL\", () => {\r",
													"    pm.expect(pm.request.url.query.get(\"page\")).to.exist;\r",
													"});\r",
													"\r",
													" // Query parametresinin harf içerip içermediğinine bakalim\r",
													"    var isNotNumber = isNaN(pm.request.url.query.get(\"page\"));\r",
													"    // Query parametresinin 0'dan küçük olup olmadığını kontrol edelim\r",
													"    var isNegative = pm.request.url.query.get(\"page\") < 0;\r",
													"    // Eğer query parametresi 0'dan küçük veya harf içeriyorsa, status code 400 olmali\r",
													"    if (isNotNumber || isNegative) {\r",
													"    // Eğer size param 0 dan küçükse ve harf içeriyorsa\r",
													"    pm.test(\"Status code should not be 200 if size query param < 0 or it contain strings.\", () => {\r",
													"        pm.expect(response.to.not.have.status(200));\r",
													"        })\r",
													"    };\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}/api/patients?page={{current_page_param}}",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"patients"
											],
											"query": [
												{
													"key": "page",
													"value": "{{current_page_param}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3a2_SET_InvSIZE_query_for_patients",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
													"\r",
													"//max hasta sayısı 1712\r",
													"let invalid_Size_Params = \"-1,0,xbc,+\"; //WRITE YOUR INVALID SIZE PARAMS HERE\r",
													"\r",
													"const inv_sizeParams_arr = invalid_Size_Params.split (\",\"); // virgülü ayırıcı olarak kullan\r",
													"\r",
													"pm.variables.set(\"inv_sizeParams\",inv_sizeParams_arr) // to call and use params from next request, created a variable\r",
													"\r",
													"console.log(\"Invalid size params ready to use : \" , pm.variables.get(\"inv_sizeParams\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"// !!!!!!!! THIS REQUEST IS JUST TO CREATE INVALID PAGE PARAMS\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req\r",
													"\r",
													"pm.test(\"!!!! - INVALID SIZE PARAMS ARE READY TO USE - !!!!\", ()=> {\r",
													"    pm.expect(pm.variables.get(\"inv_sizeParams\").length).to.be.above(0);\r",
													"}); //COLLECTION RUN VEYA MONITOR YAPILDIGINDA BILDIRIM DUSMESI ICIN\r",
													"\r",
													"pm.test(\"Invalid size params\",()=>{\r",
													"    console.log(\"Invalid size params set as \", pm.variables.get(\"inv_sizeParams\"))\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}/api/patients?size=abv",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"patients"
											],
											"query": [
												{
													"key": "size",
													"value": "abv"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3a2(M)_InvSIZE_query_for_patients",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
													"//!! THIS REQUEST GETS THE DATA FROM PREVIOUS REQUEST\r",
													"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req IN THE \"\"2a7_SET_INVALID_PAGE_PARAMS_TO_USE\"\"\r",
													"\r",
													"const inv_sizeParams = pm.variables.get(\"inv_sizeParams\")\r",
													"\r",
													"console.log(\"Multi Run Tests starts...Preparing invalid SİZE params to verify...\")\r",
													"console.log(\"invalid size params are : \" , inv_sizeParams)\r",
													"\r",
													"pm.variables.set('current_size_param',inv_sizeParams.shift()) // take the first element in array and return it. - arraydeki ilk elementi alır ve bir arraye atar.  'current_param' arrayini sonra cagirarak kullanıyoruz.\r",
													"console.log(\"current_size_param : \"+ pm.variables.get(\"current_size_param\"));\r",
													"\r",
													"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
													"if(Array.isArray(inv_sizeParams) && inv_sizeParams.length > 0){\r",
													"postman.setNextRequest(\"3a2(M)_InvSIZE_query_for_patients\") // defining next request to run again with different physician IDs - farklı physician IDsi ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
													"} else{\r",
													"postman.setNextRequest(null);   // stop after executing current request -\r",
													"postman.setNextRequest(\"3a2_InvSIZE_query_for_patients\") \r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"const response = pm.response.json();\r",
													"const patientsIDlist = response.map(patients => patients.id) //create a container/variable for physicians ids\r",
													"\r",
													"// physicianID_length tum id sayısı\r",
													"console.log(\"Number of patients in response body  : \" , patientsIDlist.length)\r",
													"\r",
													"/*\r",
													"//status code test\r",
													"pm.test('Status code should not be 200 OK', () => {\r",
													"    pm.response.to.not.have.status(200);\r",
													"});\r",
													"*/\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response should be empty\", () => {\r",
													"  pm.expect(pm.response.text()).to.be.empty;\r",
													"});\r",
													"\r",
													"//the count of patients should be same with query parameter value\r",
													"pm.test(\"Number of patients should be same with query parameter value\", () => {\r",
													"    console.log(\"Value of size query parameter\", pm.request.url.query.get(\"size\"))\r",
													"    pm.expect(pm.variables.get(\"current_size_param\")).to.eql(physiciansIdList.length);\r",
													"});\r",
													"\r",
													" // Query parametresinin harf içerip içermediğinine bakalim\r",
													"var isNotNumber = isNaN(pm.request.url.query.get(\"size\"));\r",
													"    // Query parametresinin 0'dan küçük veya eşit olup olmadığını kontrol edelim\r",
													"var isNegative = pm.request.url.query.get(\"size\") <= 0;\r",
													"    // Eğer query parametresi 0'dan küçük veya harf içeriyorsa, status code 400 olmali\r",
													"if (isNotNumber || isNegative) {\r",
													"// Eğer size param 0 dan küçükse ve harf içeriyorsa\r",
													"    pm.test(\"Status code should not be 200 if size query param < 0 or it contain letters.\", () => {\r",
													"        pm.expect(response.to.not.have.status(200));\r",
													"        })\r",
													"    };\r",
													"\r",
													"if (pm.request.url.query.get(\"size\") > 1712) {\r",
													"  pm.test(\"If size param is greater than 1712, number of patients in response should be 1712\", () => {\r",
													"    pm.expect(physiciansIdList.length).to.equal(1712);\r",
													"  });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}/api/patients?size={{current_size_param}}",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"patients"
											],
											"query": [
												{
													"key": "size",
													"value": "{{current_size_param}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3a2_InvSIZE_query_for_patients",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"pm.variables.set(\"current_size_param\",12345678910)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"const response = pm.response.json();\r",
													"const patientsIDlist = response.map(patients => patients.id) //create a container/variable for physicians ids\r",
													"\r",
													"// physicianID_length tum id sayısı\r",
													"console.log(\"Number of patients in response body  : \" , patientsIDlist.length)\r",
													"console.log(\"Query parameter is :\" ,pm.variables.get(\"current_size_param\"))\r",
													"//status code test\r",
													"pm.test('Status code should not be 200 OK', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response should not be empty\", () => {\r",
													"  pm.expect(pm.response.text()).to.not.be.empty;\r",
													"});\r",
													"\r",
													"if (pm.request.url.query.get(\"size\") < 1712) {\r",
													"//the count of patients should be same with query parameter value\r",
													"pm.test(\"Number of patients should be same with query parameter value\", () => {\r",
													"    console.log(\"Value of size query parameter\", pm.request.url.query.get(\"size\"))\r",
													"    pm.expect(pm.variables.get(\"current_size_param\")).to.eql(physiciansIdList.length);\r",
													"})\r",
													"};\r",
													"\r",
													" // Query parametresinin harf içerip içermediğinine bakalim\r",
													"var isNotNumber = isNaN(pm.request.url.query.get(\"size\"));\r",
													"    // Query parametresinin 0'dan küçük olup olmadığını kontrol edelim\r",
													"var isNegative = pm.request.url.query.get(\"size\") < 0;\r",
													"    // Eğer query parametresi 0'dan küçük veya harf içeriyorsa, status code 400 olmali\r",
													"if (isNotNumber || isNegative) {\r",
													"// Eğer size param 0 dan küçükse ve harf içeriyorsa\r",
													"    pm.test(\"Status code should not be 200 if size query param < 0 or it contain letters.\", () => {\r",
													"        pm.expect(response.to.not.have.status(200));\r",
													"        })\r",
													"    };\r",
													"\r",
													"if (pm.request.url.query.get(\"size\") > 1712) {\r",
													"  pm.test(\"If size param is greater than 1712, number of patients in response should be 1712\", () => {\r",
													"    pm.expect(physiciansIdList.length).to.equal(1712);\r",
													"  });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}/api/patients?size={{current_size_param}}",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"patients"
											],
											"query": [
												{
													"key": "size",
													"value": "{{current_size_param}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3a4_InvSORT_query_for_patients",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"//status code test\r",
													"pm.test(\"Response status code is 500\", ()=> {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"// Content-Type Test\r",
													"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"//Response body properties check\r",
													"pm.test(\"Response body has -type-, -title-, -status-, -detail-, -path-, -message- properties\", function () {\r",
													"    pm.expect(response).to.be.an('object').that.has.all.keys('type', 'title', 'status', 'detail', 'path', 'message');\r",
													"});\r",
													"\r",
													"//Error message validation\r",
													"pm.test(\"Is message as expected\", () => {\r",
													"       pm.expect(response.message).to.eql(\"error.http.500\");\r",
													"  });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}/api/patients?sort=idi,ASC",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"patients"
											],
											"query": [
												{
													"key": "sort",
													"value": "idi,ASC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3b2_InvDATES_query_for_DateFiltering",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test('Response status code is 400 Bad Request', () => {",
													"    pm.response.to.have.status(400);",
													"})",
													"",
													"// Content-Type Test",
													"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");",
													"});",
													"",
													"pm.test(\"Response has the required fields\", ()=> {",
													"    pm.expect(response).to.have.property('type');",
													"    pm.expect(response).to.have.property('title');",
													"    pm.expect(response).to.have.property('status');",
													"    pm.expect(response).to.have.property('detail');",
													"    pm.expect(response).to.have.property('path');",
													"    pm.expect(response).to.have.property('message');",
													"});",
													"",
													"pm.test('Is the detail in error response body as expected', () => {",
													"    pm.expect(response.detail).to.include('Required LocalDate parameter');",
													"})",
													"",
													"pm.test('Is message as expected', () => {",
													"    pm.expect(response.message).to.eql('error.http.400');",
													"})",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_alp}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{QAT05_base_url}}/api/in-patients/bydate?startDate=2024-03-01&endDate=2024-03-30",
											"host": [
												"{{QAT05_base_url}}"
											],
											"path": [
												"api",
												"in-patients",
												"bydate"
											],
											"query": [
												{
													"key": "startDate",
													"value": "2024-03-01"
												},
												{
													"key": "endDate",
													"value": "2024-03-30"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "3a1_AllPatients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const patientsList = response.map(patients => patients.id) ",
											"console.log(\"patients sayısı\", patientsList.length)",
											"",
											"//status code 200 olmalı",
											"pm.test(\"Response status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Content-Type header test",
											"pm.test(\"Content-Type header is 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");// Content-Type Test",
											"});",
											"",
											"// Hastaların firstname, lastname,id ve phone bilgileri olmalı",
											"pm.test(\"Each patient object has non-empty -firstName-, -lastName-, -id- and -phone- fields\", () => {",
											"    pm.expect(response).to.be.an('array').that.is.not.empty;",
											"    response.forEach((patient)=> {",
											"        pm.expect(patient.firstName).to.exist.and.to.have.lengthOf.at.least(1, \"Firstname Value should not be empty\");",
											"        pm.expect(patient.lastName).to.exist.and.to.have.lengthOf.at.least(1, \"Lastname Value should not be empty\");",
											"        pm.expect(patient.id.toString()).to.exist.and.to.have.lengthOf.at.least(1, \"Id Value should not be empty\");",
											"        pm.expect(patient.phone).to.exist.and.to.have.lengthOf.at.least(1, \"Phone Value should not be empty\");",
											"    });",
											"});",
											"",
											"// patients listesi 0dan büyük olmalı ki hastaların listelendiğini doğrulayalım",
											"pm.test(\"Patients should be listed\", ()=> {",
											"    pm.expect(patientsList.length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/patients",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "3a1_Patients_page_query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Arrayden rastgele bir index seçelim\r",
											"var randomPageNUmber = Math.floor(Math.random() * 100+1);\r",
											"pm.variables.set(\"query_page_number\",randomPageNUmber)\r",
											"console.log(\"random number for page query\",pm.variables.get(\"query_page_number\") )"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response= pm.response.json()\r",
											"\r",
											"const patientsList = response.map(patients => patients.id)\r",
											"\r",
											"\r",
											"//verify successfull response\r",
											"pm.test(\"successfull HTTP status code\",()=>{\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"//Content-Type header test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");// Content-Type Test\r",
											"});\r",
											"\r",
											"// patients listesi 0dan büyük olmalı ki hastaların listelendiğini doğrulayalım\r",
											"pm.test(\"Patients should be listed\", ()=> {\r",
											"    pm.expect(patientsList.length).to.be.above(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/patients?page={{query_page_number}}",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"patients"
									],
									"query": [
										{
											"key": "page",
											"value": "{{query_page_number}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3a2_Patients_size_query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"first_Patients_id_in_page_five\",11607)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Arrayden rastgele bir index seçelim\r",
											"var randomSizeNumber = Math.floor(Math.random() * 5+1);\r",
											"pm.variables.set(\"query_size_number\",randomSizeNumber)\r",
											"console.log(\"random number for size query\",pm.variables.get(\"query_size_number\") )"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response= pm.response.json()\r",
											"\r",
											"const patientsList = response.map(patients => patients.id)\r",
											"\r",
											"//verify successfull response\r",
											"pm.test(\"successfull HTTP status code\",()=>{\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"//Content-Type header test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");// Content-Type Test\r",
											"});\r",
											"\r",
											"// listelenen patients sayısı query size ile aynı olmaalı\r",
											"pm.test(\"Patients should be listed and has same lenght with size query\", ()=> {\r",
											"    pm.expect(patientsList.length).to.be.eql(pm.variables.get(\"query_size_number\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/patients?size={{query_size_number}}",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"patients"
									],
									"query": [
										{
											"key": "size",
											"value": "{{query_size_number}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3a3_patients_sort(asc)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"const patientsIDList = response.map(patients => patients.id)// assignning physician ids to a container\r",
											"console.log(\"patientsIDList unordered : \" , patientsIDList)\r",
											"console.log(\"all patients count : \" , patientsIDList.length)\r",
											"\r",
											"const ascSortedIdList = patientsIDList.sort(function(a, b){return a - b}); //sort physician ids ascending / physician idlerini artan siralama\r",
											"console.log(\"ascending sorted IDs : \",ascSortedIdList)\r",
											"\r",
											"\r",
											"//asc param ascending id test \r",
											"pm.test(\"asc param test\", () => {\r",
											"       pm.expect(patientsIDList).to.eql(ascSortedIdList);\r",
											"       pm.expect(patientsIDList.length).to.eql(ascSortedIdList.length)\r",
											"  });\r",
											"\r",
											"//status code test\r",
											"pm.test(\"Status code is 200\", ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/patients?sort=id,asc",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"patients"
									],
									"query": [
										{
											"key": "sort",
											"value": "id,asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3a4_patients_sort(desc)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"const patientsIdList = response.map(patients => patients.id)// assigning physician ids to a container\r",
											"console.log(\"patientsIdList unordered : \" , patientsIdList)\r",
											"\r",
											"const descSortedIdList = patientsIdList.sort(function(a, b){return b - a}); //sort patients ids ascending / patients idlerini artan siralama\r",
											"console.log(\"descending sorted IDs : \",descSortedIdList)\r",
											"\r",
											"\r",
											"\r",
											"//sort param ascending id test \r",
											"pm.test(\"Sort param test\", () => {\r",
											"       pm.expect(patientsIdList).to.eql(descSortedIdList);\r",
											"       pm.expect(patientsIdList.length).to.eql(descSortedIdList.length)\r",
											"  });\r",
											"\r",
											"\r",
											"//status code test\r",
											"pm.test(\"Status code is 200\", ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/patients?sort=id,desc",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"patients"
									],
									"query": [
										{
											"key": "sort",
											"value": "id,desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3b1_Patients_DateFiltering_futureDates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status Code Test",
											"pm.test(\"Response status code is 200\", ()=> {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"// response body bos oldugunu test et",
											"pm.test(\"Response body is  empty\",  ()=> {",
											"    pm.expect(response).to.be.empty;",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/in-patients/bydate?fromDate=2024-08-20&toDate=2024-09-25",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"in-patients",
										"bydate"
									],
									"query": [
										{
											"key": "fromDate",
											"value": "2024-08-20"
										},
										{
											"key": "toDate",
											"value": "2024-09-25"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3b2_Patients_DateFiltering_DatesPassed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const response = pm.response.json();",
											"const patientsIdList = response.map(patients => patients.id)// assigning patients ids to a container",
											"",
											"// Status Code Test",
											"pm.test(\"Response status code is 200\", ()=> {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"// response body bos oldugunu test et",
											"pm.test(\"Response body should not be empty\",  ()=> {",
											"    pm.expect(response).to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id, startDate, status, appointment, patient\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach((patients)=> {",
											"        pm.expect(patients).to.have.property('id');",
											"        pm.expect(patients).to.have.property('startDate');",
											"        pm.expect(patients).to.have.property('status');",
											"        pm.expect(patients).to.have.property('appointment');",
											"        pm.expect(patients).to.have.property('patient');",
											"    });",
											"});",
											"",
											"",
											"// patients listesi 0dan büyük olmalı ki hastaların listelendiğini doğrulayalım",
											"pm.test(\"Patients should be listed\", ()=> {",
											"    pm.expect(patientsIdList.length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/in-patients/bydate?fromDate=2023-03-01&toDate=2023-03-30",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"in-patients",
										"bydate"
									],
									"query": [
										{
											"key": "fromDate",
											"value": "2023-03-01"
										},
										{
											"key": "toDate",
											"value": "2023-03-30"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Appointment",
					"item": [
						{
							"name": "4a1_Appointments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const appointments = response.map(appointments => appointments.id) ",
											"console.log(\"number of appointments created\", appointments.length)",
											"",
											"//status code 200 olmalı",
											"pm.test(\"Response status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Content-Type header test",
											"pm.test(\"Content-Type header is 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");// Content-Type Test",
											"});",
											"",
											"",
											"// patients listesi 0dan büyük olmalı ki hastaların listelendiğini doğrulayalım",
											"pm.test(\"Appointments should be listed\", ()=> {",
											"    pm.expect(appointments.length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}api/appointments",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"appointments"
									]
								}
							},
							"response": []
						},
						{
							"name": "4a2_Appointments_sort_bitmedi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"const response = pm.response.json();\r",
											"\r",
											"const patientsIDList = response.map(patients => patients.id)// assignning physician ids to a container\r",
											"console.log(\"patientsIDList unordered : \" , patientsIDList)\r",
											"console.log(\"all patients count : \" , patientsIDList.length)\r",
											"\r",
											"const ascSortedIdList = patientsIDList.sort(function(a, b){return a - b}); //sort physician ids ascending / physician idlerini artan siralama\r",
											"console.log(\"ascending sorted IDs : \",ascSortedIdList)\r",
											"\r",
											"\r",
											"//asc param ascending id test \r",
											"pm.test(\"asc param test\", () => {\r",
											"       pm.expect(patientsIDList).to.eql(ascSortedIdList);\r",
											"       pm.expect(patientsIDList.length).to.eql(ascSortedIdList.length)\r",
											"  });\r",
											"\r",
											"//status code test\r",
											"pm.test(\"Status code is 200\", ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}/api/patients?sort=id,asc",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"patients"
									],
									"query": [
										{
											"key": "sort",
											"value": "id,asc"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Rooms",
					"item": []
				},
				{
					"name": "draft",
					"item": [
						{
							"name": "adress deneme",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"\r",
											"// status code test\r",
											"pm.test(\"Status code is 400 Bad Request\",  ()=> {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"//Content-Type header test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");// Content-Type Test\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields\", ()=> {\r",
											"    pm.expect(response).to.have.property('type');\r",
											"    pm.expect(response).to.have.property('title');\r",
											"    pm.expect(response).to.have.property('status');\r",
											"    pm.expect(response).to.have.property('detail');\r",
											"    pm.expect(response).to.have.property('path');\r",
											"    pm.expect(response).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Is the detail in error response body as expected', () => {\r",
											"    pm.expect(response.detail).to.include('Cannot deserialize value of type');\r",
											"})\r",
											"\r",
											"pm.test('Is message as expected', () => {\r",
											"    pm.expect(response.message).to.eql('error.http.400');\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
											"//!! THIS REQUEST GETS THE DATA FROM PREVIOUS REQUEST\r",
											"// !!!!!!!! YOU CAN SET INVALID ADRESS DATA FROM Pre-Req IN THE PREVIOUS REQ.\r",
											"/*\r",
											"const inv_AdressArr = pm.variables.get(\"inv_Adress\")\r",
											"\r",
											"console.log(\"Multi Run Tests starts...Preparing invalid Adress data to verify...\")\r",
											"console.log(\"invalid Adress data are : \" , inv_AdressArr)\r",
											"\r",
											"pm.variables.set('current_Adress',inv_AdressArr.shift()) // take the first element in array and return it. - arraydeki ilk elementi alır ve bir arraye atar.  'current_param' arrayini sonra cagirarak kullanıyoruz.\r",
											"console.log(\"current_Adress is : \"+ pm.variables.get(\"current_Adress\"));\r",
											"\r",
											"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
											"if(Array.isArray(inv_AdressArr) && inv_AdressArr.length > 0){\r",
											"postman.setNextRequest(\"2c2(M)_InvADRESS_Date_for_Physician\") // defining next request to run again with different adress - farklı adress ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
											"} else{\r",
											"postman.setNextRequest(null);   // stop after executing current request -\r",
											"postman.setNextRequest(\"\") \r",
											"}\r",
											"\r",
											"\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": 123,\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"petros.preston@farmoaks.com\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"SURGERY\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "deneme emain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// status code test\r",
											"pm.test(\"Status code is 400 Bad Request\",  ()=> {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"//Content-Type header test\r",
											"pm.test(\"Content-Type header is 'application/json'\", ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");// Content-Type Test\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields\", ()=> {\r",
											"    pm.expect(response).to.have.property('type');\r",
											"    pm.expect(response).to.have.property('title');\r",
											"    pm.expect(response).to.have.property('status');\r",
											"    pm.expect(response).to.have.property('detail');\r",
											"    pm.expect(response).to.have.property('path');\r",
											"    pm.expect(response).to.have.property('message');\r",
											"});\r",
											"\r",
											"/*\r",
											"pm.test('Is the detail in error response body as expected', () => {\r",
											"    pm.expect(response.detail).to.include('Cannot deserialize value of type');\r",
											"})\r",
											"*/\r",
											"\r",
											"pm.test('Is message as expected', () => {\r",
											"    pm.expect(response.message).to.eql('error.http.400');\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"' '\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"om\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"SURGERY\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "deneme adress Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"{{randomAdress_alp}}\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"{{randomEmail_alp}}\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"{{randomSpeciality_alp}}\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians/91612",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians",
										"91612"
									]
								}
							},
							"response": []
						},
						{
							"name": "2a7(M)_InvPAGE_queryParams_for_Physician Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
											"//!! THIS REQUEST GETS THE DATA FROM \"2a7_SET_INVALID_PAGE_PARAMS_TO_USE\" REQUEST\r",
											"// !!!!!!!! YOU CAN SET INVALID PAGE PARAMS FROM Pre-Req IN THE \"\"2a7_SET_INVALID_PAGE_PARAMS_TO_USE\"\"\r",
											"\r",
											"const inv_pageParams = pm.variables.get(\"inv_pageParams1\")\r",
											"\r",
											"console.log(\"Multi Run Tests starts...Preparing invalid page params to verify...\")\r",
											"console.log(\"invalid page params are : \" , inv_pageParams)\r",
											"\r",
											"pm.variables.set('current_param',inv_pageParams.shift()) // take the first element in array and return it. - arraydeki ilk elementi alır ve bir arraye atar.  'current_param' arrayini sonra cagirarak kullanıyoruz.\r",
											"console.log(\"current_param : \"+ pm.variables.get(\"current_param\"));\r",
											"\r",
											"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
											"if(Array.isArray(inv_pageParams) && inv_pageParams.length > 0){\r",
											"postman.setNextRequest(\"2a7(M)_InvPAGE_queryParams_for_Physician\") // defining next request to run again with different physician IDs - farklı physician IDsi ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
											"} else{\r",
											"postman.setNextRequest(null);   // stop after executing current request -\r",
											"postman.setNextRequest(\"2a8_SET_invSIZE_queryParams_for_Physician\") \r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"// verifies request doesn't return id_token property\r",
											"    const response = pm.response.json();\r",
											"pm.test(\"Response body does not contain id_token property\", ()=> {\r",
											"    pm.expect(response).to.not.have.property(\"id\");\r",
											"    pm.expect(response).to.not.have.property(\"user\");\r",
											"    pm.expect(response).to.not.have.property(\"firstName\");\r",
											"});\r",
											"*/\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code should not be 200\", function () {\r",
											"  pm.response.not.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/problem+json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"//property -id- validation test / id field'inin olmadığını test eder.\r",
											"pm.test('Response body should not have -user- property. There should be no response body', () => {\r",
											"    pm.expect(pm.response[0]).to.have.property('user');\r",
											"})\r",
											"\r",
											"// Request URL contains \"page\" query Test - Request URL page query'si içeriyor mu\r",
											"pm.test(\"Page parameter is correctly set in the request URL\", () => {\r",
											"    pm.expect(pm.request.url.query.get(\"page\")).to.exist;\r",
											"});\r",
											"\r",
											"// Page Query parameter sadece sayılardan oluşmalı\r",
											"pm.test (\"Page Query parameter should be digit/number\", ()=>  {\r",
											"  // Page Query parameter'ın sayı olup olmadığını kontrol edelim\r",
											"  pm.expect (isNaN (pm.request.url.query.get(\"page\"))).to.be.false;\r",
											"  //isNaN-> değerin NOT A NUUMBER yani \"sayı Değil\" olup olmadığını kontrol eder. \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians?page={{current_param}}",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									],
									"query": [
										{
											"key": "page",
											"value": "{{current_param}}"
										},
										{
											"key": "size",
											"value": "1",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2a8(M)_InvSIZE_ Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const response = pm.response.json();\r",
											"const physicianIDarr = response.map(physician => physician.id) //create a container/variable for physicians ids\r",
											"\r",
											"// physicianID_length tum id sayısı\r",
											"console.log(\"Number of physician in response body  : \" , physicianIDarr.length)\r",
											"\r",
											"\r",
											"//status code test\r",
											"pm.test('Status code should not be 200 OK', () => {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response should be empty\", () => {\r",
											"  pm.expect(pm.response.text()).to.be.empty;\r",
											"});\r",
											"\r",
											" // Query parametresinin harf içerip içermediğinine bakalim\r",
											"var isNotNumber = isNaN(pm.request.url.query.get(\"size\"));\r",
											"    // Query parametresinin 0'dan küçük veya eşit olup olmadığını kontrol edelim\r",
											"var isNegative = pm.request.url.query.get(\"size\") <= 0;\r",
											"    // Eğer query parametresi 0'dan küçük veya harf içeriyorsa, status code 400 olmali\r",
											"if (isNotNumber || isNegative) {\r",
											"// Eğer size param 0 dan küçükse ve harf içeriyorsa\r",
											"    pm.test(\"Status code should not be 200 if size query param < 0 or it contain letters.\", () => {\r",
											"        pm.expect(response.to.not.have.status(200));\r",
											"        })\r",
											"    };\r",
											"\r",
											"if (pm.request.url.query.get(\"size\") > 89) {\r",
											"  pm.test(\"If size param is greater than 89, number of physician in response should be 89\", () => {\r",
											"    pm.expect(physicianIDarr.length).to.equal(89);\r",
											"  });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians?size=xbc",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									],
									"query": [
										{
											"key": "size",
											"value": "xbc"
										},
										{
											"key": null,
											"value": "\"-1,0,21,xbc,(,101,454546564\"",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2c2(M)_InvADRESS_copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// status code test\r",
											"pm.test(\"Status code is 400 Bad Request\",  ()=> {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields\", ()=> {\r",
											"    pm.expect(response).to.have.property('type');\r",
											"    pm.expect(response).to.have.property('title');\r",
											"    pm.expect(response).to.have.property('status');\r",
											"    pm.expect(response).to.have.property('detail');\r",
											"    pm.expect(response).to.have.property('path');\r",
											"    pm.expect(response).to.have.property('message');\r",
											"});\r",
											"\r",
											"/*\r",
											"pm.test('Is the detail in error response body as expected', () => {\r",
											"    pm.expect(response.detail).to.include('Cannot deserialize value of type');\r",
											"})\r",
											"*/\r",
											"\r",
											"pm.test('Is message as expected', () => {\r",
											"    pm.expect(response.message).to.eql('error.http.400');\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// RUN FROM FOLDER RUNNER - FOLDER YA DA COLLECTION RUNNERDAN CALISTIR\r",
											"//!! THIS REQUEST GETS THE DATA FROM PREVIOUS REQUEST\r",
											"// !!!!!!!! YOU CAN SET INVALID ADRESS DATA FROM Pre-Req IN THE PREVIOUS REQ.\r",
											"\r",
											"const inv_AdressArr = pm.variables.get(\"inv_Adress\")\r",
											"\r",
											"console.log(\"Multi Run Tests starts...Preparing invalid Adress data to verify...\")\r",
											"console.log(\"invalid Adress data are : \" , inv_AdressArr)\r",
											"\r",
											"pm.variables.set('current_Adress',inv_AdressArr.shift()) // take the first element in array and return it. - arraydeki ilk elementi alır ve bir arraye atar.  'current_param' arrayini sonra cagirarak kullanıyoruz.\r",
											"console.log(\"current_Adress is : \"+ pm.variables.get(\"current_Adress\"));\r",
											"\r",
											"// to be sure its an array and array length should be more than 0 - array bir arrayse be arrayin length i 0'dan büyükse.\r",
											"if(Array.isArray(inv_AdressArr) && inv_AdressArr.length > 0){\r",
											"postman.setNextRequest(\"2c2(M)_InvADRESS_Date_for_Physician\") // defining next request to run again with different adress - farklı adress ile çalıştırmak için sonraki request belirle. parantez içine request adı.\r",
											"} else{\r",
											"postman.setNextRequest(null);   // stop after executing current request -\r",
											"postman.setNextRequest(\"2c3_SET_invEMAIL_Data_for_Physician\") \r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"{{current_Adress}}\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"petros.preston@farmoaks.com\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"SURGERY\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "2c3_Physicians_Email Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response= pm.response.json()\r",
											"\r",
											"console.log(\"E-mail field should be :\" , pm.collectionVariables.get(\"randomEmail_alp\"))\r",
											"console.log(\"E-mail field in response :\" , response.user.email)\r",
											"\r",
											"// status code test\r",
											"pm.test(\"Status code is 200\",  ()=> {\r",
											"    pm.response.to.have.status(200); //status code validation test\r",
											"});\r",
											"\r",
											"//Content-Type header test\r",
											"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");// Content-Type Test\r",
											"});\r",
											"\r",
											"//Response payload email field updated verification test\r",
											"pm.test(\"Response Payload E-Mail field updated \",()=> {\r",
											"    pm.expect(response.email.toString()).to.equal(pm.collectionVariables.get(\"randomEmail_alp\"));\r",
											"})\r",
											"\r",
											"// Physician has email property/field Test\r",
											"pm.test(\"Physician should have email property\", ()=> {\r",
											"      pm.expect(response.user).to.have.property('email'); // validates each physician body has email property\r",
											"});\r",
											"\r",
											"//id ile physician sorgulatıp ilgili fieldlar değişmişmi kontrol etmek için\r",
											"pm.variables.set(\"updatedID\",response.id)\r",
											"\r",
											"\r",
											"postman.setNextRequest(\"2c4_Physicians_Update_Check\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// 10 tane rastgele email adresi üretelim\r",
											"function generateEmails (num) {\r",
											"  var emails = []; //email için container\r",
											"  \r",
											"  for (var i = 0; i < num; i++) {\r",
											"    var name = Math.random().toString(36).substring(2, 10); //isim yapalim\r",
											"    var domain = Math.random().toString(36).substring(2, 6) + \".com\"; // domain olusturma\r",
											"    var email = \"alp_\" + name + \"@\" + domain; //email son hali\r",
											"    emails.push(email); // arraye ekleme\r",
											"  }\r",
											"  return emails;\r",
											"}\r",
											"\r",
											"var emails = generateEmails(10); //method call and getting 10 email.\r",
											"\r",
											"console.log(emails);\r",
											"\r",
											"\r",
											"// Arrayden rastgele bir index seçelim\r",
											"var randomIndex = Math.floor(Math.random() * emails.length);\r",
											"\r",
											"// Arrayden rastgele seçilen elemanı alalım\r",
											"var ramdomEmail = emails[randomIndex];\r",
											"\r",
											"// Rastgele seçilen elemanı bir environment variable'a atayalım\r",
											"pm.collectionVariables.set(\"randomEmail_alp\", ramdomEmail);\r",
											"\r",
											"// Sonucu konsola yazdıralım\r",
											"console.log(\"Random selected e-mail field data : \" + ramdomEmail);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"{{randomAdress_alp}}\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"{{randomEmail_alp}}\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"{{randomSpeciality_alp}}\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "2a7(M)_InvPAGE_queryParams_for_Physician Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"// verifies request doesn't return id_token property\r",
											"    const response = pm.response.json();\r",
											"pm.test(\"Response body does not contain id_token property\", ()=> {\r",
											"    pm.expect(response).to.not.have.property(\"id\");\r",
											"    pm.expect(response).to.not.have.property(\"user\");\r",
											"    pm.expect(response).to.not.have.property(\"firstName\");\r",
											"});\r",
											"*/\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code should not be 200\", function () {\r",
											"  pm.response.not.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/problem+json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"//property -id- validation test / id field'inin olmadığını test eder.\r",
											"pm.test('Response body should not have -user- property. There should be no response body', () => {\r",
											"    pm.expect(pm.response[0]).to.have.property('user');\r",
											"})\r",
											"\r",
											"// Request URL contains \"page\" query Test - Request URL page query'si içeriyor mu\r",
											"pm.test(\"Page parameter is correctly set in the request URL\", () => {\r",
											"    pm.expect(pm.request.url.query.get(\"page\")).to.exist;\r",
											"});\r",
											"\r",
											"// Page Query parameter sadece sayılardan oluşmalı\r",
											"pm.test (\"Page Query parameter should be digit/number\", ()=>  {\r",
											"  // Page Query parameter'ın sayı olup olmadığını kontrol edelim\r",
											"  pm.expect (isNaN (pm.request.url.query.get(\"page\"))).to.be.false;\r",
											"  //isNaN-> değerin NOT A NUUMBER yani \"sayı Değil\" olup olmadığını kontrol eder. \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians?page=abc",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									],
									"query": [
										{
											"key": "page",
											"value": "abc"
										},
										{
											"key": "size",
											"value": "1",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2a8(M)_InvSIZE_queryParams_for_Physician Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const response = pm.response.json();\r",
											"const physicianIDarr = response.map(physician => physician.id) //create a container/variable for physicians ids\r",
											"\r",
											"// physicianID_length tum id sayısı\r",
											"console.log(\"Number of physician in response body  : \" , physicianIDarr.length)\r",
											"\r",
											"\r",
											"//status code test\r",
											"pm.test('Status code should not be 200 OK', () => {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response should be empty\", () => {\r",
											"  pm.expect(pm.response.text()).to.be.empty;\r",
											"});\r",
											"\r",
											" // Query parametresinin harf içerip içermediğinine bakalim\r",
											"var isNotNumber = isNaN(pm.request.url.query.get(\"size\"));\r",
											"    // Query parametresinin 0'dan küçük veya eşit olup olmadığını kontrol edelim\r",
											"var isNegative = pm.request.url.query.get(\"size\") <= 0;\r",
											"    // Eğer query parametresi 0'dan küçük veya harf içeriyorsa, status code 400 olmali\r",
											"if (isNotNumber || isNegative) {\r",
											"// Eğer size param 0 dan küçükse ve harf içeriyorsa\r",
											"    pm.test(\"Status code should not be 200 if size query param < 0 or it contain letters.\", () => {\r",
											"        pm.expect(response.to.not.have.status(200));\r",
											"        })\r",
											"    };\r",
											"\r",
											"if (pm.request.url.query.get(\"size\") > 89) {\r",
											"  pm.test(\"If size param is greater than 89, number of physician in response should be 89\", () => {\r",
											"    pm.expect(physicianIDarr.length).to.equal(89);\r",
											"  });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{QAT05_base_url}}api/physicians?size=-1",
									"host": [
										"{{QAT05_base_url}}api"
									],
									"path": [
										"physicians"
									],
									"query": [
										{
											"key": "size",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2c1(M)_InvSPECIALITY_data_for_physician Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"\r",
											"// status code test\r",
											"pm.test(\"Status code is 400 Bad Request\",  ()=> {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields\", ()=> {\r",
											"    pm.expect(response).to.have.property('type');\r",
											"    pm.expect(response).to.have.property('title');\r",
											"    pm.expect(response).to.have.property('status');\r",
											"    pm.expect(response).to.have.property('detail');\r",
											"    pm.expect(response).to.have.property('path');\r",
											"    pm.expect(response).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Is the detail in error response body as expected', () => {\r",
											"    pm.expect(response.detail).to.include('Cannot deserialize value of type');\r",
											"})\r",
											"\r",
											"pm.test('Is message as expected', () => {\r",
											"    pm.expect(response.message).to.eql('error.http.400');\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"asdasdads\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"petros.preston@farmoaks.com\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"asddsa\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians"
									]
								}
							},
							"response": []
						},
						{
							"name": "2c2(M)_InvADRESS_Date_for_Physician Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// status code test\r",
											"pm.test(\"Status code is 400 Bad Request\",  ()=> {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"// Content-Type Test\r",
											"pm.test(\"Content-Type header is 'application/problem+json'\", ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields\", ()=> {\r",
											"    pm.expect(response).to.have.property('type');\r",
											"    pm.expect(response).to.have.property('title');\r",
											"    pm.expect(response).to.have.property('status');\r",
											"    pm.expect(response).to.have.property('detail');\r",
											"    pm.expect(response).to.have.property('path');\r",
											"    pm.expect(response).to.have.property('message');\r",
											"});\r",
											"\r",
											"/*\r",
											"pm.test('Is the detail in error response body as expected', () => {\r",
											"    pm.expect(response.detail).to.include('Cannot deserialize value of type');\r",
											"})\r",
											"*/\r",
											"\r",
											"pm.test('Is message as expected', () => {\r",
											"    pm.expect(response.message).to.eql('error.http.400');\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_alp}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"createdBy\": \"postman_team06\",\r\n    \"createdDate\": \"2024-02-12T13:24:17.081449Z\",\r\n    \"id\": 91612,\r\n    \"firstName\": \"jane\",\r\n    \"lastName\": \"deneme\",\r\n    \"birthDate\": \"2003-02-11T22:00:00Z\",\r\n    \"phone\": \"5520856395\",\r\n    \"gender\": \"MALE\",\r\n    \"bloodGroup\": \"Apositive\",\r\n    \"adress\": \"%%%%++++$$$$$\",\r\n    \"description\": \"\",\r\n    \"user\": {\r\n        \"createdBy\": \"anonymousUser\",\r\n        \"createdDate\": \"2024-02-09T19:42:11.281761Z\",\r\n        \"id\": 90965,\r\n        \"login\": \"postman_team06\",\r\n        \"firstName\": \"jane\",\r\n        \"lastName\": \"austin\",\r\n        \"email\": \"petros.preston@farmoaks.com\",\r\n        \"activated\": true,\r\n        \"langKey\": \"en\",\r\n        \"imageUrl\": null,\r\n        \"resetDate\": null,\r\n        \"ssn\": \"009-88-7043\"\r\n    },\r\n    \"speciality\": \"SURGERY\",\r\n    \"appointments\": null,\r\n    \"country\": {\r\n        \"id\": 24331,\r\n        \"name\": \"turkiye\"\r\n    },\r\n    \"cstate\": null,\r\n    \"examFee\": 90.00,\r\n    \"image\": \"\",\r\n    \"imageContentType\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{QAT05_base_url}}/api/physicians",
									"host": [
										"{{QAT05_base_url}}"
									],
									"path": [
										"api",
										"physicians"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token_password",
			"value": "Ab188100*",
			"type": "string"
		},
		{
			"key": "token_username",
			"value": "alibnc123",
			"type": "string"
		},
		{
			"key": "ali_physicianNegative_size0",
			"value": "0",
			"type": "string"
		},
		{
			"key": "ali_physicianNegative_size-1",
			"value": "-1",
			"type": "string"
		},
		{
			"key": "ali_appointment_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "muratusername_token",
			"value": "adminmmurat",
			"type": "string"
		},
		{
			"key": "muratpassword_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "muratwrongusername_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "muratwrongpassword_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "murat_physician_size",
			"value": "1",
			"type": "string"
		},
		{
			"key": "muratidlist",
			"value": "",
			"type": "string"
		},
		{
			"key": "seymausername",
			"value": "adminseyma",
			"type": "string"
		},
		{
			"key": "seymapassword",
			"value": "123456789",
			"type": "string"
		},
		{
			"key": "sphyscians_size",
			"value": "",
			"type": "string"
		},
		{
			"key": "spatients_size",
			"value": "20",
			"type": "string"
		},
		{
			"key": "sroom_size",
			"value": "20",
			"type": "string"
		},
		{
			"key": "sphyscians_page",
			"value": "",
			"type": "string"
		},
		{
			"key": "sphyscianssort_asc",
			"value": "",
			"type": "string"
		},
		{
			"key": "invalidRandom_UserName_alp",
			"value": "Derek"
		},
		{
			"key": "invalidRandom_Password_alp",
			"value": "3Pp8_n6wvndgNSp"
		},
		{
			"key": "sphyscian_id",
			"value": 5202
		},
		{
			"key": "besIdList",
			"value": [
				5202,
				99342,
				1313,
				1305,
				99341
			]
		},
		{
			"key": "muratid",
			"value": ""
		},
		{
			"key": "randomspecialist",
			"value": ""
		},
		{
			"key": "randomSelected_physicianID_alp",
			"value": 20343
		},
		{
			"key": "spatients_id",
			"value": 5978
		},
		{
			"key": "sroom_id",
			"value": 68242
		},
		{
			"key": "randoms_emails",
			"value": ""
		},
		{
			"key": "randoms_adress",
			"value": ""
		},
		{
			"key": "murat_patient_size",
			"value": "",
			"type": "string"
		},
		{
			"key": "list_speciality",
			"value": ""
		},
		{
			"key": "idpatient_mrt",
			"value": ""
		},
		{
			"key": "tokenyeni",
			"value": ""
		},
		{
			"key": "roomid_murat",
			"value": ""
		},
		{
			"key": "randomspecialtysets",
			"value": ""
		},
		{
			"key": "randomSpeciality_alp",
			"value": "SURGERY"
		},
		{
			"key": "randomAdress_alp",
			"value": "İleride Alparslanın eivnin orada"
		},
		{
			"key": "randomEmail_alp",
			"value": "alp_o397k6hd@9ibp.com"
		},
		{
			"key": "token_goksel",
			"value": "",
			"disabled": true
		},
		{
			"key": "physicians_size",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "physicians_page",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "physicians_sort",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "roomID_goksel",
			"value": ""
		},
		{
			"key": "roomID_Delete_goksel",
			"value": "",
			"type": "string"
		},
		{
			"key": "token_goksel",
			"value": ""
		},
		{
			"key": "username_alp",
			"value": ""
		},
		{
			"key": "password_alp",
			"value": ""
		},
		{
			"key": "goksel1",
			"value": ""
		},
		{
			"key": "goksel2",
			"value": ""
		},
		{
			"key": "goksel3",
			"value": ""
		},
		{
			"key": "goksel4",
			"value": ""
		},
		{
			"key": "goksel5",
			"value": ""
		},
		{
			"key": "goksel6",
			"value": ""
		},
		{
			"key": "goksel7",
			"value": ""
		},
		{
			"key": "mustafa1",
			"value": ""
		},
		{
			"key": "mustafa2",
			"value": ""
		},
		{
			"key": "mustafa3",
			"value": ""
		},
		{
			"key": "mustafa4",
			"value": ""
		},
		{
			"key": "mustafa5",
			"value": ""
		},
		{
			"key": "mustafa6",
			"value": ""
		},
		{
			"key": "mustafa7",
			"value": ""
		}
	]
}